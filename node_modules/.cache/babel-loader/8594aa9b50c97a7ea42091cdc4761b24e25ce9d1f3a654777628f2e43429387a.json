{"ast":null,"code":"var _RealTimeRecipeLoader;import{MankaeRecipeProcessor}from'../utils/recipeDataProcessor';import{csvProcessor}from'../utils/csvProcessor';import{optimizedCSVProcessor}from'../utils/optimizedCSVProcessor';import{getRecipeIngredientsData}from'./recipeIngredients';// 🔥 실시간 만개의 레시피 데이터 로더\nclass RealTimeRecipeLoader{constructor(){this.processor=new MankaeRecipeProcessor();this.cachedRecipes=new Map();this.isLoading=false;}static getInstance(){if(!RealTimeRecipeLoader.instance){RealTimeRecipeLoader.instance=new RealTimeRecipeLoader();}return RealTimeRecipeLoader.instance;}// 🎯 목표별 레시피 조회 (고성능 최적화)\nasync getRecipesByGoal(goal){// 캐시 확인 (빈 배열 감지)\nif(this.cachedRecipes.has(goal)){const cached=this.cachedRecipes.get(goal);console.log(\"\\u26A1 \\uCE90\\uC2DC\\uB41C \".concat(goal,\" \\uB808\\uC2DC\\uD53C: \").concat(cached.length,\"\\uAC1C\"));// 빈 캐시면 무효화\nif(cached.length===0){console.log('⚠️ 빈 캐시 감지! 삭제하고 재로드');this.cachedRecipes.delete(goal);}else{return cached;}}try{console.log(\"\\uD83D\\uDE80 \".concat(goal,\" \\uACE0\\uC131\\uB2A5 \\uB808\\uC2DC\\uD53C \\uB85C\\uB529 \\uC2DC\\uC791...\"));const startTime=performance.now();// 🔥 최적화된 프로세서 사용 (스트리밍 + 청크) - 더 많은 레시피 확보\nconsole.log(\"\\uD83D\\uDCE5 \".concat(goal,\" \\uB808\\uC2DC\\uD53C \\uC694\\uCCAD \\uC2DC\\uC791 (\\uCD5C\\uB300 200\\uAC1C)\"));const rawRecipes=await optimizedCSVProcessor.getRecipesByGoal(goal,200);console.log(\"\\uD83D\\uDCE4 \".concat(goal,\" \\uC6D0\\uBCF8 \\uB808\\uC2DC\\uD53C \\uC218\\uC2E0: \").concat(rawRecipes.length,\"\\uAC1C\"));// 🔄 배치 처리로 변환 최적화\nconst convertedRecipes=[];const batchSize=10;for(let i=0;i<rawRecipes.length;i+=batchSize){const batch=rawRecipes.slice(i,i+batchSize);// 배치 단위로 병렬 처리\nconst batchResults=await Promise.allSettled(batch.map(async rawRecipe=>{try{const recipe=this.processor.processRecipe(rawRecipe);console.log(\"\\uD83D\\uDD27 \\uCC98\\uB9AC \\uC911\\uC778 \\uB808\\uC2DC\\uD53C: \".concat(rawRecipe.CKG_NM||rawRecipe.RCP_TTL));return recipe;}catch(error){console.log(\"\\u274C \\uB808\\uC2DC\\uD53C \\uCC98\\uB9AC \\uC5D0\\uB7EC: \".concat(rawRecipe.CKG_NM||rawRecipe.RCP_TTL),error);throw error;// null 대신 에러를 던져서 rejected 상태로 만듦\n}}));// 🔥 상세 디버깅: 변환 과정 전체 추적\nlet batchSuccessCount=0;let batchGoalMatchCount=0;batchResults.forEach((result,index)=>{if(result.status==='fulfilled'&&result.value){var _recipe$goalFit,_recipe$goalFit2;const recipe=result.value;batchSuccessCount++;console.log(\"\\uD83D\\uDD04 \\uB808\\uC2DC\\uD53C \\uBCC0\\uD658 \\uC131\\uACF5 \".concat(i+index+1,\": \").concat(recipe.name));console.log(\"   - \\uBAA9\\uD45C \\uBD84\\uB958: [\".concat(((_recipe$goalFit=recipe.goalFit)===null||_recipe$goalFit===void 0?void 0:_recipe$goalFit.join(', '))||'없음',\"]\"));console.log(\"   - \\uBAA9\\uD45C \\uD3EC\\uD568 \\uC5EC\\uBD80: \".concat((_recipe$goalFit2=recipe.goalFit)!==null&&_recipe$goalFit2!==void 0&&_recipe$goalFit2.includes(goal)?'✅ 포함':'❌ 제외'));if(recipe.goalFit&&recipe.goalFit.includes(goal)){convertedRecipes.push(recipe);batchGoalMatchCount++;console.log(\"\\u2705 \".concat(goal,\" \\uCD5C\\uC885 \\uB9E4\\uCE6D: \").concat(recipe.name));}}else if(result.status==='rejected'){console.log(\"\\u274C \\uB808\\uC2DC\\uD53C \\uCC98\\uB9AC \\uC2E4\\uD328 \".concat(i+index+1,\":\"),result.reason);}else if(result.status==='fulfilled'&&!result.value){console.log(\"\\u26A0\\uFE0F \\uB808\\uC2DC\\uD53C \\uCC98\\uB9AC \\uACB0\\uACFC\\uAC00 null \".concat(i+index+1));}});console.log(\"\\uD83D\\uDCCA \\uBC30\\uCE58 \\uACB0\\uACFC: \".concat(batchSuccessCount,\"\\uAC1C \\uCC98\\uB9AC, \").concat(batchGoalMatchCount,\"\\uAC1C \").concat(goal,\" \\uB9E4\\uCE6D\"));console.log(\"\\uD83D\\uDCC8 \\uB204\\uC801 \\uACB0\\uACFC: \".concat(convertedRecipes.length,\"\\uAC1C \").concat(goal,\" \\uB808\\uC2DC\\uD53C\"));// UI 응답성을 위한 마이크로 태스크\nif(i%(batchSize*3)===0){await new Promise(resolve=>setTimeout(resolve,0));}}// 품질 점수로 정렬\nconst sortedRecipes=convertedRecipes.sort((a,b)=>{var _b$userRatings,_a$userRatings;return(((_b$userRatings=b.userRatings)===null||_b$userRatings===void 0?void 0:_b$userRatings.overall)||0)-(((_a$userRatings=a.userRatings)===null||_a$userRatings===void 0?void 0:_a$userRatings.overall)||0);});// 캐시 저장\nthis.cachedRecipes.set(goal,sortedRecipes);const endTime=performance.now();const loadTime=Math.round(endTime-startTime);console.log(\"\\u2705 \".concat(goal,\" \\uB808\\uC2DC\\uD53C \").concat(sortedRecipes.length,\"\\uAC1C \\uACE0\\uC131\\uB2A5 \\uB85C\\uB4DC \\uC644\\uB8CC (\").concat(loadTime,\"ms)\"));return sortedRecipes;}catch(error){console.error(\"\\u274C \".concat(goal,\" \\uB808\\uC2DC\\uD53C \\uB85C\\uB4DC \\uC2E4\\uD328:\"),error);// 🔄 폴백: 기존 방식\nconsole.log(\"\\u26A0\\uFE0F \".concat(goal,\" \\uD3F4\\uBC31 \\uBAA8\\uB4DC\\uB85C \\uC804\\uD658\"));return this.fallbackGetRecipesByGoal(goal);}}// 🔄 폴백 메소드 (기존 방식)\nasync fallbackGetRecipesByGoal(goal){const goalKeywords={weight_loss:['다이어트','저칼로리','살빼기'],muscle_gain:['단백질','근육','고단백'],maintenance:['건강','균형','일상']};console.log(\"\\uD83D\\uDD04 \\uD3F4\\uBC31 \\uBAA8\\uB4DC: \".concat(goal,\" \\uB808\\uC2DC\\uD53C \\uB85C\\uB4DC \\uC2DC\\uC791\"));try{const rawRecipes=await csvProcessor.getRecipesByKeywords(goalKeywords[goal],30);console.log(\"\\uD83D\\uDCCB \\uD3F4\\uBC31: CSV\\uC5D0\\uC11C \".concat(rawRecipes.length,\"\\uAC1C \\uB808\\uC2DC\\uD53C \\uCC3E\\uC74C\"));const convertedRecipes=[];for(const rawRecipe of rawRecipes){try{const recipe=this.processor.processRecipe(rawRecipe);if(recipe.goalFit.includes(goal)){convertedRecipes.push(recipe);}}catch(error){continue;}}return convertedRecipes.sort((a,b)=>{var _b$userRatings2,_a$userRatings2;return(((_b$userRatings2=b.userRatings)===null||_b$userRatings2===void 0?void 0:_b$userRatings2.overall)||0)-(((_a$userRatings2=a.userRatings)===null||_a$userRatings2===void 0?void 0:_a$userRatings2.overall)||0);});}catch(error){console.error(\"\\u274C \".concat(goal,\" \\uD3F4\\uBC31 \\uB85C\\uB4DC\\uB3C4 \\uC2E4\\uD328:\"),error);return[];}}// 🔥 인기 레시피 조회\nasync getPopularRecipes(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;const cacheKey=\"popular_\".concat(limit);if(this.cachedRecipes.has(cacheKey)){return this.cachedRecipes.get(cacheKey);}try{const rawRecipes=await csvProcessor.getPopularRecipes(limit);const convertedRecipes=rawRecipes.map(raw=>{try{return this.processor.processRecipe(raw);}catch(_unused){return null;}}).filter(recipe=>recipe!==null);this.cachedRecipes.set(cacheKey,convertedRecipes);return convertedRecipes;}catch(error){console.error('❌ 인기 레시피 로드 실패:',error);return[];}}// 🔍 레시피 검색\nasync searchRecipes(query){try{const rawRecipes=await csvProcessor.searchRecipes(query,50);return rawRecipes.map(raw=>{try{return this.processor.processRecipe(raw);}catch(_unused2){return null;}}).filter(recipe=>recipe!==null);}catch(error){console.error('❌ 레시피 검색 실패:',error);return[];}}// 📊 통계 정보\nasync getStatistics(){return csvProcessor.getStatistics();}// 🔄 캐시 클리어\nclearCache(){this.cachedRecipes.clear();console.log('🧹 레시피 캐시 클리어 완료');}// 🔍 캐시 및 시스템 상태 진단\nasync diagnoseCacheStatus(){var _this$cachedRecipes$g,_this$cachedRecipes$g2,_this$cachedRecipes$g3;console.log('🔍 === 레시피 시스템 진단 시작 ===');console.log(\"\\uD83D\\uDCE6 \\uCE90\\uC2DC\\uB41C \\uBAA9\\uD45C\\uBCC4 \\uB808\\uC2DC\\uD53C \\uC218:\");console.log(\"   - weight_loss: \".concat(((_this$cachedRecipes$g=this.cachedRecipes.get('weight_loss'))===null||_this$cachedRecipes$g===void 0?void 0:_this$cachedRecipes$g.length)||0,\"\\uAC1C\"));console.log(\"   - muscle_gain: \".concat(((_this$cachedRecipes$g2=this.cachedRecipes.get('muscle_gain'))===null||_this$cachedRecipes$g2===void 0?void 0:_this$cachedRecipes$g2.length)||0,\"\\uAC1C\"));console.log(\"   - maintenance: \".concat(((_this$cachedRecipes$g3=this.cachedRecipes.get('maintenance'))===null||_this$cachedRecipes$g3===void 0?void 0:_this$cachedRecipes$g3.length)||0,\"\\uAC1C\"));// 빈 캐시 강제 재로딩\nfor(const goal of['weight_loss','muscle_gain','maintenance']){const cached=this.cachedRecipes.get(goal);if(!cached||cached.length===0){console.log(\"\\uD83D\\uDD04 \".concat(goal,\" \\uCE90\\uC2DC\\uAC00 \\uBE44\\uC5B4\\uC788\\uC74C, \\uAC15\\uC81C \\uC7AC\\uB85C\\uB529...\"));const result=await this.getRecipesByGoal(goal);console.log(\"\\u2705 \".concat(goal,\" \\uC7AC\\uB85C\\uB529 \\uC644\\uB8CC: \").concat(result.length,\"\\uAC1C\"));}}console.log('🔍 === 진단 완료 ===');}// 🔍 레시피 찾기 (공개 메소드)\nfindRecipeById(recipeId){const allRecipes=[...(this.cachedRecipes.get('weight_loss')||[]),...(this.cachedRecipes.get('muscle_gain')||[]),...(this.cachedRecipes.get('maintenance')||[])];return allRecipes.find(r=>r.id===recipeId);}}// 🎯 전역 레시피 로더 인스턴스\n_RealTimeRecipeLoader=RealTimeRecipeLoader;RealTimeRecipeLoader.instance=void 0;export const recipeLoader=RealTimeRecipeLoader.getInstance();// 🍳 레시피별 재료 조회 (실제 쿠팡 상품 매핑)\nexport const getRecipeIngredients=recipeId=>{console.log('🔍 getRecipeIngredients 호출됨, recipeId:',recipeId);// 레시피 ID로 실제 레시피 찾기\nconst recipe=recipeLoader.findRecipeById(recipeId);let searchTerm=recipeId;if(recipe){console.log('📋 찾은 레시피:',recipe.name);// 레시피 이름을 검색어로 사용\nsearchTerm=recipe.name;}const ingredients=getRecipeIngredientsData(searchTerm);console.log('📦 매칭된 재료 수:',ingredients.length);console.log('🛒 재료 목록:',ingredients.map(ing=>ing.product.name));return ingredients;};// 🧮 레시피 영양소 계산\nexport const calculateRecipeNutrition=recipeId=>{const ingredients=getRecipeIngredients(recipeId);return ingredients.reduce((total,ingredient)=>{const product=ingredient.product;const ratio=ingredient.quantity/100;// 100g 기준\nreturn{calories:total.calories+product.nutrition.calories*ratio,carb:total.carb+product.nutrition.carb*ratio,protein:total.protein+product.nutrition.protein*ratio,fat:total.fat+product.nutrition.fat*ratio,sodium:total.sodium+product.nutrition.sodium*ratio,sugar:total.sugar+product.nutrition.sugar*ratio};},{calories:0,carb:0,protein:0,fat:0,sodium:0,sugar:0});};// 🎯 통합 레시피 조회 함수 (비동기)\nexport const getRecipesByGoal=async goal=>{return recipeLoader.getRecipesByGoal(goal);};// 🔥 기존 동기 함수를 위한 임시 래퍼 (점진적 마이그레이션)\nexport const getRecipesByGoalSync=goal=>{console.warn('⚠️ getRecipesByGoalSync는 deprecated입니다. getRecipesByGoal을 사용하세요.');return[];};// 📊 레시피 시스템 초기화\nexport const initializeRecipeSystem=async()=>{console.log('🚀 만개의 레시피 시스템 초기화 중...');try{// 통계 정보 로드\nconst stats=await recipeLoader.getStatistics();console.log('📊 레시피 통계:',stats);// 각 목표별 레시피 프리로드 (백그라운드)\nPromise.all([recipeLoader.getRecipesByGoal('weight_loss'),recipeLoader.getRecipesByGoal('muscle_gain'),recipeLoader.getRecipesByGoal('maintenance')]).then(()=>{console.log('✅ 모든 레시피 프리로드 완료');});}catch(error){console.error('❌ 레시피 시스템 초기화 실패:',error);}};// 앱 시작시 자동 초기화\nif(typeof window!=='undefined'){initializeRecipeSystem();}","map":{"version":3,"names":["MankaeRecipeProcessor","csvProcessor","optimizedCSVProcessor","getRecipeIngredientsData","RealTimeRecipeLoader","constructor","processor","cachedRecipes","Map","isLoading","getInstance","instance","getRecipesByGoal","goal","has","cached","get","console","log","concat","length","delete","startTime","performance","now","rawRecipes","convertedRecipes","batchSize","i","batch","slice","batchResults","Promise","allSettled","map","rawRecipe","recipe","processRecipe","CKG_NM","RCP_TTL","error","batchSuccessCount","batchGoalMatchCount","forEach","result","index","status","value","_recipe$goalFit","_recipe$goalFit2","name","goalFit","join","includes","push","reason","resolve","setTimeout","sortedRecipes","sort","a","b","_b$userRatings","_a$userRatings","userRatings","overall","set","endTime","loadTime","Math","round","fallbackGetRecipesByGoal","goalKeywords","weight_loss","muscle_gain","maintenance","getRecipesByKeywords","_b$userRatings2","_a$userRatings2","getPopularRecipes","limit","arguments","undefined","cacheKey","raw","_unused","filter","searchRecipes","query","_unused2","getStatistics","clearCache","clear","diagnoseCacheStatus","_this$cachedRecipes$g","_this$cachedRecipes$g2","_this$cachedRecipes$g3","findRecipeById","recipeId","allRecipes","find","r","id","_RealTimeRecipeLoader","recipeLoader","getRecipeIngredients","searchTerm","ingredients","ing","product","calculateRecipeNutrition","reduce","total","ingredient","ratio","quantity","calories","nutrition","carb","protein","fat","sodium","sugar","getRecipesByGoalSync","warn","initializeRecipeSystem","stats","all","then","window"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/data/recipeData.ts"],"sourcesContent":["import { Recipe, RecipeIngredient } from '../types';\nimport { MankaeRecipeProcessor } from '../utils/recipeDataProcessor';\nimport { csvProcessor } from '../utils/csvProcessor';\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor';\nimport { getRecipeIngredientsData } from './recipeIngredients';\n\n// 🔥 실시간 만개의 레시피 데이터 로더\nclass RealTimeRecipeLoader {\n  private static instance: RealTimeRecipeLoader;\n  private processor = new MankaeRecipeProcessor();\n  private cachedRecipes: Map<string, Recipe[]> = new Map();\n  private isLoading = false;\n  \n  private constructor() {}\n  \n  static getInstance(): RealTimeRecipeLoader {\n    if (!RealTimeRecipeLoader.instance) {\n      RealTimeRecipeLoader.instance = new RealTimeRecipeLoader();\n    }\n    return RealTimeRecipeLoader.instance;\n  }\n  \n  // 🎯 목표별 레시피 조회 (고성능 최적화)\n  async getRecipesByGoal(goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Promise<Recipe[]> {\n    // 캐시 확인 (빈 배열 감지)\n    if (this.cachedRecipes.has(goal)) {\n      const cached = this.cachedRecipes.get(goal)!;\n      console.log(`⚡ 캐시된 ${goal} 레시피: ${cached.length}개`);\n      \n      // 빈 캐시면 무효화\n      if (cached.length === 0) {\n        console.log('⚠️ 빈 캐시 감지! 삭제하고 재로드');\n        this.cachedRecipes.delete(goal);\n      } else {\n        return cached;\n      }\n    }\n    \n    try {\n      console.log(`🚀 ${goal} 고성능 레시피 로딩 시작...`);\n      const startTime = performance.now();\n      \n      // 🔥 최적화된 프로세서 사용 (스트리밍 + 청크) - 더 많은 레시피 확보\n      console.log(`📥 ${goal} 레시피 요청 시작 (최대 200개)`);\n      const rawRecipes = await optimizedCSVProcessor.getRecipesByGoal(goal, 200);\n      console.log(`📤 ${goal} 원본 레시피 수신: ${rawRecipes.length}개`);\n      \n      // 🔄 배치 처리로 변환 최적화\n      const convertedRecipes: Recipe[] = [];\n      const batchSize = 10;\n      \n      for (let i = 0; i < rawRecipes.length; i += batchSize) {\n        const batch = rawRecipes.slice(i, i + batchSize);\n        \n        // 배치 단위로 병렬 처리\n        const batchResults = await Promise.allSettled(\n          batch.map(async (rawRecipe) => {\n            try {\n              const recipe = this.processor.processRecipe(rawRecipe);\n              console.log(`🔧 처리 중인 레시피: ${rawRecipe.CKG_NM || rawRecipe.RCP_TTL}`);\n              return recipe;\n            } catch (error) {\n              console.log(`❌ 레시피 처리 에러: ${rawRecipe.CKG_NM || rawRecipe.RCP_TTL}`, error);\n              throw error; // null 대신 에러를 던져서 rejected 상태로 만듦\n            }\n          })\n        );\n        \n        // 🔥 상세 디버깅: 변환 과정 전체 추적\n        let batchSuccessCount = 0;\n        let batchGoalMatchCount = 0;\n\n        batchResults.forEach((result, index) => {\n          if (result.status === 'fulfilled' && result.value) {\n            const recipe = result.value;\n            batchSuccessCount++;\n\n            console.log(`🔄 레시피 변환 성공 ${i + index + 1}: ${recipe.name}`);\n            console.log(`   - 목표 분류: [${recipe.goalFit?.join(', ') || '없음'}]`);\n            console.log(`   - 목표 포함 여부: ${recipe.goalFit?.includes(goal) ? '✅ 포함' : '❌ 제외'}`);\n\n            if (recipe.goalFit && recipe.goalFit.includes(goal)) {\n              convertedRecipes.push(recipe);\n              batchGoalMatchCount++;\n              console.log(`✅ ${goal} 최종 매칭: ${recipe.name}`);\n            }\n           } else if (result.status === 'rejected') {\n             console.log(`❌ 레시피 처리 실패 ${i + index + 1}:`, result.reason);\n           } else if (result.status === 'fulfilled' && !result.value) {\n             console.log(`⚠️ 레시피 처리 결과가 null ${i + index + 1}`);\n           }\n        });\n\n        console.log(`📊 배치 결과: ${batchSuccessCount}개 처리, ${batchGoalMatchCount}개 ${goal} 매칭`);\n        console.log(`📈 누적 결과: ${convertedRecipes.length}개 ${goal} 레시피`);\n        \n        // UI 응답성을 위한 마이크로 태스크\n        if (i % (batchSize * 3) === 0) {\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n      }\n      \n      // 품질 점수로 정렬\n      const sortedRecipes = convertedRecipes.sort((a, b) => \n        (b.userRatings?.overall || 0) - (a.userRatings?.overall || 0)\n      );\n      \n      // 캐시 저장\n      this.cachedRecipes.set(goal, sortedRecipes);\n      \n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      \n      console.log(`✅ ${goal} 레시피 ${sortedRecipes.length}개 고성능 로드 완료 (${loadTime}ms)`);\n      \n      return sortedRecipes;\n      \n    } catch (error) {\n      console.error(`❌ ${goal} 레시피 로드 실패:`, error);\n      \n      // 🔄 폴백: 기존 방식\n      console.log(`⚠️ ${goal} 폴백 모드로 전환`);\n      return this.fallbackGetRecipesByGoal(goal);\n    }\n  }\n  \n  // 🔄 폴백 메소드 (기존 방식)\n  private async fallbackGetRecipesByGoal(goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Promise<Recipe[]> {\n    const goalKeywords = {\n      weight_loss: ['다이어트', '저칼로리', '살빼기'],\n      muscle_gain: ['단백질', '근육', '고단백'],\n      maintenance: ['건강', '균형', '일상']\n    };\n    \n    console.log(`🔄 폴백 모드: ${goal} 레시피 로드 시작`);\n    \n    try {\n      const rawRecipes = await csvProcessor.getRecipesByKeywords(goalKeywords[goal], 30);\n      console.log(`📋 폴백: CSV에서 ${rawRecipes.length}개 레시피 찾음`);\n      const convertedRecipes: Recipe[] = [];\n      \n      for (const rawRecipe of rawRecipes) {\n        try {\n          const recipe = this.processor.processRecipe(rawRecipe);\n          if (recipe.goalFit.includes(goal)) {\n            convertedRecipes.push(recipe);\n          }\n        } catch (error) {\n          continue;\n        }\n      }\n      \n      return convertedRecipes.sort((a, b) => \n        (b.userRatings?.overall || 0) - (a.userRatings?.overall || 0)\n      );\n    } catch (error) {\n      console.error(`❌ ${goal} 폴백 로드도 실패:`, error);\n      return [];\n    }\n  }\n  \n  // 🔥 인기 레시피 조회\n  async getPopularRecipes(limit: number = 30): Promise<Recipe[]> {\n    const cacheKey = `popular_${limit}`;\n    \n    if (this.cachedRecipes.has(cacheKey)) {\n      return this.cachedRecipes.get(cacheKey)!;\n    }\n    \n    try {\n      const rawRecipes = await csvProcessor.getPopularRecipes(limit);\n      const convertedRecipes = rawRecipes\n        .map(raw => {\n          try {\n            return this.processor.processRecipe(raw);\n          } catch {\n            return null;\n          }\n        })\n        .filter((recipe): recipe is Recipe => recipe !== null);\n      \n      this.cachedRecipes.set(cacheKey, convertedRecipes);\n      return convertedRecipes;\n      \n    } catch (error) {\n      console.error('❌ 인기 레시피 로드 실패:', error);\n      return [];\n    }\n  }\n  \n  // 🔍 레시피 검색\n  async searchRecipes(query: string): Promise<Recipe[]> {\n    try {\n      const rawRecipes = await csvProcessor.searchRecipes(query, 50);\n      \n      return rawRecipes\n        .map(raw => {\n          try {\n            return this.processor.processRecipe(raw);\n          } catch {\n            return null;\n          }\n        })\n        .filter((recipe): recipe is Recipe => recipe !== null);\n        \n    } catch (error) {\n      console.error('❌ 레시피 검색 실패:', error);\n      return [];\n    }\n  }\n  \n  // 📊 통계 정보\n  async getStatistics() {\n    return csvProcessor.getStatistics();\n  }\n  \n  // 🔄 캐시 클리어\n  clearCache() {\n    this.cachedRecipes.clear();\n    console.log('🧹 레시피 캐시 클리어 완료');\n  }\n\n  // 🔍 캐시 및 시스템 상태 진단\n  async diagnoseCacheStatus(): Promise<void> {\n    console.log('🔍 === 레시피 시스템 진단 시작 ===');\n    console.log(`📦 캐시된 목표별 레시피 수:`);\n    console.log(`   - weight_loss: ${this.cachedRecipes.get('weight_loss')?.length || 0}개`);\n    console.log(`   - muscle_gain: ${this.cachedRecipes.get('muscle_gain')?.length || 0}개`);\n    console.log(`   - maintenance: ${this.cachedRecipes.get('maintenance')?.length || 0}개`);\n    \n    // 빈 캐시 강제 재로딩\n    for (const goal of ['weight_loss', 'muscle_gain', 'maintenance'] as const) {\n      const cached = this.cachedRecipes.get(goal);\n      if (!cached || cached.length === 0) {\n        console.log(`🔄 ${goal} 캐시가 비어있음, 강제 재로딩...`);\n        const result = await this.getRecipesByGoal(goal);\n        console.log(`✅ ${goal} 재로딩 완료: ${result.length}개`);\n      }\n    }\n    \n    console.log('🔍 === 진단 완료 ===');\n  }\n  \n  // 🔍 레시피 찾기 (공개 메소드)\n  findRecipeById(recipeId: string): Recipe | undefined {\n    const allRecipes = [\n      ...(this.cachedRecipes.get('weight_loss') || []),\n      ...(this.cachedRecipes.get('muscle_gain') || []),\n      ...(this.cachedRecipes.get('maintenance') || [])\n    ];\n    \n    return allRecipes.find(r => r.id === recipeId);\n  }\n}\n\n// 🎯 전역 레시피 로더 인스턴스\nexport const recipeLoader = RealTimeRecipeLoader.getInstance();\n\n// 🍳 레시피별 재료 조회 (실제 쿠팡 상품 매핑)\nexport const getRecipeIngredients = (recipeId: string): RecipeIngredient[] => {\n  console.log('🔍 getRecipeIngredients 호출됨, recipeId:', recipeId);\n  \n  // 레시피 ID로 실제 레시피 찾기\n  const recipe = recipeLoader.findRecipeById(recipeId);\n  let searchTerm = recipeId;\n  \n  if (recipe) {\n    console.log('📋 찾은 레시피:', recipe.name);\n    // 레시피 이름을 검색어로 사용\n    searchTerm = recipe.name;\n  }\n  \n  const ingredients = getRecipeIngredientsData(searchTerm);\n  console.log('📦 매칭된 재료 수:', ingredients.length);\n  console.log('🛒 재료 목록:', ingredients.map(ing => ing.product.name));\n  return ingredients;\n};\n\n// 🧮 레시피 영양소 계산\nexport const calculateRecipeNutrition = (recipeId: string) => {\n  const ingredients = getRecipeIngredients(recipeId);\n  \n  return ingredients.reduce((total, ingredient) => {\n    const product = ingredient.product;\n    const ratio = ingredient.quantity / 100; // 100g 기준\n    \n    return {\n      calories: total.calories + (product.nutrition.calories * ratio),\n      carb: total.carb + (product.nutrition.carb * ratio),\n      protein: total.protein + (product.nutrition.protein * ratio),\n      fat: total.fat + (product.nutrition.fat * ratio),\n      sodium: total.sodium + (product.nutrition.sodium * ratio),\n      sugar: total.sugar + (product.nutrition.sugar * ratio),\n    };\n  }, {\n    calories: 0,\n    carb: 0,\n    protein: 0,\n    fat: 0,\n    sodium: 0,\n    sugar: 0,\n  });\n};\n\n// 🎯 통합 레시피 조회 함수 (비동기)\nexport const getRecipesByGoal = async (goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Promise<Recipe[]> => {\n  return recipeLoader.getRecipesByGoal(goal);\n};\n\n// 🔥 기존 동기 함수를 위한 임시 래퍼 (점진적 마이그레이션)\nexport const getRecipesByGoalSync = (goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Recipe[] => {\n  console.warn('⚠️ getRecipesByGoalSync는 deprecated입니다. getRecipesByGoal을 사용하세요.');\n  return [];\n};\n\n// 📊 레시피 시스템 초기화\nexport const initializeRecipeSystem = async () => {\n  console.log('🚀 만개의 레시피 시스템 초기화 중...');\n  \n  try {\n    // 통계 정보 로드\n    const stats = await recipeLoader.getStatistics();\n    console.log('📊 레시피 통계:', stats);\n    \n    // 각 목표별 레시피 프리로드 (백그라운드)\n    Promise.all([\n      recipeLoader.getRecipesByGoal('weight_loss'),\n      recipeLoader.getRecipesByGoal('muscle_gain'),\n      recipeLoader.getRecipesByGoal('maintenance')\n    ]).then(() => {\n      console.log('✅ 모든 레시피 프리로드 완료');\n    });\n    \n  } catch (error) {\n    console.error('❌ 레시피 시스템 초기화 실패:', error);\n  }\n};\n\n// 앱 시작시 자동 초기화\nif (typeof window !== 'undefined') {\n  initializeRecipeSystem();\n}\n"],"mappings":"0BACA,OAASA,qBAAqB,KAAQ,8BAA8B,CACpE,OAASC,YAAY,KAAQ,uBAAuB,CACpD,OAASC,qBAAqB,KAAQ,gCAAgC,CACtE,OAASC,wBAAwB,KAAQ,qBAAqB,CAE9D;AACA,KAAM,CAAAC,oBAAqB,CAMjBC,WAAWA,CAAA,CAAG,MAJdC,SAAS,CAAG,GAAI,CAAAN,qBAAqB,CAAC,CAAC,MACvCO,aAAa,CAA0B,GAAI,CAAAC,GAAG,CAAC,CAAC,MAChDC,SAAS,CAAG,KAAK,CAEF,CAEvB,MAAO,CAAAC,WAAWA,CAAA,CAAyB,CACzC,GAAI,CAACN,oBAAoB,CAACO,QAAQ,CAAE,CAClCP,oBAAoB,CAACO,QAAQ,CAAG,GAAI,CAAAP,oBAAoB,CAAC,CAAC,CAC5D,CACA,MAAO,CAAAA,oBAAoB,CAACO,QAAQ,CACtC,CAEA;AACA,KAAM,CAAAC,gBAAgBA,CAACC,IAAmD,CAAqB,CAC7F;AACA,GAAI,IAAI,CAACN,aAAa,CAACO,GAAG,CAACD,IAAI,CAAC,CAAE,CAChC,KAAM,CAAAE,MAAM,CAAG,IAAI,CAACR,aAAa,CAACS,GAAG,CAACH,IAAI,CAAE,CAC5CI,OAAO,CAACC,GAAG,8BAAAC,MAAA,CAAUN,IAAI,0BAAAM,MAAA,CAASJ,MAAM,CAACK,MAAM,UAAG,CAAC,CAEnD;AACA,GAAIL,MAAM,CAACK,MAAM,GAAK,CAAC,CAAE,CACvBH,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnC,IAAI,CAACX,aAAa,CAACc,MAAM,CAACR,IAAI,CAAC,CACjC,CAAC,IAAM,CACL,MAAO,CAAAE,MAAM,CACf,CACF,CAEA,GAAI,CACFE,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAON,IAAI,uEAAmB,CAAC,CAC1C,KAAM,CAAAS,SAAS,CAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,CAEnC;AACAP,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAON,IAAI,0EAAsB,CAAC,CAC7C,KAAM,CAAAY,UAAU,CAAG,KAAM,CAAAvB,qBAAqB,CAACU,gBAAgB,CAACC,IAAI,CAAE,GAAG,CAAC,CAC1EI,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAON,IAAI,oDAAAM,MAAA,CAAeM,UAAU,CAACL,MAAM,UAAG,CAAC,CAE1D;AACA,KAAM,CAAAM,gBAA0B,CAAG,EAAE,CACrC,KAAM,CAAAC,SAAS,CAAG,EAAE,CAEpB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,UAAU,CAACL,MAAM,CAAEQ,CAAC,EAAID,SAAS,CAAE,CACrD,KAAM,CAAAE,KAAK,CAAGJ,UAAU,CAACK,KAAK,CAACF,CAAC,CAAEA,CAAC,CAAGD,SAAS,CAAC,CAEhD;AACA,KAAM,CAAAI,YAAY,CAAG,KAAM,CAAAC,OAAO,CAACC,UAAU,CAC3CJ,KAAK,CAACK,GAAG,CAAC,KAAO,CAAAC,SAAS,EAAK,CAC7B,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,IAAI,CAAC9B,SAAS,CAAC+B,aAAa,CAACF,SAAS,CAAC,CACtDlB,OAAO,CAACC,GAAG,+DAAAC,MAAA,CAAkBgB,SAAS,CAACG,MAAM,EAAIH,SAAS,CAACI,OAAO,CAAE,CAAC,CACrE,MAAO,CAAAH,MAAM,CACf,CAAE,MAAOI,KAAK,CAAE,CACdvB,OAAO,CAACC,GAAG,yDAAAC,MAAA,CAAiBgB,SAAS,CAACG,MAAM,EAAIH,SAAS,CAACI,OAAO,EAAIC,KAAK,CAAC,CAC3E,KAAM,CAAAA,KAAK,CAAE;AACf,CACF,CAAC,CACH,CAAC,CAED;AACA,GAAI,CAAAC,iBAAiB,CAAG,CAAC,CACzB,GAAI,CAAAC,mBAAmB,CAAG,CAAC,CAE3BX,YAAY,CAACY,OAAO,CAAC,CAACC,MAAM,CAAEC,KAAK,GAAK,CACtC,GAAID,MAAM,CAACE,MAAM,GAAK,WAAW,EAAIF,MAAM,CAACG,KAAK,CAAE,KAAAC,eAAA,CAAAC,gBAAA,CACjD,KAAM,CAAAb,MAAM,CAAGQ,MAAM,CAACG,KAAK,CAC3BN,iBAAiB,EAAE,CAEnBxB,OAAO,CAACC,GAAG,8DAAAC,MAAA,CAAiBS,CAAC,CAAGiB,KAAK,CAAG,CAAC,OAAA1B,MAAA,CAAKiB,MAAM,CAACc,IAAI,CAAE,CAAC,CAC5DjC,OAAO,CAACC,GAAG,qCAAAC,MAAA,CAAiB,EAAA6B,eAAA,CAAAZ,MAAM,CAACe,OAAO,UAAAH,eAAA,iBAAdA,eAAA,CAAgBI,IAAI,CAAC,IAAI,CAAC,GAAI,IAAI,KAAG,CAAC,CAClEnC,OAAO,CAACC,GAAG,iDAAAC,MAAA,CAAmB,CAAA8B,gBAAA,CAAAb,MAAM,CAACe,OAAO,UAAAF,gBAAA,WAAdA,gBAAA,CAAgBI,QAAQ,CAACxC,IAAI,CAAC,CAAG,MAAM,CAAG,MAAM,CAAE,CAAC,CAEjF,GAAIuB,MAAM,CAACe,OAAO,EAAIf,MAAM,CAACe,OAAO,CAACE,QAAQ,CAACxC,IAAI,CAAC,CAAE,CACnDa,gBAAgB,CAAC4B,IAAI,CAAClB,MAAM,CAAC,CAC7BM,mBAAmB,EAAE,CACrBzB,OAAO,CAACC,GAAG,WAAAC,MAAA,CAAMN,IAAI,iCAAAM,MAAA,CAAWiB,MAAM,CAACc,IAAI,CAAE,CAAC,CAChD,CACD,CAAC,IAAM,IAAIN,MAAM,CAACE,MAAM,GAAK,UAAU,CAAE,CACvC7B,OAAO,CAACC,GAAG,wDAAAC,MAAA,CAAgBS,CAAC,CAAGiB,KAAK,CAAG,CAAC,MAAKD,MAAM,CAACW,MAAM,CAAC,CAC7D,CAAC,IAAM,IAAIX,MAAM,CAACE,MAAM,GAAK,WAAW,EAAI,CAACF,MAAM,CAACG,KAAK,CAAE,CACzD9B,OAAO,CAACC,GAAG,yEAAAC,MAAA,CAAuBS,CAAC,CAAGiB,KAAK,CAAG,CAAC,CAAE,CAAC,CACpD,CACH,CAAC,CAAC,CAEF5B,OAAO,CAACC,GAAG,4CAAAC,MAAA,CAAcsB,iBAAiB,0BAAAtB,MAAA,CAASuB,mBAAmB,YAAAvB,MAAA,CAAKN,IAAI,iBAAK,CAAC,CACrFI,OAAO,CAACC,GAAG,4CAAAC,MAAA,CAAcO,gBAAgB,CAACN,MAAM,YAAAD,MAAA,CAAKN,IAAI,uBAAM,CAAC,CAEhE;AACA,GAAIe,CAAC,EAAID,SAAS,CAAG,CAAC,CAAC,GAAK,CAAC,CAAE,CAC7B,KAAM,IAAI,CAAAK,OAAO,CAACwB,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,CAAC,CAAC,CAAC,CACtD,CACF,CAEA;AACA,KAAM,CAAAE,aAAa,CAAGhC,gBAAgB,CAACiC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,QAAAC,cAAA,CAAAC,cAAA,OAC/C,CAAC,EAAAD,cAAA,CAAAD,CAAC,CAACG,WAAW,UAAAF,cAAA,iBAAbA,cAAA,CAAeG,OAAO,GAAI,CAAC,GAAK,EAAAF,cAAA,CAAAH,CAAC,CAACI,WAAW,UAAAD,cAAA,iBAAbA,cAAA,CAAeE,OAAO,GAAI,CAAC,CAAC,EAC/D,CAAC,CAED;AACA,IAAI,CAAC1D,aAAa,CAAC2D,GAAG,CAACrD,IAAI,CAAE6C,aAAa,CAAC,CAE3C,KAAM,CAAAS,OAAO,CAAG5C,WAAW,CAACC,GAAG,CAAC,CAAC,CACjC,KAAM,CAAA4C,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAAG7C,SAAS,CAAC,CAEhDL,OAAO,CAACC,GAAG,WAAAC,MAAA,CAAMN,IAAI,yBAAAM,MAAA,CAAQuC,aAAa,CAACtC,MAAM,0DAAAD,MAAA,CAAgBiD,QAAQ,OAAK,CAAC,CAE/E,MAAO,CAAAV,aAAa,CAEtB,CAAE,MAAOlB,KAAK,CAAE,CACdvB,OAAO,CAACuB,KAAK,WAAArB,MAAA,CAAMN,IAAI,mDAAe2B,KAAK,CAAC,CAE5C;AACAvB,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAON,IAAI,iDAAY,CAAC,CACnC,MAAO,KAAI,CAAC0D,wBAAwB,CAAC1D,IAAI,CAAC,CAC5C,CACF,CAEA;AACA,KAAc,CAAA0D,wBAAwBA,CAAC1D,IAAmD,CAAqB,CAC7G,KAAM,CAAA2D,YAAY,CAAG,CACnBC,WAAW,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,KAAK,CAAC,CACpCC,WAAW,CAAE,CAAC,KAAK,CAAE,IAAI,CAAE,KAAK,CAAC,CACjCC,WAAW,CAAE,CAAC,IAAI,CAAE,IAAI,CAAE,IAAI,CAChC,CAAC,CAED1D,OAAO,CAACC,GAAG,4CAAAC,MAAA,CAAcN,IAAI,iDAAY,CAAC,CAE1C,GAAI,CACF,KAAM,CAAAY,UAAU,CAAG,KAAM,CAAAxB,YAAY,CAAC2E,oBAAoB,CAACJ,YAAY,CAAC3D,IAAI,CAAC,CAAE,EAAE,CAAC,CAClFI,OAAO,CAACC,GAAG,+CAAAC,MAAA,CAAiBM,UAAU,CAACL,MAAM,0CAAU,CAAC,CACxD,KAAM,CAAAM,gBAA0B,CAAG,EAAE,CAErC,IAAK,KAAM,CAAAS,SAAS,GAAI,CAAAV,UAAU,CAAE,CAClC,GAAI,CACF,KAAM,CAAAW,MAAM,CAAG,IAAI,CAAC9B,SAAS,CAAC+B,aAAa,CAACF,SAAS,CAAC,CACtD,GAAIC,MAAM,CAACe,OAAO,CAACE,QAAQ,CAACxC,IAAI,CAAC,CAAE,CACjCa,gBAAgB,CAAC4B,IAAI,CAAClB,MAAM,CAAC,CAC/B,CACF,CAAE,MAAOI,KAAK,CAAE,CACd,SACF,CACF,CAEA,MAAO,CAAAd,gBAAgB,CAACiC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,QAAAgB,eAAA,CAAAC,eAAA,OAChC,CAAC,EAAAD,eAAA,CAAAhB,CAAC,CAACG,WAAW,UAAAa,eAAA,iBAAbA,eAAA,CAAeZ,OAAO,GAAI,CAAC,GAAK,EAAAa,eAAA,CAAAlB,CAAC,CAACI,WAAW,UAAAc,eAAA,iBAAbA,eAAA,CAAeb,OAAO,GAAI,CAAC,CAAC,EAC/D,CAAC,CACH,CAAE,MAAOzB,KAAK,CAAE,CACdvB,OAAO,CAACuB,KAAK,WAAArB,MAAA,CAAMN,IAAI,mDAAe2B,KAAK,CAAC,CAC5C,MAAO,EAAE,CACX,CACF,CAEA;AACA,KAAM,CAAAuC,iBAAiBA,CAAA,CAAwC,IAAvC,CAAAC,KAAa,CAAAC,SAAA,CAAA7D,MAAA,IAAA6D,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,EAAE,CACxC,KAAM,CAAAE,QAAQ,YAAAhE,MAAA,CAAc6D,KAAK,CAAE,CAEnC,GAAI,IAAI,CAACzE,aAAa,CAACO,GAAG,CAACqE,QAAQ,CAAC,CAAE,CACpC,MAAO,KAAI,CAAC5E,aAAa,CAACS,GAAG,CAACmE,QAAQ,CAAC,CACzC,CAEA,GAAI,CACF,KAAM,CAAA1D,UAAU,CAAG,KAAM,CAAAxB,YAAY,CAAC8E,iBAAiB,CAACC,KAAK,CAAC,CAC9D,KAAM,CAAAtD,gBAAgB,CAAGD,UAAU,CAChCS,GAAG,CAACkD,GAAG,EAAI,CACV,GAAI,CACF,MAAO,KAAI,CAAC9E,SAAS,CAAC+B,aAAa,CAAC+C,GAAG,CAAC,CAC1C,CAAE,MAAAC,OAAA,CAAM,CACN,MAAO,KAAI,CACb,CACF,CAAC,CAAC,CACDC,MAAM,CAAElD,MAAM,EAAuBA,MAAM,GAAK,IAAI,CAAC,CAExD,IAAI,CAAC7B,aAAa,CAAC2D,GAAG,CAACiB,QAAQ,CAAEzD,gBAAgB,CAAC,CAClD,MAAO,CAAAA,gBAAgB,CAEzB,CAAE,MAAOc,KAAK,CAAE,CACdvB,OAAO,CAACuB,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,MAAO,EAAE,CACX,CACF,CAEA;AACA,KAAM,CAAA+C,aAAaA,CAACC,KAAa,CAAqB,CACpD,GAAI,CACF,KAAM,CAAA/D,UAAU,CAAG,KAAM,CAAAxB,YAAY,CAACsF,aAAa,CAACC,KAAK,CAAE,EAAE,CAAC,CAE9D,MAAO,CAAA/D,UAAU,CACdS,GAAG,CAACkD,GAAG,EAAI,CACV,GAAI,CACF,MAAO,KAAI,CAAC9E,SAAS,CAAC+B,aAAa,CAAC+C,GAAG,CAAC,CAC1C,CAAE,MAAAK,QAAA,CAAM,CACN,MAAO,KAAI,CACb,CACF,CAAC,CAAC,CACDH,MAAM,CAAElD,MAAM,EAAuBA,MAAM,GAAK,IAAI,CAAC,CAE1D,CAAE,MAAOI,KAAK,CAAE,CACdvB,OAAO,CAACuB,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpC,MAAO,EAAE,CACX,CACF,CAEA;AACA,KAAM,CAAAkD,aAAaA,CAAA,CAAG,CACpB,MAAO,CAAAzF,YAAY,CAACyF,aAAa,CAAC,CAAC,CACrC,CAEA;AACAC,UAAUA,CAAA,CAAG,CACX,IAAI,CAACpF,aAAa,CAACqF,KAAK,CAAC,CAAC,CAC1B3E,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CACjC,CAEA;AACA,KAAM,CAAA2E,mBAAmBA,CAAA,CAAkB,KAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CACzC/E,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvCD,OAAO,CAACC,GAAG,gFAAoB,CAAC,CAChCD,OAAO,CAACC,GAAG,sBAAAC,MAAA,CAAsB,EAAA2E,qBAAA,KAAI,CAACvF,aAAa,CAACS,GAAG,CAAC,aAAa,CAAC,UAAA8E,qBAAA,iBAArCA,qBAAA,CAAuC1E,MAAM,GAAI,CAAC,UAAG,CAAC,CACvFH,OAAO,CAACC,GAAG,sBAAAC,MAAA,CAAsB,EAAA4E,sBAAA,KAAI,CAACxF,aAAa,CAACS,GAAG,CAAC,aAAa,CAAC,UAAA+E,sBAAA,iBAArCA,sBAAA,CAAuC3E,MAAM,GAAI,CAAC,UAAG,CAAC,CACvFH,OAAO,CAACC,GAAG,sBAAAC,MAAA,CAAsB,EAAA6E,sBAAA,KAAI,CAACzF,aAAa,CAACS,GAAG,CAAC,aAAa,CAAC,UAAAgF,sBAAA,iBAArCA,sBAAA,CAAuC5E,MAAM,GAAI,CAAC,UAAG,CAAC,CAEvF;AACA,IAAK,KAAM,CAAAP,IAAI,GAAI,CAAC,aAAa,CAAE,aAAa,CAAE,aAAa,CAAC,CAAW,CACzE,KAAM,CAAAE,MAAM,CAAG,IAAI,CAACR,aAAa,CAACS,GAAG,CAACH,IAAI,CAAC,CAC3C,GAAI,CAACE,MAAM,EAAIA,MAAM,CAACK,MAAM,GAAK,CAAC,CAAE,CAClCH,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAON,IAAI,oFAAsB,CAAC,CAC7C,KAAM,CAAA+B,MAAM,CAAG,KAAM,KAAI,CAAChC,gBAAgB,CAACC,IAAI,CAAC,CAChDI,OAAO,CAACC,GAAG,WAAAC,MAAA,CAAMN,IAAI,uCAAAM,MAAA,CAAYyB,MAAM,CAACxB,MAAM,UAAG,CAAC,CACpD,CACF,CAEAH,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CACjC,CAEA;AACA+E,cAAcA,CAACC,QAAgB,CAAsB,CACnD,KAAM,CAAAC,UAAU,CAAG,CACjB,IAAI,IAAI,CAAC5F,aAAa,CAACS,GAAG,CAAC,aAAa,CAAC,EAAI,EAAE,CAAC,CAChD,IAAI,IAAI,CAACT,aAAa,CAACS,GAAG,CAAC,aAAa,CAAC,EAAI,EAAE,CAAC,CAChD,IAAI,IAAI,CAACT,aAAa,CAACS,GAAG,CAAC,aAAa,CAAC,EAAI,EAAE,CAAC,CACjD,CAED,MAAO,CAAAmF,UAAU,CAACC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKJ,QAAQ,CAAC,CAChD,CACF,CAEA;AAAAK,qBAAA,CAxPMnG,oBAAoB,CAApBA,oBAAoB,CACTO,QAAQ,QAwPzB,MAAO,MAAM,CAAA6F,YAAY,CAAGpG,oBAAoB,CAACM,WAAW,CAAC,CAAC,CAE9D;AACA,MAAO,MAAM,CAAA+F,oBAAoB,CAAIP,QAAgB,EAAyB,CAC5EjF,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAEgF,QAAQ,CAAC,CAE/D;AACA,KAAM,CAAA9D,MAAM,CAAGoE,YAAY,CAACP,cAAc,CAACC,QAAQ,CAAC,CACpD,GAAI,CAAAQ,UAAU,CAAGR,QAAQ,CAEzB,GAAI9D,MAAM,CAAE,CACVnB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEkB,MAAM,CAACc,IAAI,CAAC,CACtC;AACAwD,UAAU,CAAGtE,MAAM,CAACc,IAAI,CAC1B,CAEA,KAAM,CAAAyD,WAAW,CAAGxG,wBAAwB,CAACuG,UAAU,CAAC,CACxDzF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEyF,WAAW,CAACvF,MAAM,CAAC,CAC/CH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEyF,WAAW,CAACzE,GAAG,CAAC0E,GAAG,EAAIA,GAAG,CAACC,OAAO,CAAC3D,IAAI,CAAC,CAAC,CAClE,MAAO,CAAAyD,WAAW,CACpB,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,wBAAwB,CAAIZ,QAAgB,EAAK,CAC5D,KAAM,CAAAS,WAAW,CAAGF,oBAAoB,CAACP,QAAQ,CAAC,CAElD,MAAO,CAAAS,WAAW,CAACI,MAAM,CAAC,CAACC,KAAK,CAAEC,UAAU,GAAK,CAC/C,KAAM,CAAAJ,OAAO,CAAGI,UAAU,CAACJ,OAAO,CAClC,KAAM,CAAAK,KAAK,CAAGD,UAAU,CAACE,QAAQ,CAAG,GAAG,CAAE;AAEzC,MAAO,CACLC,QAAQ,CAAEJ,KAAK,CAACI,QAAQ,CAAIP,OAAO,CAACQ,SAAS,CAACD,QAAQ,CAAGF,KAAM,CAC/DI,IAAI,CAAEN,KAAK,CAACM,IAAI,CAAIT,OAAO,CAACQ,SAAS,CAACC,IAAI,CAAGJ,KAAM,CACnDK,OAAO,CAAEP,KAAK,CAACO,OAAO,CAAIV,OAAO,CAACQ,SAAS,CAACE,OAAO,CAAGL,KAAM,CAC5DM,GAAG,CAAER,KAAK,CAACQ,GAAG,CAAIX,OAAO,CAACQ,SAAS,CAACG,GAAG,CAAGN,KAAM,CAChDO,MAAM,CAAET,KAAK,CAACS,MAAM,CAAIZ,OAAO,CAACQ,SAAS,CAACI,MAAM,CAAGP,KAAM,CACzDQ,KAAK,CAAEV,KAAK,CAACU,KAAK,CAAIb,OAAO,CAACQ,SAAS,CAACK,KAAK,CAAGR,KAClD,CAAC,CACH,CAAC,CAAE,CACDE,QAAQ,CAAE,CAAC,CACXE,IAAI,CAAE,CAAC,CACPC,OAAO,CAAE,CAAC,CACVC,GAAG,CAAE,CAAC,CACNC,MAAM,CAAE,CAAC,CACTC,KAAK,CAAE,CACT,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAA9G,gBAAgB,CAAG,KAAO,CAAAC,IAAmD,EAAwB,CAChH,MAAO,CAAA2F,YAAY,CAAC5F,gBAAgB,CAACC,IAAI,CAAC,CAC5C,CAAC,CAED;AACA,MAAO,MAAM,CAAA8G,oBAAoB,CAAI9G,IAAmD,EAAe,CACrGI,OAAO,CAAC2G,IAAI,CAAC,kEAAkE,CAAC,CAChF,MAAO,EAAE,CACX,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,sBAAsB,CAAG,KAAAA,CAAA,GAAY,CAChD5G,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAEtC,GAAI,CACF;AACA,KAAM,CAAA4G,KAAK,CAAG,KAAM,CAAAtB,YAAY,CAACd,aAAa,CAAC,CAAC,CAChDzE,OAAO,CAACC,GAAG,CAAC,YAAY,CAAE4G,KAAK,CAAC,CAEhC;AACA9F,OAAO,CAAC+F,GAAG,CAAC,CACVvB,YAAY,CAAC5F,gBAAgB,CAAC,aAAa,CAAC,CAC5C4F,YAAY,CAAC5F,gBAAgB,CAAC,aAAa,CAAC,CAC5C4F,YAAY,CAAC5F,gBAAgB,CAAC,aAAa,CAAC,CAC7C,CAAC,CAACoH,IAAI,CAAC,IAAM,CACZ/G,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CACjC,CAAC,CAAC,CAEJ,CAAE,MAAOsB,KAAK,CAAE,CACdvB,OAAO,CAACuB,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC3C,CACF,CAAC,CAED;AACA,GAAI,MAAO,CAAAyF,MAAM,GAAK,WAAW,CAAE,CACjCJ,sBAAsB,CAAC,CAAC,CAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
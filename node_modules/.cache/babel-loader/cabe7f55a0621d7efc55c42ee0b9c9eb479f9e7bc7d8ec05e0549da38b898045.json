{"ast":null,"code":"import _objectSpread from\"/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext(undefined);export const AppProvider=_ref=>{let{children}=_ref;// 기존 상태\nconst[userInput,setUserInput]=useState({budget:70000,// 일주일 식비 기본값\nnutrients:{carb:50,protein:25,fat:25}});const[recommendationResult,setRecommendationResult]=useState(null);const[selectedProduct,setSelectedProduct]=useState(null);const[isLoading,setIsLoading]=useState(false);// 새로운 온보딩 상태 (MVP용 기본값 설정)\nconst[userProfile,setUserProfile]=useState({budget:70000,// 일주일 식비 기본값 (7만원/주)\ngoal:'maintenance',// 기본 목표 설정\n// 기본 정보 기본값 (사용자가 쉽게 시작할 수 있도록)\ngender:'male',age:25,height:170,weight:70,activityLevel:'moderately_active'});const[currentStep,setCurrentStep]=useState('goal');const[completedSteps,setCompletedSteps]=useState([]);const[calorieCalculation,setCalorieCalculation]=useState(null);const[isOnboardingComplete,setIsOnboardingComplete]=useState(false);// 사용자 프로필 업데이트 헬퍼 함수\nconst updateUserProfile=update=>{setUserProfile(prev=>_objectSpread(_objectSpread({},prev),update));};const value={// 기존 기능\nuserInput,setUserInput,recommendationResult,setRecommendationResult,selectedProduct,setSelectedProduct,isLoading,setIsLoading,// 새로운 온보딩 기능\nuserProfile,setUserProfile,updateUserProfile,currentStep,setCurrentStep,completedSteps,setCompletedSteps,calorieCalculation,setCalorieCalculation,isOnboardingComplete,setIsOnboardingComplete};return/*#__PURE__*/_jsx(AppContext.Provider,{value:value,children:children});};export const useAppContext=()=>{const context=useContext(AppContext);if(context===undefined){throw new Error('useAppContext must be used within an AppProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AppContext","undefined","AppProvider","_ref","children","userInput","setUserInput","budget","nutrients","carb","protein","fat","recommendationResult","setRecommendationResult","selectedProduct","setSelectedProduct","isLoading","setIsLoading","userProfile","setUserProfile","goal","gender","age","height","weight","activityLevel","currentStep","setCurrentStep","completedSteps","setCompletedSteps","calorieCalculation","setCalorieCalculation","isOnboardingComplete","setIsOnboardingComplete","updateUserProfile","update","prev","_objectSpread","value","Provider","useAppContext","context","Error"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { UserInput, RecommendationResult, CoupangProduct, UserProfile, OnboardingStep, CalorieCalculation } from '../types';\n\ninterface AppContextType {\n  // 기존 기능\n  userInput: UserInput;\n  setUserInput: (input: UserInput) => void;\n  recommendationResult: RecommendationResult | null;\n  setRecommendationResult: (result: RecommendationResult | null) => void;\n  selectedProduct: CoupangProduct | null;\n  setSelectedProduct: (product: CoupangProduct | null) => void;\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n  \n  // 새로운 온보딩 기능\n  userProfile: Partial<UserProfile>;\n  setUserProfile: (profile: Partial<UserProfile>) => void;\n  updateUserProfile: (update: Partial<UserProfile>) => void;\n  currentStep: OnboardingStep;\n  setCurrentStep: (step: OnboardingStep) => void;\n  completedSteps: OnboardingStep[];\n  setCompletedSteps: (steps: OnboardingStep[]) => void;\n  calorieCalculation: CalorieCalculation | null;\n  setCalorieCalculation: (calculation: CalorieCalculation | null) => void;\n  \n  // 온보딩 완료 여부\n  isOnboardingComplete: boolean;\n  setIsOnboardingComplete: (complete: boolean) => void;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\n  // 기존 상태\n  const [userInput, setUserInput] = useState<UserInput>({\n    budget: 70000, // 일주일 식비 기본값\n    nutrients: {\n      carb: 50,\n      protein: 25,\n      fat: 25,\n    },\n  });\n\n  const [recommendationResult, setRecommendationResult] = useState<RecommendationResult | null>(null);\n  const [selectedProduct, setSelectedProduct] = useState<CoupangProduct | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // 새로운 온보딩 상태 (MVP용 기본값 설정)\n  const [userProfile, setUserProfile] = useState<Partial<UserProfile>>({\n    budget: 70000, // 일주일 식비 기본값 (7만원/주)\n    goal: 'maintenance', // 기본 목표 설정\n    // 기본 정보 기본값 (사용자가 쉽게 시작할 수 있도록)\n    gender: 'male',\n    age: 25,\n    height: 170,\n    weight: 70,\n    activityLevel: 'moderately_active'\n  });\n  const [currentStep, setCurrentStep] = useState<OnboardingStep>('goal');\n  const [completedSteps, setCompletedSteps] = useState<OnboardingStep[]>([]);\n  const [calorieCalculation, setCalorieCalculation] = useState<CalorieCalculation | null>(null);\n  const [isOnboardingComplete, setIsOnboardingComplete] = useState(false);\n\n  // 사용자 프로필 업데이트 헬퍼 함수\n  const updateUserProfile = (update: Partial<UserProfile>) => {\n    setUserProfile(prev => ({ ...prev, ...update }));\n  };\n\n  const value: AppContextType = {\n    // 기존 기능\n    userInput,\n    setUserInput,\n    recommendationResult,\n    setRecommendationResult,\n    selectedProduct,\n    setSelectedProduct,\n    isLoading,\n    setIsLoading,\n    \n    // 새로운 온보딩 기능\n    userProfile,\n    setUserProfile,\n    updateUserProfile,\n    currentStep,\n    setCurrentStep,\n    completedSteps,\n    setCompletedSteps,\n    calorieCalculation,\n    setCalorieCalculation,\n    isOnboardingComplete,\n    setIsOnboardingComplete,\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n"],"mappings":"2KAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBA8B9E,KAAM,CAAAC,UAAU,cAAGL,aAAa,CAA6BM,SAAS,CAAC,CAMvE,MAAO,MAAM,CAAAC,WAAuC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClE;AACA,KAAM,CAACE,SAAS,CAAEC,YAAY,CAAC,CAAGT,QAAQ,CAAY,CACpDU,MAAM,CAAE,KAAK,CAAE;AACfC,SAAS,CAAE,CACTC,IAAI,CAAE,EAAE,CACRC,OAAO,CAAE,EAAE,CACXC,GAAG,CAAE,EACP,CACF,CAAC,CAAC,CAEF,KAAM,CAACC,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGhB,QAAQ,CAA8B,IAAI,CAAC,CACnG,KAAM,CAACiB,eAAe,CAAEC,kBAAkB,CAAC,CAAGlB,QAAQ,CAAwB,IAAI,CAAC,CACnF,KAAM,CAACmB,SAAS,CAAEC,YAAY,CAAC,CAAGpB,QAAQ,CAAC,KAAK,CAAC,CAEjD;AACA,KAAM,CAACqB,WAAW,CAAEC,cAAc,CAAC,CAAGtB,QAAQ,CAAuB,CACnEU,MAAM,CAAE,KAAK,CAAE;AACfa,IAAI,CAAE,aAAa,CAAE;AACrB;AACAC,MAAM,CAAE,MAAM,CACdC,GAAG,CAAE,EAAE,CACPC,MAAM,CAAE,GAAG,CACXC,MAAM,CAAE,EAAE,CACVC,aAAa,CAAE,mBACjB,CAAC,CAAC,CACF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAG9B,QAAQ,CAAiB,MAAM,CAAC,CACtE,KAAM,CAAC+B,cAAc,CAAEC,iBAAiB,CAAC,CAAGhC,QAAQ,CAAmB,EAAE,CAAC,CAC1E,KAAM,CAACiC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGlC,QAAQ,CAA4B,IAAI,CAAC,CAC7F,KAAM,CAACmC,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGpC,QAAQ,CAAC,KAAK,CAAC,CAEvE;AACA,KAAM,CAAAqC,iBAAiB,CAAIC,MAA4B,EAAK,CAC1DhB,cAAc,CAACiB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IAAUD,IAAI,EAAKD,MAAM,CAAG,CAAC,CAClD,CAAC,CAED,KAAM,CAAAG,KAAqB,CAAG,CAC5B;AACAjC,SAAS,CACTC,YAAY,CACZM,oBAAoB,CACpBC,uBAAuB,CACvBC,eAAe,CACfC,kBAAkB,CAClBC,SAAS,CACTC,YAAY,CAEZ;AACAC,WAAW,CACXC,cAAc,CACde,iBAAiB,CACjBR,WAAW,CACXC,cAAc,CACdC,cAAc,CACdC,iBAAiB,CACjBC,kBAAkB,CAClBC,qBAAqB,CACrBC,oBAAoB,CACpBC,uBACF,CAAC,CAED,mBACElC,IAAA,CAACC,UAAU,CAACuC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAlC,QAAA,CAC/BA,QAAQ,CACU,CAAC,CAE1B,CAAC,CAED,MAAO,MAAM,CAAAoC,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAC,OAAO,CAAG7C,UAAU,CAACI,UAAU,CAAC,CACtC,GAAIyC,OAAO,GAAKxC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAyC,KAAK,CAAC,kDAAkD,CAAC,CACrE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
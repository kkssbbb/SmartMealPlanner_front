{"ast":null,"code":"/**\n * BMR (기초대사율) 계산 - Mifflin-St Jeor 공식 사용\n * 가장 정확한 것으로 알려진 공식\n */\nexport const calculateBMR = profile => {\n  const {\n    gender,\n    weight,\n    height,\n    age\n  } = profile;\n  if (gender === 'male') {\n    return 10 * weight + 6.25 * height - 5 * age + 5;\n  } else {\n    return 10 * weight + 6.25 * height - 5 * age - 161;\n  }\n};\n\n/**\n * TDEE (총 일일 에너지 소모량) 계산\n * BMR에 활동 수준을 곱해서 계산\n */\nexport const calculateTDEE = (bmr, activityLevel) => {\n  const activityMultipliers = {\n    sedentary: 1.2,\n    // 운동하지 않음, 사무직\n    lightly_active: 1.375,\n    // 가벼운 운동 (주 1-3회)\n    moderately_active: 1.55,\n    // 중간 강도 운동 (주 3-5회)\n    very_active: 1.725,\n    // 고강도 운동 (주 6-7회)\n    extremely_active: 1.9 // 매우 고강도 운동, 육체 노동\n  };\n  return Math.round(bmr * activityMultipliers[activityLevel]);\n};\n\n/**\n * 목적에 따른 목표 칼로리 계산\n */\nexport const calculateTargetCalories = (tdee, goal) => {\n  switch (goal) {\n    case 'weight_loss':\n      return Math.round(tdee * 0.8);\n    // 20% 감소 (주당 0.5kg 감량)\n    case 'maintenance':\n      return tdee;\n    // 현재 체중 유지\n    case 'muscle_gain':\n      return Math.round(tdee * 1.15);\n    // 15% 증가 (근육 성장)\n    default:\n      return tdee;\n  }\n};\n\n/**\n * 목적별 최적 영양소 비율 계산\n * 과학적 근거 기반\n */\nexport const calculateOptimalMacros = goal => {\n  const macroPresets = {\n    weight_loss: {\n      carb: 35,\n      // 탄수화물 낮춤, 포만감 유지\n      protein: 40,\n      // 단백질 높임, 근손실 방지\n      fat: 25 // 적정 지방\n    },\n    maintenance: {\n      carb: 45,\n      // 균형잡힌 비율\n      protein: 25,\n      // 표준 단백질\n      fat: 30 // 표준 지방\n    },\n    muscle_gain: {\n      carb: 50,\n      // 탄수화물 높임, 에너지 공급\n      protein: 30,\n      // 단백질 높임, 근육 합성\n      fat: 20 // 지방 낮춤\n    }\n  };\n  return macroPresets[goal];\n};\n\n/**\n * 전체 칼로리 계산 및 영양소 비율 도출\n */\nexport const calculateCompleteNutrition = profile => {\n  const bmr = calculateBMR(profile);\n  const tdee = calculateTDEE(bmr, profile.activityLevel);\n  const targetCalories = calculateTargetCalories(tdee, profile.goal);\n  const macros = calculateOptimalMacros(profile.goal);\n  return {\n    bmr,\n    tdee,\n    targetCalories,\n    macros\n  };\n};\n\n/**\n * 사용자 친화적인 목표 설명\n */\nexport const getGoalDescription = goal => {\n  const descriptions = {\n    weight_loss: '건강한 체중 감량을 위해 칼로리를 줄이고 단백질을 늘렸어요.',\n    maintenance: '현재 체중을 유지하면서 균형잡힌 영양을 제공해요.',\n    muscle_gain: '근육 성장을 위해 충분한 칼로리와 단백질을 확보했어요.'\n  };\n  return descriptions[goal];\n};\n\n/**\n * 활동 수준별 설명\n */\nexport const getActivityDescription = activityLevel => {\n  const descriptions = {\n    sedentary: '주로 앉아서 일하고 운동을 거의 하지 않음',\n    lightly_active: '가벼운 운동이나 스포츠 (주 1-3회)',\n    moderately_active: '중간 강도 운동이나 스포츠 (주 3-5회)',\n    very_active: '고강도 운동이나 스포츠 (주 6-7회)',\n    extremely_active: '매우 고강도 운동, 육체적 직업 또는 하루 2회 운동'\n  };\n  return descriptions[activityLevel];\n};\n\n/**\n * BMI 계산 및 분류\n */\nexport const calculateBMI = (weight, height) => {\n  const bmi = Number((weight / Math.pow(height / 100, 2)).toFixed(1));\n  let category;\n  let description;\n  if (bmi < 18.5) {\n    category = 'underweight';\n    description = '저체중';\n  } else if (bmi < 23) {\n    category = 'normal';\n    description = '정상체중';\n  } else if (bmi < 25) {\n    category = 'overweight';\n    description = '과체중';\n  } else {\n    category = 'obese';\n    description = '비만';\n  }\n  return {\n    bmi,\n    category,\n    description\n  };\n};\n\n/**\n * 목표 체중 제안\n */\nexport const suggestTargetWeight = (height, goal) => {\n  const idealBMI = 22; // 이상적인 BMI\n  const idealWeight = idealBMI * Math.pow(height / 100, 2);\n  switch (goal) {\n    case 'weight_loss':\n      return Math.round(idealWeight);\n    case 'maintenance':\n      return 0;\n    // 현재 체중 유지\n    case 'muscle_gain':\n      return Math.round(idealWeight + 3);\n    // 근육량 고려 3kg 추가\n    default:\n      return Math.round(idealWeight);\n  }\n};","map":{"version":3,"names":["calculateBMR","profile","gender","weight","height","age","calculateTDEE","bmr","activityLevel","activityMultipliers","sedentary","lightly_active","moderately_active","very_active","extremely_active","Math","round","calculateTargetCalories","tdee","goal","calculateOptimalMacros","macroPresets","weight_loss","carb","protein","fat","maintenance","muscle_gain","calculateCompleteNutrition","targetCalories","macros","getGoalDescription","descriptions","getActivityDescription","calculateBMI","bmi","Number","pow","toFixed","category","description","suggestTargetWeight","idealBMI","idealWeight"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/calorieCalculator.ts"],"sourcesContent":["import { UserProfile, CalorieCalculation, NutrientRatios } from '../types';\n\n/**\n * BMR (기초대사율) 계산 - Mifflin-St Jeor 공식 사용\n * 가장 정확한 것으로 알려진 공식\n */\nexport const calculateBMR = (profile: UserProfile): number => {\n  const { gender, weight, height, age } = profile;\n  \n  if (gender === 'male') {\n    return 10 * weight + 6.25 * height - 5 * age + 5;\n  } else {\n    return 10 * weight + 6.25 * height - 5 * age - 161;\n  }\n};\n\n/**\n * TDEE (총 일일 에너지 소모량) 계산\n * BMR에 활동 수준을 곱해서 계산\n */\nexport const calculateTDEE = (bmr: number, activityLevel: UserProfile['activityLevel']): number => {\n  const activityMultipliers = {\n    sedentary: 1.2,           // 운동하지 않음, 사무직\n    lightly_active: 1.375,    // 가벼운 운동 (주 1-3회)\n    moderately_active: 1.55,  // 중간 강도 운동 (주 3-5회)\n    very_active: 1.725,       // 고강도 운동 (주 6-7회)\n    extremely_active: 1.9     // 매우 고강도 운동, 육체 노동\n  };\n  \n  return Math.round(bmr * activityMultipliers[activityLevel]);\n};\n\n/**\n * 목적에 따른 목표 칼로리 계산\n */\nexport const calculateTargetCalories = (tdee: number, goal: UserProfile['goal']): number => {\n  switch (goal) {\n    case 'weight_loss':\n      return Math.round(tdee * 0.8); // 20% 감소 (주당 0.5kg 감량)\n    case 'maintenance':\n      return tdee; // 현재 체중 유지\n    case 'muscle_gain':\n      return Math.round(tdee * 1.15); // 15% 증가 (근육 성장)\n    default:\n      return tdee;\n  }\n};\n\n/**\n * 목적별 최적 영양소 비율 계산\n * 과학적 근거 기반\n */\nexport const calculateOptimalMacros = (goal: UserProfile['goal']): NutrientRatios => {\n  const macroPresets = {\n    weight_loss: {\n      carb: 35,    // 탄수화물 낮춤, 포만감 유지\n      protein: 40, // 단백질 높임, 근손실 방지\n      fat: 25      // 적정 지방\n    },\n    maintenance: {\n      carb: 45,    // 균형잡힌 비율\n      protein: 25, // 표준 단백질\n      fat: 30      // 표준 지방\n    },\n    muscle_gain: {\n      carb: 50,    // 탄수화물 높임, 에너지 공급\n      protein: 30, // 단백질 높임, 근육 합성\n      fat: 20      // 지방 낮춤\n    }\n  };\n  \n  return macroPresets[goal];\n};\n\n/**\n * 전체 칼로리 계산 및 영양소 비율 도출\n */\nexport const calculateCompleteNutrition = (profile: UserProfile): CalorieCalculation => {\n  const bmr = calculateBMR(profile);\n  const tdee = calculateTDEE(bmr, profile.activityLevel);\n  const targetCalories = calculateTargetCalories(tdee, profile.goal);\n  const macros = calculateOptimalMacros(profile.goal);\n  \n  return {\n    bmr,\n    tdee,\n    targetCalories,\n    macros\n  };\n};\n\n/**\n * 사용자 친화적인 목표 설명\n */\nexport const getGoalDescription = (goal: UserProfile['goal']): string => {\n  const descriptions = {\n    weight_loss: '건강한 체중 감량을 위해 칼로리를 줄이고 단백질을 늘렸어요.',\n    maintenance: '현재 체중을 유지하면서 균형잡힌 영양을 제공해요.',\n    muscle_gain: '근육 성장을 위해 충분한 칼로리와 단백질을 확보했어요.'\n  };\n  \n  return descriptions[goal];\n};\n\n/**\n * 활동 수준별 설명\n */\nexport const getActivityDescription = (activityLevel: UserProfile['activityLevel']): string => {\n  const descriptions = {\n    sedentary: '주로 앉아서 일하고 운동을 거의 하지 않음',\n    lightly_active: '가벼운 운동이나 스포츠 (주 1-3회)',\n    moderately_active: '중간 강도 운동이나 스포츠 (주 3-5회)',\n    very_active: '고강도 운동이나 스포츠 (주 6-7회)',\n    extremely_active: '매우 고강도 운동, 육체적 직업 또는 하루 2회 운동'\n  };\n  \n  return descriptions[activityLevel];\n};\n\n/**\n * BMI 계산 및 분류\n */\nexport const calculateBMI = (weight: number, height: number): { bmi: number; category: string; description: string } => {\n  const bmi = Number((weight / Math.pow(height / 100, 2)).toFixed(1));\n  \n  let category: string;\n  let description: string;\n  \n  if (bmi < 18.5) {\n    category = 'underweight';\n    description = '저체중';\n  } else if (bmi < 23) {\n    category = 'normal';\n    description = '정상체중';\n  } else if (bmi < 25) {\n    category = 'overweight';\n    description = '과체중';\n  } else {\n    category = 'obese';\n    description = '비만';\n  }\n  \n  return { bmi, category, description };\n};\n\n/**\n * 목표 체중 제안\n */\nexport const suggestTargetWeight = (height: number, goal: UserProfile['goal']): number => {\n  const idealBMI = 22; // 이상적인 BMI\n  const idealWeight = (idealBMI * Math.pow(height / 100, 2));\n  \n  switch (goal) {\n    case 'weight_loss':\n      return Math.round(idealWeight);\n    case 'maintenance':\n      return 0; // 현재 체중 유지\n    case 'muscle_gain':\n      return Math.round(idealWeight + 3); // 근육량 고려 3kg 추가\n    default:\n      return Math.round(idealWeight);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
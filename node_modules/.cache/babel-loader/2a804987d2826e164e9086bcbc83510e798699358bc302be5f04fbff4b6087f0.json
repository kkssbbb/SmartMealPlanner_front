{"ast":null,"code":"import React,{useEffect}from'react';import{useNavigate}from'react-router-dom';import{Container,VStack,Button,HStack,useToast,Spinner}from'@chakra-ui/react';import{useAppContext}from'../context/AppContext';import{getRecommendationMessage}from'../data/mockProducts';import{fastRecommendationEngine}from'../utils/fastRecommendationEngine';import{recipeLoader}from'../data/recipeData';// 캐시 클리어용\nimport{optimizedCSVProcessor}from'../utils/optimizedCSVProcessor';// CSV 캐시 클리어용\nimport{calculateCompleteNutrition}from'../utils/calorieCalculator';import Layout from'./Layout/Layout';// 온보딩 컴포넌트들 (간소화)\nimport ProgressIndicator from'./Onboarding/ProgressIndicator';import GoalSelection from'./Onboarding/GoalSelection';import BudgetSelection from'./Onboarding/BudgetSelection';import BasicInfo from'./Onboarding/BasicInfo';// 🎯 목표 진행도 계산 헬퍼 함수\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const calculateGoalProgress=(userProfile,targets)=>{const{goal,weight}=userProfile;const progressMessages={weight_loss:{message:\"\".concat(targets.targetCalories,\"kcal \\uC2DD\\uB2E8\\uC73C\\uB85C \\uAC74\\uAC15\\uD55C \\uCCB4\\uC911\\uAC10\\uB7C9 \\uC9C4\\uD589\\uC911!\"),percentage:0,// 실제로는 시작 체중 대비 현재 진행률\nnextMilestone:'첫 1kg 감량까지 약 2주 예상'},muscle_gain:{message:\"\\uC77C\\uC77C \\uB2E8\\uBC31\\uC9C8 \".concat(Math.round(targets.dailyProteinNeeds),\"g\\uB85C \\uADFC\\uC131\\uC7A5 \\uCD5C\\uC801\\uD654!\"),percentage:0,nextMilestone:'첫 근력 향상까지 약 4주 예상'},maintenance:{message:\"\".concat(weight,\"kg \\uAC74\\uAC15 \\uCCB4\\uC911 \\uC720\\uC9C0\\uB97C \\uC704\\uD55C \\uADE0\\uD615 \\uC2DD\\uB2E8!\"),percentage:100,// 유지 목표는 100%\nnextMilestone:'꾸준한 건강 관리가 목표!'}};return progressMessages[goal||'maintenance'];};const InputScreen=()=>{const navigate=useNavigate();const toast=useToast();const{// 기존 상태\nsetUserInput,setRecommendationResult,isLoading,setIsLoading,// 새로운 온보딩 상태\nuserProfile,updateUserProfile,currentStep,setCurrentStep,completedSteps,setCompletedSteps,calorieCalculation,setCalorieCalculation,setIsOnboardingComplete}=useAppContext();// 단계별 필수 조건 체크 (간소화 + 디버깅)\nconst isStepValid=()=>{switch(currentStep){case'goal':return userProfile.goal!==undefined;case'budget':return userProfile.budget&&userProfile.budget>0;case'basic_info':// MVP 테스트용: 기본값이 있으면 통과 (더 관대한 검증)\nconst hasGender=userProfile.gender;const hasBasicInfo=userProfile.height&&userProfile.weight&&userProfile.age;const hasActivity=userProfile.activityLevel;const isValid=hasGender&&hasBasicInfo&&hasActivity;// 디버깅용 콘솔 로그\nconsole.log('BasicInfo 검증 (MVP):',{gender:userProfile.gender,height:userProfile.height,weight:userProfile.weight,age:userProfile.age,activityLevel:userProfile.activityLevel,hasGender,hasBasicInfo,hasActivity,isValid});return isValid;default:return false;}};// 다음 단계로 이동\nconst handleNext=()=>{if(!isStepValid()){toast({title:'정보를 입력해주세요',description:'다음 단계로 진행하기 위해 필요한 정보를 모두 입력해주세요.',status:'warning',duration:3000,isClosable:true});return;}// 현재 단계를 완료된 단계에 추가\nif(!completedSteps.includes(currentStep)){setCompletedSteps([...completedSteps,currentStep]);}// 다음 단계로 이동 (간소화)\nconst stepOrder=['goal','budget','basic_info'];const currentIndex=stepOrder.indexOf(currentStep);if(currentIndex<stepOrder.length-1){setCurrentStep(stepOrder[currentIndex+1]);}};// 이전 단계로 이동 (간소화)\nconst handlePrevious=()=>{const stepOrder=['goal','budget','basic_info'];const currentIndex=stepOrder.indexOf(currentStep);if(currentIndex>0){setCurrentStep(stepOrder[currentIndex-1]);}};// 칼로리 계산\nuseEffect(()=>{if(userProfile.gender&&userProfile.height&&userProfile.weight&&userProfile.age&&userProfile.goal&&userProfile.activityLevel){const calculation=calculateCompleteNutrition(userProfile);setCalorieCalculation(calculation);}},[userProfile,setCalorieCalculation]);// 온보딩 완료 및 식단 추천\nconst handleComplete=async()=>{// 칼로리 계산이 안되어 있으면 자동 계산\nlet finalCalorieCalculation=calorieCalculation;if(!finalCalorieCalculation&&userProfile.gender&&userProfile.height&&userProfile.weight&&userProfile.age&&userProfile.goal&&userProfile.activityLevel){finalCalorieCalculation=calculateCompleteNutrition(userProfile);setCalorieCalculation(finalCalorieCalculation);}if(!finalCalorieCalculation){toast({title:'정보 부족',description:'칼로리 계산을 위한 정보가 부족합니다. 모든 정보를 입력해주세요.',status:'error',duration:3000,isClosable:true});return;}setIsLoading(true);try{// 온보딩 완료 표시\nsetIsOnboardingComplete(true);// 기존 UserInput 형식으로 변환하여 저장\nconst inputData={budget:userProfile.budget,// 사용자가 설정한 예산 사용\nnutrients:finalCalorieCalculation.macros};setUserInput(inputData);// 🚀 초고속 로딩 (더미 지연 제거)\n// await new Promise(resolve => setTimeout(resolve, 500)); // 제거\n// 사용자 선호도와 히스토리 시뮬레이션 (실제로는 localStorage나 DB에서 가져옴)\nconst preferences={cookingTime:userProfile.goal==='weight_loss'?'quick':'normal',difficulty:'easy',priceRange:inputData.budget>400000?'premium':inputData.budget>250000?'standard':'budget'};const history={purchasedProducts:[],// 실제로는 구매 이력\ncookedRecipes:[],// 실제로는 조리 이력\nfavoriteIngredients:[]// 실제로는 선호 재료\n};// 🚀 초고속 개인맞춤 추천 실행!\nconsole.log('⚡ 초고속 추천 엔진 사용');// 🔥 모든 캐시 클리어 (문제 해결용)\nfastRecommendationEngine.clearCache();recipeLoader.clearCache();// 레시피 캐시도 클리어!\noptimizedCSVProcessor.clearCache();// CSV 캐시도 클리어!\nconsole.log('🧹 모든 캐시 클리어 완료');// 🔍 시스템 진단 실행\nawait recipeLoader.diagnoseCacheStatus();const fastResult=await fastRecommendationEngine.generateFastRecommendations(userProfile,finalCalorieCalculation,inputData.budget);// 💰 호환성을 위해 기존 형식으로 변환\nconst personalizedResult={recommendedRecipes:fastResult.recommendedRecipes,budgetAnalysis:fastResult.budgetAnalysis,personalizedMessage:\"\\uD83C\\uDFAF \".concat(userProfile.goal==='weight_loss'?'체중 감량':userProfile.goal==='muscle_gain'?'근육 증가':'체중 유지',\" \\uBAA9\\uD45C\\uC5D0 \\uB9DE\\uB294 \\uB9DE\\uCDA4 \\uB808\\uC2DC\\uD53C\\uB97C \\uCD94\\uCC9C\\uB4DC\\uB9BD\\uB2C8\\uB2E4!\"),nutritionTargets:{targetCalories:finalCalorieCalculation.tdee,macroGrams:finalCalorieCalculation.macros,dailyTargets:{calories:finalCalorieCalculation.tdee,protein:finalCalorieCalculation.macros.protein,carb:finalCalorieCalculation.macros.carb,fat:finalCalorieCalculation.macros.fat},dailyProteinNeeds:finalCalorieCalculation.macros.protein,macroPercentages:{protein:25,carb:50,fat:25}},recommendedProducts:[],// 빠른 로딩을 위해 일단 빈 배열\ncontext:{userProfile:userProfile,calorieCalculation,currentTime:new Date(),preferences,history}};// 🍳 레시피 기반 정확한 예산 계산!\nconst recommendedRecipeList=personalizedResult.recommendedRecipes||[];// 🚀 초고속 레시피 처리 (복잡한 계산 최소화)\nconst meals=recommendedRecipeList.slice(0,3).map((recipe,index)=>{var _personalizedResult$b;const mealTypes=['breakfast','lunch','dinner'];const mealType=mealTypes[index]||'breakfast';// 빠른 추정치 사용 (실제 재료 계산 생략)\nconst estimatedCost=((_personalizedResult$b=personalizedResult.budgetAnalysis.costBreakdown[index])===null||_personalizedResult$b===void 0?void 0:_personalizedResult$b.monthlyCost)||45000;const estimatedNutrition={calories:400+index*50,protein:25+index*5,carb:45+index*10,fat:15+index*3};return{id:mealType,recipe:recipe,products:[{// 간단한 더미 데이터\nname:recipe.name+' 재료 세트',price:estimatedCost,usedQuantity:1,costPerRecipe:estimatedCost/30,monthlyNeeded:1}],totalPrice:estimatedCost,totalNutrition:estimatedNutrition,mealType:mealType,servings:30};});// 🚀 빈 슬롯을 간단히 채우기 (복잡한 처리 생략)\nwhile(meals.length<3){const mealTypes=['breakfast','lunch','dinner'];const mealType=mealTypes[meals.length];// 기본 더미 레시피 (빠른 로딩)\nmeals.push({id:mealType,recipe:{id:\"default-\".concat(mealType),name:\"\\uCD94\\uCC9C \".concat(mealType==='breakfast'?'아침':mealType==='lunch'?'점심':'저녁',\" \\uB808\\uC2DC\\uD53C\"),description:'개인 맞춤 레시피를 준비 중입니다.',image:'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400'},products:[],totalPrice:45000,totalNutrition:{calories:400,protein:25,carb:45,fat:15},mealType:mealType,servings:30});}// 💰 예산 분석 결과 활용 (정확한 예산 계산)\nconst totalBudgetUsed=personalizedResult.budgetAnalysis.totalEstimatedCost;const budgetRemaining=inputData.budget-totalBudgetUsed;// 🎯 개인맞춤 RecommendationResult 생성\nconst result={meals,totalBudgetUsed,budgetRemaining,nutritionBalance:finalCalorieCalculation.macros,message:personalizedResult.personalizedMessage,// 🌟 개인맞춤 메시지!\nnutritionTargets:personalizedResult.nutritionTargets,// 🎯 개인 영양 목표\nrecommendedRecipes:personalizedResult.recommendedRecipes,// 🍳 맞춤 레시피\nuserInsights:{dailyCalorieGoal:personalizedResult.nutritionTargets.targetCalories,proteinNeeds:personalizedResult.nutritionTargets.dailyProteinNeeds,budgetPerMeal:Math.round(inputData.budget/7/3),// 끼니당 예산 (일주일 기준)\ngoalProgress:calculateGoalProgress(userProfile,personalizedResult.nutritionTargets)}};setRecommendationResult(result);toast({title:'맞춤 식단 완성! 🎉',description:getRecommendationMessage(userProfile.goal),status:'success',duration:3000,isClosable:true});// 추천 결과 페이지로 이동\nnavigate('/recommendations');}catch(error){toast({title:'오류 발생',description:'식단 추천 중 문제가 발생했습니다. 다시 시도해주세요.',status:'error',duration:3000,isClosable:true});}finally{setIsLoading(false);}};// 현재 단계에 맞는 컴포넌트 렌더링 (간소화)\nconst renderCurrentStep=()=>{switch(currentStep){case'goal':return/*#__PURE__*/_jsx(GoalSelection,{selectedGoal:userProfile.goal,onGoalSelect:goal=>updateUserProfile({goal})});case'budget':return/*#__PURE__*/_jsx(BudgetSelection,{selectedBudget:userProfile.budget||170000,onBudgetSelect:budget=>updateUserProfile({budget})});case'basic_info':return/*#__PURE__*/_jsx(BasicInfo,{userProfile:userProfile,onProfileUpdate:update=>updateUserProfile(update)});default:return null;}};const stepOrder=['goal','budget','basic_info'];const currentIndex=stepOrder.indexOf(currentStep);const isFirstStep=currentIndex===0;const isLastStep=currentIndex===stepOrder.length-1;return/*#__PURE__*/_jsx(Layout,{children:/*#__PURE__*/_jsx(Container,{maxW:\"4xl\",py:8,children:/*#__PURE__*/_jsxs(VStack,{spacing:8,align:\"stretch\",children:[/*#__PURE__*/_jsx(ProgressIndicator,{currentStep:currentStep,completedSteps:completedSteps}),renderCurrentStep(),/*#__PURE__*/_jsxs(HStack,{justify:\"space-between\",pt:4,children:[/*#__PURE__*/_jsx(Button,{variant:\"outline\",onClick:handlePrevious,isDisabled:isFirstStep,leftIcon:/*#__PURE__*/_jsx(\"span\",{children:\"\\u2190\"}),children:\"\\uC774\\uC804\"}),isLastStep?/*#__PURE__*/_jsx(Button,{colorScheme:\"teal\",size:\"lg\",onClick:handleComplete,isLoading:isLoading,loadingText:\"\\uC2DD\\uB2E8 \\uC0DD\\uC131 \\uC911...\",isDisabled:!isStepValid(),rightIcon:isLoading?/*#__PURE__*/_jsx(Spinner,{size:\"sm\"}):/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83C\\uDF89\"}),px:8,children:isLoading?'맞춤 식단 생성 중...':'맞춤 식단 받기'}):/*#__PURE__*/_jsx(Button,{colorScheme:\"teal\",onClick:handleNext,isDisabled:!isStepValid(),rightIcon:/*#__PURE__*/_jsx(\"span\",{children:\"\\u2192\"}),children:\"\\uB2E4\\uC74C\"})]})]})})});};export default InputScreen;","map":{"version":3,"names":["React","useEffect","useNavigate","Container","VStack","Button","HStack","useToast","Spinner","useAppContext","getRecommendationMessage","fastRecommendationEngine","recipeLoader","optimizedCSVProcessor","calculateCompleteNutrition","Layout","ProgressIndicator","GoalSelection","BudgetSelection","BasicInfo","jsx","_jsx","jsxs","_jsxs","calculateGoalProgress","userProfile","targets","goal","weight","progressMessages","weight_loss","message","concat","targetCalories","percentage","nextMilestone","muscle_gain","Math","round","dailyProteinNeeds","maintenance","InputScreen","navigate","toast","setUserInput","setRecommendationResult","isLoading","setIsLoading","updateUserProfile","currentStep","setCurrentStep","completedSteps","setCompletedSteps","calorieCalculation","setCalorieCalculation","setIsOnboardingComplete","isStepValid","undefined","budget","hasGender","gender","hasBasicInfo","height","age","hasActivity","activityLevel","isValid","console","log","handleNext","title","description","status","duration","isClosable","includes","stepOrder","currentIndex","indexOf","length","handlePrevious","calculation","handleComplete","finalCalorieCalculation","inputData","nutrients","macros","preferences","cookingTime","difficulty","priceRange","history","purchasedProducts","cookedRecipes","favoriteIngredients","clearCache","diagnoseCacheStatus","fastResult","generateFastRecommendations","personalizedResult","recommendedRecipes","budgetAnalysis","personalizedMessage","nutritionTargets","tdee","macroGrams","dailyTargets","calories","protein","carb","fat","macroPercentages","recommendedProducts","context","currentTime","Date","recommendedRecipeList","meals","slice","map","recipe","index","_personalizedResult$b","mealTypes","mealType","estimatedCost","costBreakdown","monthlyCost","estimatedNutrition","id","products","name","price","usedQuantity","costPerRecipe","monthlyNeeded","totalPrice","totalNutrition","servings","push","image","totalBudgetUsed","totalEstimatedCost","budgetRemaining","result","nutritionBalance","userInsights","dailyCalorieGoal","proteinNeeds","budgetPerMeal","goalProgress","error","renderCurrentStep","selectedGoal","onGoalSelect","selectedBudget","onBudgetSelect","onProfileUpdate","update","isFirstStep","isLastStep","children","maxW","py","spacing","align","justify","pt","variant","onClick","isDisabled","leftIcon","colorScheme","size","loadingText","rightIcon","px"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/components/InputScreen.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  VStack,\n  Button,\n  HStack,\n  useToast,\n  Spinner,\n} from '@chakra-ui/react';\nimport { useAppContext } from '../context/AppContext';\nimport { getRecommendationMessage } from '../data/mockProducts';\nimport { fastRecommendationEngine } from '../utils/fastRecommendationEngine';\nimport { recipeLoader } from '../data/recipeData'; // 캐시 클리어용\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor'; // CSV 캐시 클리어용\nimport { RecommendationResult, UserProfile, PersonalizedNutritionTargets } from '../types';\nimport { calculateCompleteNutrition } from '../utils/calorieCalculator';\nimport Layout from './Layout/Layout';\n\n// 온보딩 컴포넌트들 (간소화)\nimport ProgressIndicator from './Onboarding/ProgressIndicator';\nimport GoalSelection from './Onboarding/GoalSelection';\nimport BudgetSelection from './Onboarding/BudgetSelection';\nimport BasicInfo from './Onboarding/BasicInfo';\n\n\n\n// 🎯 목표 진행도 계산 헬퍼 함수\nconst calculateGoalProgress = (userProfile: Partial<UserProfile>, targets: PersonalizedNutritionTargets) => {\n  const { goal, weight } = userProfile;\n  \n  const progressMessages = {\n    weight_loss: {\n      message: `${targets.targetCalories}kcal 식단으로 건강한 체중감량 진행중!`,\n      percentage: 0, // 실제로는 시작 체중 대비 현재 진행률\n      nextMilestone: '첫 1kg 감량까지 약 2주 예상'\n    },\n    muscle_gain: {\n      message: `일일 단백질 ${Math.round(targets.dailyProteinNeeds)}g로 근성장 최적화!`,\n      percentage: 0,\n      nextMilestone: '첫 근력 향상까지 약 4주 예상'\n    },\n    maintenance: {\n      message: `${weight}kg 건강 체중 유지를 위한 균형 식단!`,\n      percentage: 100, // 유지 목표는 100%\n      nextMilestone: '꾸준한 건강 관리가 목표!'\n    }\n  };\n\n  return progressMessages[goal || 'maintenance'];\n};\n\nconst InputScreen: React.FC = () => {\n  const navigate = useNavigate();\n  const toast = useToast();\n  \n  const {\n    // 기존 상태\n    setUserInput,\n    setRecommendationResult,\n    isLoading,\n    setIsLoading,\n    // 새로운 온보딩 상태\n    userProfile,\n    updateUserProfile,\n    currentStep,\n    setCurrentStep,\n    completedSteps,\n    setCompletedSteps,\n    calorieCalculation,\n    setCalorieCalculation,\n\n    setIsOnboardingComplete,\n  } = useAppContext();\n\n  // 단계별 필수 조건 체크 (간소화 + 디버깅)\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 'goal':\n        return userProfile.goal !== undefined;\n      case 'budget':\n        return userProfile.budget && userProfile.budget > 0;\n      case 'basic_info':\n        // MVP 테스트용: 기본값이 있으면 통과 (더 관대한 검증)\n        const hasGender = userProfile.gender;\n        const hasBasicInfo = userProfile.height && userProfile.weight && userProfile.age;\n        const hasActivity = userProfile.activityLevel;\n        \n        const isValid = hasGender && hasBasicInfo && hasActivity;\n        \n        // 디버깅용 콘솔 로그\n        console.log('BasicInfo 검증 (MVP):', {\n          gender: userProfile.gender,\n          height: userProfile.height,\n          weight: userProfile.weight,\n          age: userProfile.age,\n          activityLevel: userProfile.activityLevel,\n          hasGender,\n          hasBasicInfo,\n          hasActivity,\n          isValid\n        });\n        \n        return isValid;\n      default:\n        return false;\n    }\n  };\n\n  // 다음 단계로 이동\n  const handleNext = () => {\n    if (!isStepValid()) {\n      toast({\n        title: '정보를 입력해주세요',\n        description: '다음 단계로 진행하기 위해 필요한 정보를 모두 입력해주세요.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // 현재 단계를 완료된 단계에 추가\n    if (!completedSteps.includes(currentStep)) {\n      setCompletedSteps([...completedSteps, currentStep]);\n    }\n\n    // 다음 단계로 이동 (간소화)\n    const stepOrder: (typeof currentStep)[] = ['goal', 'budget', 'basic_info'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    \n    if (currentIndex < stepOrder.length - 1) {\n      setCurrentStep(stepOrder[currentIndex + 1]);\n    }\n  };\n\n  // 이전 단계로 이동 (간소화)\n  const handlePrevious = () => {\n    const stepOrder: (typeof currentStep)[] = ['goal', 'budget', 'basic_info'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    \n    if (currentIndex > 0) {\n      setCurrentStep(stepOrder[currentIndex - 1]);\n    }\n  };\n\n  // 칼로리 계산\n  useEffect(() => {\n    if (userProfile.gender && userProfile.height && userProfile.weight && \n        userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      const calculation = calculateCompleteNutrition(userProfile as UserProfile);\n      setCalorieCalculation(calculation);\n    }\n  }, [userProfile, setCalorieCalculation]);\n\n  // 온보딩 완료 및 식단 추천\n  const handleComplete = async () => {\n    // 칼로리 계산이 안되어 있으면 자동 계산\n    let finalCalorieCalculation = calorieCalculation;\n    if (!finalCalorieCalculation && userProfile.gender && userProfile.height && \n        userProfile.weight && userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      finalCalorieCalculation = calculateCompleteNutrition(userProfile as UserProfile);\n      setCalorieCalculation(finalCalorieCalculation);\n    }\n\n    if (!finalCalorieCalculation) {\n      toast({\n        title: '정보 부족',\n        description: '칼로리 계산을 위한 정보가 부족합니다. 모든 정보를 입력해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // 온보딩 완료 표시\n      setIsOnboardingComplete(true);\n      \n      // 기존 UserInput 형식으로 변환하여 저장\n      const inputData = {\n        budget: userProfile.budget!, // 사용자가 설정한 예산 사용\n        nutrients: finalCalorieCalculation.macros,\n      };\n      setUserInput(inputData);\n\n      // 🚀 초고속 로딩 (더미 지연 제거)\n      // await new Promise(resolve => setTimeout(resolve, 500)); // 제거\n\n      // 사용자 선호도와 히스토리 시뮬레이션 (실제로는 localStorage나 DB에서 가져옴)\n      const preferences = {\n        cookingTime: userProfile.goal === 'weight_loss' ? 'quick' as const : 'normal' as const,\n        difficulty: 'easy' as const,\n        priceRange: inputData.budget > 400000 ? 'premium' as const : \n                   inputData.budget > 250000 ? 'standard' as const : 'budget' as const\n      };\n\n      const history = {\n        purchasedProducts: [], // 실제로는 구매 이력\n        cookedRecipes: [],     // 실제로는 조리 이력\n        favoriteIngredients: [] // 실제로는 선호 재료\n      };\n\n      // 🚀 초고속 개인맞춤 추천 실행!\n      console.log('⚡ 초고속 추천 엔진 사용');\n      \n      // 🔥 모든 캐시 클리어 (문제 해결용)\n      fastRecommendationEngine.clearCache();\n      recipeLoader.clearCache(); // 레시피 캐시도 클리어!\n      optimizedCSVProcessor.clearCache(); // CSV 캐시도 클리어!\n      console.log('🧹 모든 캐시 클리어 완료');\n\n      // 🔍 시스템 진단 실행\n      await recipeLoader.diagnoseCacheStatus();\n      \n      const fastResult = await fastRecommendationEngine.generateFastRecommendations(\n        userProfile as UserProfile,\n        finalCalorieCalculation,\n        inputData.budget\n      );\n      \n      // 💰 호환성을 위해 기존 형식으로 변환\n      const personalizedResult = {\n        recommendedRecipes: fastResult.recommendedRecipes,\n        budgetAnalysis: fastResult.budgetAnalysis,\n        personalizedMessage: `🎯 ${userProfile.goal === 'weight_loss' ? '체중 감량' : \n                                 userProfile.goal === 'muscle_gain' ? '근육 증가' : '체중 유지'} 목표에 맞는 맞춤 레시피를 추천드립니다!`,\n        nutritionTargets: {\n          targetCalories: finalCalorieCalculation.tdee,\n          macroGrams: finalCalorieCalculation.macros,\n          dailyTargets: {\n            calories: finalCalorieCalculation.tdee,\n            protein: finalCalorieCalculation.macros.protein,\n            carb: finalCalorieCalculation.macros.carb,\n            fat: finalCalorieCalculation.macros.fat\n          },\n          dailyProteinNeeds: finalCalorieCalculation.macros.protein,\n          macroPercentages: {\n            protein: 25,\n            carb: 50,\n            fat: 25\n          }\n        },\n        recommendedProducts: [], // 빠른 로딩을 위해 일단 빈 배열\n        context: {\n          userProfile: userProfile as UserProfile,\n          calorieCalculation,\n          currentTime: new Date(),\n          preferences,\n          history\n        }\n      };\n\n\n\n      // 🍳 레시피 기반 정확한 예산 계산!\n      const recommendedRecipeList = personalizedResult.recommendedRecipes || [];\n      \n      // 🚀 초고속 레시피 처리 (복잡한 계산 최소화)\n      const meals: any[] = recommendedRecipeList.slice(0, 3).map((recipe, index) => {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[index] || 'breakfast';\n        \n        // 빠른 추정치 사용 (실제 재료 계산 생략)\n        const estimatedCost = personalizedResult.budgetAnalysis.costBreakdown[index]?.monthlyCost || 45000;\n        const estimatedNutrition = {\n          calories: 400 + index * 50,\n          protein: 25 + index * 5,\n          carb: 45 + index * 10,\n          fat: 15 + index * 3\n        };\n\n        return {\n          id: mealType,\n          recipe: recipe,\n          products: [{ // 간단한 더미 데이터\n            name: recipe.name + ' 재료 세트',\n            price: estimatedCost,\n            usedQuantity: 1,\n            costPerRecipe: estimatedCost / 30,\n            monthlyNeeded: 1\n          }],\n          totalPrice: estimatedCost,\n          totalNutrition: estimatedNutrition,\n          mealType: mealType,\n          servings: 30,\n        };\n      });\n\n      // 🚀 빈 슬롯을 간단히 채우기 (복잡한 처리 생략)\n      while (meals.length < 3) {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[meals.length];\n        \n        // 기본 더미 레시피 (빠른 로딩)\n        meals.push({\n          id: mealType,\n          recipe: {\n            id: `default-${mealType}`,\n            name: `추천 ${mealType === 'breakfast' ? '아침' : mealType === 'lunch' ? '점심' : '저녁'} 레시피`,\n            description: '개인 맞춤 레시피를 준비 중입니다.',\n            image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400'\n          },\n          products: [],\n          totalPrice: 45000,\n          totalNutrition: { calories: 400, protein: 25, carb: 45, fat: 15 },\n          mealType: mealType,\n          servings: 30,\n        });\n      }\n\n      // 💰 예산 분석 결과 활용 (정확한 예산 계산)\n      const totalBudgetUsed = personalizedResult.budgetAnalysis.totalEstimatedCost;\n      const budgetRemaining = inputData.budget - totalBudgetUsed;\n\n      // 🎯 개인맞춤 RecommendationResult 생성\n      const result: RecommendationResult = {\n        meals,\n        totalBudgetUsed,\n        budgetRemaining,\n        nutritionBalance: finalCalorieCalculation.macros,\n        message: personalizedResult.personalizedMessage, // 🌟 개인맞춤 메시지!\n        nutritionTargets: personalizedResult.nutritionTargets, // 🎯 개인 영양 목표\n        recommendedRecipes: personalizedResult.recommendedRecipes, // 🍳 맞춤 레시피\n        userInsights: {\n          dailyCalorieGoal: personalizedResult.nutritionTargets.targetCalories,\n          proteinNeeds: personalizedResult.nutritionTargets.dailyProteinNeeds,\n          budgetPerMeal: Math.round(inputData.budget / 7 / 3), // 끼니당 예산 (일주일 기준)\n          goalProgress: calculateGoalProgress(userProfile, personalizedResult.nutritionTargets as any)\n        }\n      };\n\n      setRecommendationResult(result);\n\n      toast({\n        title: '맞춤 식단 완성! 🎉',\n        description: getRecommendationMessage(userProfile.goal!),\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // 추천 결과 페이지로 이동\n      navigate('/recommendations');\n\n    } catch (error) {\n      toast({\n        title: '오류 발생',\n        description: '식단 추천 중 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 현재 단계에 맞는 컴포넌트 렌더링 (간소화)\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'goal':\n        return (\n          <GoalSelection\n            selectedGoal={userProfile.goal}\n            onGoalSelect={(goal) => updateUserProfile({ goal })}\n          />\n        );\n      case 'budget':\n        return (\n          <BudgetSelection\n            selectedBudget={userProfile.budget || 170000}\n            onBudgetSelect={(budget) => updateUserProfile({ budget })}\n          />\n        );\n      case 'basic_info':\n        return (\n          <BasicInfo\n            userProfile={userProfile}\n            onProfileUpdate={(update) => updateUserProfile(update)}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  const stepOrder: (typeof currentStep)[] = ['goal', 'budget', 'basic_info'];\n  const currentIndex = stepOrder.indexOf(currentStep);\n  const isFirstStep = currentIndex === 0;\n  const isLastStep = currentIndex === stepOrder.length - 1;\n\n  return (\n    <Layout>\n      <Container maxW=\"4xl\" py={8}>\n        <VStack spacing={8} align=\"stretch\">\n          {/* 진행 상황 표시 */}\n          <ProgressIndicator\n            currentStep={currentStep}\n            completedSteps={completedSteps}\n          />\n\n          {/* 현재 단계 컴포넌트 */}\n          {renderCurrentStep()}\n\n          {/* 네비게이션 버튼 */}\n          <HStack justify=\"space-between\" pt={4}>\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevious}\n              isDisabled={isFirstStep}\n              leftIcon={<span>←</span>}\n            >\n              이전\n            </Button>\n\n            {isLastStep ? (\n              <Button\n                colorScheme=\"teal\"\n                size=\"lg\"\n                onClick={handleComplete}\n                isLoading={isLoading}\n                loadingText=\"식단 생성 중...\"\n                isDisabled={!isStepValid()}\n                rightIcon={isLoading ? <Spinner size=\"sm\" /> : <span>🎉</span>}\n                px={8}\n              >\n                {isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'}\n              </Button>\n            ) : (\n              <Button\n                colorScheme=\"teal\"\n                onClick={handleNext}\n                isDisabled={!isStepValid()}\n                rightIcon={<span>→</span>}\n              >\n                다음\n              </Button>\n            )}\n          </HStack>\n        </VStack>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default InputScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
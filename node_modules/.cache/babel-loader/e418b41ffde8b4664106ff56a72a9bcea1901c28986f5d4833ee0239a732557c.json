{"ast":null,"code":"import { mockProducts } from '../data/mockProducts';\n\n// 🍳 만개의 레시피 원본 데이터 구조\n\n// 🧮 AI 기반 영양소 계산기\nclass NutritionCalculator {\n  constructor() {\n    // 기본 영양 데이터베이스 (농진청 기준)\n    this.nutritionDB = {\n      // 🥚 단백질류\n      '계란': {\n        calories: 155,\n        protein: 12.6,\n        carb: 1.1,\n        fat: 11.1,\n        per100g: true\n      },\n      '비엔나': {\n        calories: 315,\n        protein: 12.0,\n        carb: 2.0,\n        fat: 28.5,\n        per100g: true\n      },\n      '훈제연어': {\n        calories: 117,\n        protein: 25.4,\n        carb: 0,\n        fat: 4.3,\n        per100g: true\n      },\n      '우삼겹': {\n        calories: 331,\n        protein: 15.0,\n        carb: 0,\n        fat: 30.0,\n        per100g: true\n      },\n      // 🥬 채소류\n      '알배기배추': {\n        calories: 14,\n        protein: 1.3,\n        carb: 2.8,\n        fat: 0.1,\n        per100g: true\n      },\n      '당근': {\n        calories: 37,\n        protein: 0.8,\n        carb: 8.8,\n        fat: 0.2,\n        per100g: true\n      },\n      '마늘': {\n        calories: 130,\n        protein: 6.2,\n        carb: 28.4,\n        fat: 0.3,\n        per100g: true\n      },\n      '대파': {\n        calories: 27,\n        protein: 1.4,\n        carb: 6.2,\n        fat: 0.1,\n        per100g: true\n      },\n      '양파': {\n        calories: 37,\n        protein: 1.0,\n        carb: 8.9,\n        fat: 0.1,\n        per100g: true\n      },\n      '아보카도': {\n        calories: 190,\n        protein: 2.0,\n        carb: 8.6,\n        fat: 19.5,\n        per100g: true\n      },\n      '숙주': {\n        calories: 13,\n        protein: 1.4,\n        carb: 2.1,\n        fat: 0.1,\n        per100g: true\n      },\n      '깻잎': {\n        calories: 41,\n        protein: 3.9,\n        carb: 7.1,\n        fat: 0.7,\n        per100g: true\n      },\n      // 🍚 곡물류\n      '밥': {\n        calories: 130,\n        protein: 2.5,\n        carb: 29.0,\n        fat: 0.3,\n        per100g: true\n      },\n      '떡볶이떡': {\n        calories: 124,\n        protein: 2.6,\n        carb: 28.0,\n        fat: 0.4,\n        per100g: true\n      },\n      // 🧄 조미료류\n      '소금': {\n        calories: 0,\n        protein: 0,\n        carb: 0,\n        fat: 0,\n        per100g: true\n      },\n      '간장': {\n        calories: 53,\n        protein: 8.9,\n        carb: 4.6,\n        fat: 0.1,\n        per100g: true\n      },\n      '설탕': {\n        calories: 387,\n        protein: 0,\n        carb: 99.8,\n        fat: 0,\n        per100g: true\n      },\n      '참기름': {\n        calories: 900,\n        protein: 0,\n        carb: 0,\n        fat: 100,\n        per100g: true\n      },\n      '마요네즈': {\n        calories: 680,\n        protein: 1.1,\n        carb: 2.9,\n        fat: 75.3,\n        per100g: true\n      },\n      '땅콩버터': {\n        calories: 588,\n        protein: 22.5,\n        carb: 22.3,\n        fat: 49.9,\n        per100g: true\n      }\n    };\n  }\n  // 단위 변환기\n  convertToGrams(quantity, unit, ingredientName) {\n    const conversions = {\n      'g': 1,\n      'kg': 1000,\n      'ml': 1,\n      // 물 기준 1ml = 1g\n      '개': this.getItemWeight(ingredientName),\n      '장': this.getSheetWeight(ingredientName),\n      '통': this.getWholeWeight(ingredientName),\n      '공기': 150,\n      // 밥 1공기\n      '봉': this.getPackageWeight(ingredientName),\n      '단': this.getBunchWeight(ingredientName),\n      'T': 15,\n      // 큰술\n      't': 5,\n      // 작은술\n      '큰술': 15,\n      '작은술': 5,\n      '스푼': 15\n    };\n    return quantity * (conversions[unit] || 50); // 기본값 50g\n  }\n  getItemWeight(ingredientName) {\n    const weights = {\n      '계란': 50,\n      // 계란 1개 = 50g\n      '마늘': 5,\n      // 마늘 1개 = 5g  \n      '양파': 200,\n      // 양파 1개 = 200g\n      '감자': 150,\n      // 감자 1개 = 150g\n      '당근': 100 // 당근 1개 = 100g\n    };\n    return weights[ingredientName] || 50;\n  }\n  getSheetWeight(ingredientName) {\n    const weights = {\n      '사각어묵': 25,\n      // 어묵 1장 = 25g\n      '알배추잎': 30,\n      // 배추잎 1장 = 30g\n      '깻잎': 1 // 깻잎 1장 = 1g\n    };\n    return weights[ingredientName] || 20;\n  }\n  getWholeWeight(ingredientName) {\n    const weights = {\n      '알배기배추': 1500 // 배추 1통 = 1.5kg\n    };\n    return weights[ingredientName] || 500;\n  }\n  getPackageWeight(ingredientName) {\n    const weights = {\n      '숙주': 200,\n      // 숙주 1봉 = 200g\n      '팽이버섯': 150 // 팽이버섯 1봉 = 150g\n    };\n    return weights[ingredientName] || 100;\n  }\n  getBunchWeight(ingredientName) {\n    const weights = {\n      '대파': 100,\n      // 대파 1단 = 100g\n      '얼갈이': 300 // 얼갈이 1단 = 300g\n    };\n    return weights[ingredientName] || 100;\n  }\n\n  // 영양소 계산\n  calculateNutrition(ingredients) {\n    let totalNutrition = {\n      calories: 0,\n      protein: 0,\n      carb: 0,\n      fat: 0\n    };\n    ingredients.forEach(ingredient => {\n      const baseNutrition = this.nutritionDB[ingredient.name];\n      if (baseNutrition) {\n        const gramsUsed = this.convertToGrams(ingredient.quantity, ingredient.unit, ingredient.name);\n        const ratio = gramsUsed / 100; // 100g 기준으로 계산\n\n        totalNutrition.calories += baseNutrition.calories * ratio;\n        totalNutrition.protein += baseNutrition.protein * ratio;\n        totalNutrition.carb += baseNutrition.carb * ratio;\n        totalNutrition.fat += baseNutrition.fat * ratio;\n      }\n    });\n    return {\n      calories: Math.round(totalNutrition.calories),\n      protein: Math.round(totalNutrition.protein * 10) / 10,\n      carb: Math.round(totalNutrition.carb * 10) / 10,\n      fat: Math.round(totalNutrition.fat * 10) / 10\n    };\n  }\n}\n\n// 🤖 AI 기반 목표 분류기\nclass GoalClassifier {\n  classifyRecipeGoals(ingredients, cookingMethod, mealPurpose, description, nutrition) {\n    const goals = [];\n\n    // 🔥 다이어트 분류 로직 (스마트 분류)\n    const isLowCalorie = nutrition.calories < 400;\n\n    // 채소 기반 재료 확인 (더 포괄적)\n    const vegetableKeywords = ['배추', '숙주', '깻잎', '브로콜리', '양배추', '샐러드', '야채', '채소', '무', '당근', '시금치', '버섯', '콩나물'];\n    const isVegetableBased = ingredients.some(ing => {\n      const ingName = ing.name.toLowerCase();\n      return vegetableKeywords.some(veg => ingName.includes(veg));\n    });\n\n    // 다이어트 친화적 조리법\n    const lightCookingMethods = ['찌기', '삶기', '무침'];\n    const isLightCooking = lightCookingMethods.includes(cookingMethod);\n\n    // 국물 요리 (포만감 높고 칼로리 낮음)\n    const isSoupBased = cookingMethod === '국/탕' || description.includes('국') || description.includes('탕');\n\n    // 다이어트 키워드 (기존 + 추가)\n    const dietKeywords = ['다이어트', '저칼로리', '살빼기', '헬시', '건강'];\n    const hasDietKeyword = dietKeywords.some(keyword => description.toLowerCase().includes(keyword));\n\n    // 다이어트 레시피 판정 (더 관대하게)\n    if (isLowCalorie || isVegetableBased || isLightCooking || isSoupBased || hasDietKeyword) {\n      goals.push('weight_loss');\n    }\n\n    // 💪 근성장 분류 로직 (스마트 분류)\n    const isHighProtein = nutrition.protein > 20;\n\n    // 단백질 재료 확인 (더 포괄적)\n    const proteinKeywords = ['계란', '달걀', '닭', '소고기', '돼지', '연어', '참치', '두부', '새우', '조개', '생선', '육'];\n    const hasProteinSource = ingredients.some(ing => {\n      const ingName = ing.name.toLowerCase();\n      return proteinKeywords.some(protein => ingName.includes(protein));\n    });\n\n    // 고단백 조리법\n    const proteinCookingMethods = ['굽기', '볶기', '튀기기'];\n    const isProteinCooking = proteinCookingMethods.includes(cookingMethod);\n\n    // 근성장 키워드\n    const muscleKeywords = ['단백질', '근육', '고단백', '프로틴'];\n    const hasMuscleKeyword = muscleKeywords.some(keyword => description.toLowerCase().includes(keyword));\n\n    // 근성장 레시피 판정\n    if (isHighProtein || hasProteinSource || isProteinCooking || hasMuscleKeyword) {\n      goals.push('muscle_gain');\n    }\n\n    // 🥘 균형 잡힌 식단 (maintenance) - 모든 레시피가 최소 하나의 목표를 가지도록\n    if (goals.length === 0 || cookingMethod === '국/탕' || mealPurpose === '일상') {\n      goals.push('maintenance');\n    }\n    return goals;\n  }\n}\n\n// 🛒 쿠팡 상품 매칭기\nclass CoupangProductMatcher {\n  findMatchingProduct(ingredientName) {\n    // 재료명 → 쿠팡 상품 매핑 테이블\n    const productMapping = {\n      '계란': 'prod-whole-egg-1',\n      '당근': 'prod-carrot-1',\n      '알배기배추': 'prod-cabbage-1',\n      '아보카도': 'prod-avocado-1',\n      '훈제연어': 'prod-salmon-1'\n      // 더 많은 매핑 추가 가능\n    };\n    const productId = productMapping[ingredientName];\n    if (productId) {\n      return mockProducts.find(p => p.id === productId) || null;\n    }\n\n    // 부분 매치 로직\n    const partialMatch = mockProducts.find(product => product.name.includes(ingredientName) || ingredientName.includes(product.name.split(' ')[0]));\n    return partialMatch || null;\n  }\n  matchIngredients(ingredients) {\n    return ingredients.map(ingredient => {\n      const product = this.findMatchingProduct(ingredient.name);\n      return {\n        product: product || this.createFallbackProduct(ingredient.name),\n        quantity: ingredient.quantity,\n        unit: ingredient.unit,\n        isOptional: false\n      };\n    });\n  }\n  createFallbackProduct(ingredientName) {\n    // 매칭되지 않는 재료에 대한 기본 상품 생성\n    return {\n      id: `fallback-${ingredientName}`,\n      name: `${ingredientName} (쿠팡)`,\n      price: 3000,\n      // 기본 가격\n      imageUrl: 'https://via.placeholder.com/200x200?text=' + encodeURIComponent(ingredientName),\n      coupangUrl: 'https://www.coupang.com/search?q=' + encodeURIComponent(ingredientName),\n      category: '식재료',\n      nutrition: {\n        calories: 50,\n        carb: 10,\n        protein: 2,\n        fat: 1,\n        sodium: 100,\n        sugar: 0\n      },\n      description: `${ingredientName} 상품`,\n      brand: '일반',\n      weight: '1개',\n      rating: 4.0,\n      reviewCount: 100,\n      isRocketDelivery: false\n    };\n  }\n}\n\n// 🎯 메인 변환기 클래스\nexport class MankaeRecipeProcessor {\n  constructor() {\n    this.nutritionCalculator = new NutritionCalculator();\n    this.goalClassifier = new GoalClassifier();\n    this.productMatcher = new CoupangProductMatcher();\n  }\n  // 재료 문자열 파싱 (실제 CSV 형식에 맞춘 완전 개선 버전)\n  parseIngredients(ingredientText) {\n    const ingredients = [];\n    console.log(`🧪 재료 파싱 시작: \"${ingredientText.substring(0, 100)}...\"`);\n    if (!ingredientText || ingredientText.trim() === '') {\n      console.log(`⚠️ 재료 텍스트가 비어있음`);\n      return ingredients;\n    }\n\n    // 실제 CSV 형식 처리: \"[재료] 떡국떡400g| 다진소고기100g| ...\"\n    const sections = ingredientText.split(/\\[재료\\]|\\[양념\\]|\\[소스\\]|\\[육수\\]|\\[간장양념\\]|\\[양념장\\]|\\[얼갈이데칠때\\]|\\[만두전골 육수\\]|\\[전골요리 양념장\\]/);\n    sections.forEach((section, sectionIndex) => {\n      if (!section.trim()) return;\n      console.log(`🔍 섹션 ${sectionIndex}: \"${section.substring(0, 50)}...\"`);\n      const items = section.split('|').filter(item => item.trim());\n      console.log(`📝 아이템 개수: ${items.length}`);\n      items.forEach((item, itemIndex) => {\n        const trimmed = item.trim();\n        if (!trimmed || trimmed === '약간' || trimmed.length < 2) return;\n        console.log(`🔍 아이템 ${itemIndex}: \"${trimmed}\"`);\n        let match = null;\n\n        // 🔥 실제 CSV 데이터 패턴에 완벽하게 맞춘 정규식들\n\n        // 1. \"돼지고기수육용삼겹살500g\" 형태 (공백 없는 긴 이름 + 숫자 + 한글단위)\n        match = trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);\n\n        // 2. \"멸치육수800ml\" 형태 (공백 없는 이름 + 숫자 + 영어단위)\n        if (!match) {\n          match = trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([a-zA-Z]+)$/);\n        }\n\n        // 3. \"돼지고기 수육용삼겹살500g\" 형태 (공백 포함 긴 이름 + 숫자 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)\\s+(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);\n        }\n\n        // 4. \"된장1.5큰술\" 형태 (소수점 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+(?:\\.\\d+)?)([가-힣]+)$/);\n        }\n\n        // 5. \"대파1/3대\" 형태 (분수 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+\\/\\d+)([가-힣]+)$/);\n        }\n\n        // 6. \"참기름1T\" 형태 (영어 단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([TtLl])$/);\n        }\n\n        // 7. \"소금\" 형태 (이름만, 수량 1로 설정)\n        if (!match && trimmed.length > 1 && !trimmed.includes('약간')) {\n          match = [trimmed, trimmed, '1', '개'];\n        }\n        if (match) {\n          const [, name, quantityStr, unit] = match;\n          let quantity = parseFloat(quantityStr);\n\n          // 분수 처리 (1/3 → 0.333)\n          if (quantityStr.includes('/')) {\n            const [numerator, denominator] = quantityStr.split('/').map(Number);\n            quantity = numerator / denominator;\n          }\n          const ingredient = {\n            name: name.trim(),\n            quantity,\n            unit: unit.trim()\n          };\n          ingredients.push(ingredient);\n          console.log(`✅ 재료 추가: ${ingredient.name} ${ingredient.quantity}${ingredient.unit}`);\n        } else {\n          console.log(`❌ 매칭 실패: \"${trimmed}\"`);\n\n          // 실패한 경우라도 유효한 재료명 추출 시도\n          // 숫자와 단위를 제외한 나머지를 재료명으로 간주\n          const nameOnlyMatch = trimmed.match(/^(.+?)(?:\\d|\\s*$)/);\n          if (nameOnlyMatch && nameOnlyMatch[1].trim().length > 1 && !trimmed.includes('약간') && !trimmed.includes('적당히')) {\n            const fallbackIngredient = {\n              name: nameOnlyMatch[1].trim(),\n              quantity: 1,\n              unit: '개'\n            };\n            ingredients.push(fallbackIngredient);\n            console.log(`🔄 폴백 재료 추가: ${fallbackIngredient.name} ${fallbackIngredient.quantity}${fallbackIngredient.unit}`);\n          }\n        }\n      });\n    });\n    console.log(`📋 최종 재료 개수: ${ingredients.length}`);\n    return ingredients;\n  }\n\n  // 조리시간 변환\n  parseTime(timeStr) {\n    // null/undefined 체크 추가\n    if (!timeStr || typeof timeStr !== 'string') {\n      console.log('⚠️ 조리시간 정보가 없음, 기본값 30분 사용');\n      return 30; // 기본값 30분\n    }\n    if (timeStr.includes('시간')) {\n      const hours = parseInt(timeStr) || 1;\n      return hours * 60;\n    }\n    const minutes = parseInt(timeStr) || 15;\n    return minutes;\n  }\n\n  // 🧪 파싱 함수 테스트 (임시 디버깅용)\n  testParseIngredients(ingredientText) {\n    console.log('🧪 파싱 테스트 시작:', ingredientText);\n    return this.parseIngredients(ingredientText);\n  }\n\n  // 🔥 긴급 디버깅: 실제 CSV 데이터로 테스트\n  debugRealDataParsing() {\n    const testData = [\"[재료] 떡국떡400g| 다진소고기100g| 멸치육수800ml| 대파1/3대| 계란2개| 참기름1T| 국간장1T\", \"[재료] 돼지고기 수육용삼겹살500g| 된장1.5큰술| 술4큰술| 홍어무침| 무생채| 콩나물무침\", \"[재료] 배추3장| 양파1/2개| 대파1대| 청양고추2개\"];\n    testData.forEach((data, index) => {\n      console.log(`\\n🧪 테스트 ${index + 1}: ${data}`);\n      const result = this.parseIngredients(data);\n      console.log(`📋 결과: ${result.length}개 재료 파싱됨`);\n      result.forEach((ing, i) => {\n        console.log(`   ${i + 1}. ${ing.name}: ${ing.quantity}${ing.unit}`);\n      });\n    });\n  }\n\n  // 인분수 변환\n  parseServings(servingStr) {\n    if (!servingStr || typeof servingStr !== 'string') {\n      return 2; // 기본값 2인분\n    }\n    const match = servingStr.match(/(\\d+)/);\n    return match ? parseInt(match[1]) : 2;\n  }\n\n  // 난이도 변환\n  parseDifficulty(difficultyStr) {\n    // null/undefined 체크 추가\n    if (!difficultyStr || typeof difficultyStr !== 'string') {\n      console.log('⚠️ 난이도 정보가 없음, 기본값 medium 사용');\n      return 'medium'; // 기본값 medium\n    }\n    if (difficultyStr.includes('초급') || difficultyStr.includes('아무나')) return 'easy';\n    if (difficultyStr.includes('중급')) return 'medium';\n    return 'hard';\n  }\n\n  // 식사 타입 추론\n  inferMealType(title, category, mealPurpose) {\n    // null/undefined 체크\n    const safeTitle = title || '';\n    const safeCategory = category || '';\n    const safeMealPurpose = mealPurpose || '';\n    const titleLower = safeTitle.toLowerCase();\n    if (titleLower.includes('아침') || safeMealPurpose === '아침대용') return 'breakfast';\n    if (titleLower.includes('점심')) return 'lunch';\n    if (titleLower.includes('저녁') || safeMealPurpose === '술안주') return 'dinner';\n    if (safeCategory === '양념/소스/잼' || safeMealPurpose === '간식') return 'snack';\n\n    // 기본값: 요리 종류에 따라 결정\n    if (safeCategory === '국/탕') return 'dinner';\n    if (safeCategory === '밑반찬') return 'lunch';\n    return 'lunch'; // 기본값\n  }\n\n  // 품질 점수 계산\n  calculateQualityScore(views, scraps) {\n    // 조회수 기반 점수 (최대 5.0)\n    const viewScore = Math.min(views / 200 * 5, 5.0);\n\n    // 스크랩율 기반 점수 (최대 5.0)\n    const engagementRate = views > 0 ? scraps / views * 100 : 0;\n    const engagementScore = Math.min(engagementRate * 50, 5.0);\n\n    // 전체 점수 (조회수 70% + 스크랩율 30%)\n    const overall = viewScore * 0.7 + engagementScore * 0.3;\n    return {\n      overall: Math.round(overall * 10) / 10,\n      taste: Math.min(overall + 0.2, 5.0),\n      difficulty: Math.min(overall + 0.1, 5.0),\n      nutrition: Math.min(overall - 0.1, 5.0),\n      reviewCount: views\n    };\n  }\n\n  // 🎯 메인 변환 함수 (성능 최적화)\n  processRecipe(rawData) {\n    var _rawData$CKG_MTRL_CN;\n    // 🔥 긴급 디버깅: 모든 레시피 처리 과정 추적\n    console.log(`🔄 레시피 처리 시작: ${rawData.RCP_TTL}`);\n    console.log(`   - 원본 재료 데이터: \"${(_rawData$CKG_MTRL_CN = rawData.CKG_MTRL_CN) === null || _rawData$CKG_MTRL_CN === void 0 ? void 0 : _rawData$CKG_MTRL_CN.substring(0, 100)}...\"`);\n\n    // 1단계: 재료 파싱\n    const ingredients = this.parseIngredients(rawData.CKG_MTRL_CN || '');\n    console.log(`   - 파싱된 재료 수: ${ingredients.length}개`);\n    if (ingredients.length > 0) {\n      console.log(`   - 샘플 재료: ${ingredients.slice(0, 3).map(i => `${i.name}(${i.quantity}${i.unit})`).join(', ')}`);\n    }\n\n    // 2단계: 영양소 계산 (캐시 활용)\n    const nutrition = this.nutritionCalculator.calculateNutrition(ingredients);\n    console.log(`   - 계산된 영양소: ${nutrition.calories}kcal, ${nutrition.protein}g 단백질`);\n\n    // 3단계: 목표 분류 (최적화된 알고리즘)\n    const goalFit = this.goalClassifier.classifyRecipeGoals(ingredients, rawData.CKG_MTH_ACTO_NM || '', rawData.CKG_STA_ACTO_NM || '', rawData.CKG_IPDC || '', nutrition);\n    console.log(`   - 분류된 목표: [${goalFit.join(', ')}]`);\n    console.log('---');\n\n    // 4단계: 품질 평가\n    const userRatings = this.calculateQualityScore(rawData.INQ_CNT || 0, rawData.SRAP_CNT || 0);\n\n    // 5단계: Recipe 객체 생성\n    const recipe = {\n      id: `mankae-${rawData.RCP_SNO}`,\n      name: rawData.CKG_NM || '제목 없음',\n      description: rawData.CKG_IPDC || '설명 없음',\n      image: rawData.RCP_IMG_URL || `https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3`,\n      // 실제 이미지 또는 기본 이미지\n      cookingTime: this.parseTime(rawData.CKG_TIME_NM || ''),\n      difficulty: this.parseDifficulty(rawData.CKG_DODF_NM || ''),\n      instructions: this.generateInstructions(rawData.CKG_MTH_ACTO_NM || '', ingredients),\n      tags: this.generateTags(rawData, nutrition),\n      mealType: this.inferMealType(rawData.RCP_TTL || '', rawData.CKG_KND_ACTO_NM || '', rawData.CKG_STA_ACTO_NM || ''),\n      goalFit,\n      // 확장 정보 (선택적)\n      nutritionHighlights: {\n        mainBenefits: this.generateNutritionBenefits(ingredients, nutrition),\n        calorieContext: `${nutrition.calories}kcal로 균형잡힌 한 끼`,\n        dietaryInfo: this.generateDietaryInfo(ingredients, nutrition)\n      },\n      userRatings,\n      sourceInfo: {\n        chef: rawData.RGTR_NM,\n        source: 'chef_recipe',\n        verified: rawData.INQ_CNT > 100,\n        // 조회수 100 이상이면 검증된 것으로 간주\n        lastUpdated: rawData.FIRST_REG_DT.substring(0, 8) // YYYYMMDD 형식\n      }\n    };\n    console.log(`✅ 변환 완료: ${recipe.name}`);\n    return recipe;\n  }\n\n  // 조리법 생성\n  generateInstructions(cookingMethod, ingredients) {\n    const baseInstructions = {\n      '부침': ['팬에 기름을 두르고 중약불로 달궈주세요', '재료를 올리고 노릇하게 부쳐주세요', '뒤집어서 반대면도 익혀주세요', '완성된 요리를 접시에 담아주세요'],\n      '볶음': ['팬을 달구고 기름을 두르세요', '재료를 넣고 센 불에서 빠르게 볶아주세요', '양념을 넣고 골고루 섞어주세요', '불을 끄고 접시에 담아 완성하세요'],\n      '찜': ['재료를 깨끗이 손질하여 준비하세요', '찜기에 물을 넣고 끓여주세요', '재료를 찜기에 올리고 뚜껑을 덮어주세요', '충분히 익으면 양념과 함께 완성하세요'],\n      '끓이기': ['냄비에 물을 넣고 끓여주세요', '재료를 넣고 중불에서 끓여주세요', '간을 맞추고 더 끓여주세요', '그릇에 담아 뜨겁게 완성하세요']\n    };\n    return baseInstructions[cookingMethod] || ['재료를 준비하고 손질하세요', '적절한 방법으로 조리하세요', '간을 맞추고 완성하세요'];\n  }\n\n  // 태그 생성\n  generateTags(rawData, nutrition) {\n    const tags = [];\n\n    // 조리법 기반 - null 체크\n    if (rawData.CKG_MTH_ACTO_NM) {\n      tags.push(rawData.CKG_MTH_ACTO_NM);\n    }\n\n    // 영양 기반\n    if (nutrition.protein > 15) tags.push('고단백');\n    if (nutrition.calories < 200) tags.push('저칼로리');\n\n    // 상황 기반 - null 체크\n    if (rawData.CKG_STA_ACTO_NM === '초스피드') tags.push('간편');\n    if (rawData.CKG_DODF_NM === '아무나') tags.push('초보자');\n\n    // 시간 기반 - null 체크\n    if (rawData.CKG_TIME_NM && rawData.CKG_TIME_NM.includes('10분')) tags.push('10분완성');\n    if (rawData.CKG_TIME_NM && rawData.CKG_TIME_NM.includes('15분')) tags.push('15분완성');\n    return tags;\n  }\n\n  // 영양 혜택 생성\n  generateNutritionBenefits(ingredients, nutrition) {\n    const benefits = [];\n    if (nutrition.protein > 15) {\n      benefits.push(`고단백질(${nutrition.protein}g)로 근육 건강에 도움`);\n    }\n    ingredients.forEach(ing => {\n      if (ing.name === '계란') benefits.push('완전단백질과 비타민 공급');\n      if (ing.name === '배추') benefits.push('식이섬유와 비타민C 풍부');\n      if (ing.name === '아보카도') benefits.push('건강한 불포화지방산 함유');\n    });\n    return benefits;\n  }\n\n  // 식단 정보 생성\n  generateDietaryInfo(ingredients, nutrition) {\n    const info = [];\n    if (nutrition.protein > 15) info.push('고단백');\n    if (nutrition.calories < 200) info.push('저칼로리');\n    const hasAnimalProducts = ingredients.some(ing => ['계란', '우삼겹', '훈제연어'].includes(ing.name));\n    if (!hasAnimalProducts) info.push('비건');\n    return info;\n  }\n}","map":{"version":3,"names":["mockProducts","NutritionCalculator","constructor","nutritionDB","calories","protein","carb","fat","per100g","convertToGrams","quantity","unit","ingredientName","conversions","getItemWeight","getSheetWeight","getWholeWeight","getPackageWeight","getBunchWeight","weights","calculateNutrition","ingredients","totalNutrition","forEach","ingredient","baseNutrition","name","gramsUsed","ratio","Math","round","GoalClassifier","classifyRecipeGoals","cookingMethod","mealPurpose","description","nutrition","goals","isLowCalorie","vegetableKeywords","isVegetableBased","some","ing","ingName","toLowerCase","veg","includes","lightCookingMethods","isLightCooking","isSoupBased","dietKeywords","hasDietKeyword","keyword","push","isHighProtein","proteinKeywords","hasProteinSource","proteinCookingMethods","isProteinCooking","muscleKeywords","hasMuscleKeyword","length","CoupangProductMatcher","findMatchingProduct","productMapping","productId","find","p","id","partialMatch","product","split","matchIngredients","map","createFallbackProduct","isOptional","price","imageUrl","encodeURIComponent","coupangUrl","category","sodium","sugar","brand","weight","rating","reviewCount","isRocketDelivery","MankaeRecipeProcessor","nutritionCalculator","goalClassifier","productMatcher","parseIngredients","ingredientText","console","log","substring","trim","sections","section","sectionIndex","items","filter","item","itemIndex","trimmed","match","quantityStr","parseFloat","numerator","denominator","Number","nameOnlyMatch","fallbackIngredient","parseTime","timeStr","hours","parseInt","minutes","testParseIngredients","debugRealDataParsing","testData","data","index","result","i","parseServings","servingStr","parseDifficulty","difficultyStr","inferMealType","title","safeTitle","safeCategory","safeMealPurpose","titleLower","calculateQualityScore","views","scraps","viewScore","min","engagementRate","engagementScore","overall","taste","difficulty","processRecipe","rawData","_rawData$CKG_MTRL_CN","RCP_TTL","CKG_MTRL_CN","slice","join","goalFit","CKG_MTH_ACTO_NM","CKG_STA_ACTO_NM","CKG_IPDC","userRatings","INQ_CNT","SRAP_CNT","recipe","RCP_SNO","CKG_NM","image","RCP_IMG_URL","cookingTime","CKG_TIME_NM","CKG_DODF_NM","instructions","generateInstructions","tags","generateTags","mealType","CKG_KND_ACTO_NM","nutritionHighlights","mainBenefits","generateNutritionBenefits","calorieContext","dietaryInfo","generateDietaryInfo","sourceInfo","chef","RGTR_NM","source","verified","lastUpdated","FIRST_REG_DT","baseInstructions","benefits","info","hasAnimalProducts"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/recipeDataProcessor.ts"],"sourcesContent":["import { Recipe, CoupangProduct, RecipeIngredient } from '../types';\nimport { mockProducts } from '../data/mockProducts';\n\n// 🍳 만개의 레시피 원본 데이터 구조\nexport interface MankaeLRecipeRaw {\n  RCP_SNO: string;           // 레시피 번호\n  RCP_TTL: string;           // 레시피 제목\n  CKG_NM: string;            // 요리명\n  RGTR_ID: string;           // 등록자 ID\n  RGTR_NM: string;           // 등록자명 (요리사)\n  INQ_CNT: number;           // 조회수\n  RCMM_CNT: number;          // 추천수\n  SRAP_CNT: number;          // 스크랩수\n  CKG_MTH_ACTO_NM: string;   // 조리법 (부침, 찜, 볶음, 끓이기)\n  CKG_STA_ACTO_NM: string;   // 상황 (영양식, 일상, 초스피드, 술안주)\n  CKG_MTRL_ACTO_NM: string;  // 주재료 (달걀/유제품, 채소류, 소고기)\n  CKG_KND_ACTO_NM: string;   // 요리종류 (밑반찬, 메인반찬, 국/탕)\n  CKG_IPDC: string;          // 요리소개\n  CKG_MTRL_CN: string;       // 재료 정보\n  CKG_INBUN_NM: string;      // 인분\n  CKG_DODF_NM: string;       // 난이도\n  CKG_TIME_NM: string;       // 조리시간\n  FIRST_REG_DT: string;      // 등록일\n  RCP_IMG_URL?: string;      // 레시피 이미지 URL\n}\n\n// 🧮 AI 기반 영양소 계산기\nclass NutritionCalculator {\n  // 기본 영양 데이터베이스 (농진청 기준)\n  private nutritionDB: Record<string, { calories: number; protein: number; carb: number; fat: number; per100g: boolean }> = {\n    // 🥚 단백질류\n    '계란': { calories: 155, protein: 12.6, carb: 1.1, fat: 11.1, per100g: true },\n    '비엔나': { calories: 315, protein: 12.0, carb: 2.0, fat: 28.5, per100g: true },\n    '훈제연어': { calories: 117, protein: 25.4, carb: 0, fat: 4.3, per100g: true },\n    '우삼겹': { calories: 331, protein: 15.0, carb: 0, fat: 30.0, per100g: true },\n    \n    // 🥬 채소류\n    '알배기배추': { calories: 14, protein: 1.3, carb: 2.8, fat: 0.1, per100g: true },\n    '당근': { calories: 37, protein: 0.8, carb: 8.8, fat: 0.2, per100g: true },\n    '마늘': { calories: 130, protein: 6.2, carb: 28.4, fat: 0.3, per100g: true },\n    '대파': { calories: 27, protein: 1.4, carb: 6.2, fat: 0.1, per100g: true },\n    '양파': { calories: 37, protein: 1.0, carb: 8.9, fat: 0.1, per100g: true },\n    '아보카도': { calories: 190, protein: 2.0, carb: 8.6, fat: 19.5, per100g: true },\n    '숙주': { calories: 13, protein: 1.4, carb: 2.1, fat: 0.1, per100g: true },\n    '깻잎': { calories: 41, protein: 3.9, carb: 7.1, fat: 0.7, per100g: true },\n    \n    // 🍚 곡물류\n    '밥': { calories: 130, protein: 2.5, carb: 29.0, fat: 0.3, per100g: true },\n    '떡볶이떡': { calories: 124, protein: 2.6, carb: 28.0, fat: 0.4, per100g: true },\n    \n    // 🧄 조미료류\n    '소금': { calories: 0, protein: 0, carb: 0, fat: 0, per100g: true },\n    '간장': { calories: 53, protein: 8.9, carb: 4.6, fat: 0.1, per100g: true },\n    '설탕': { calories: 387, protein: 0, carb: 99.8, fat: 0, per100g: true },\n    '참기름': { calories: 900, protein: 0, carb: 0, fat: 100, per100g: true },\n    '마요네즈': { calories: 680, protein: 1.1, carb: 2.9, fat: 75.3, per100g: true },\n    '땅콩버터': { calories: 588, protein: 22.5, carb: 22.3, fat: 49.9, per100g: true }\n  };\n  \n  // 단위 변환기\n  private convertToGrams(quantity: number, unit: string, ingredientName: string): number {\n    const conversions: Record<string, number> = {\n      'g': 1,\n      'kg': 1000,\n      'ml': 1, // 물 기준 1ml = 1g\n      '개': this.getItemWeight(ingredientName),\n      '장': this.getSheetWeight(ingredientName),\n      '통': this.getWholeWeight(ingredientName),\n      '공기': 150, // 밥 1공기\n      '봉': this.getPackageWeight(ingredientName),\n      '단': this.getBunchWeight(ingredientName),\n      'T': 15, // 큰술\n      't': 5,  // 작은술\n      '큰술': 15,\n      '작은술': 5,\n      '스푼': 15\n    };\n    \n    return quantity * (conversions[unit] || 50); // 기본값 50g\n  }\n  \n  private getItemWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '계란': 50,   // 계란 1개 = 50g\n      '마늘': 5,    // 마늘 1개 = 5g  \n      '양파': 200,  // 양파 1개 = 200g\n      '감자': 150,  // 감자 1개 = 150g\n      '당근': 100   // 당근 1개 = 100g\n    };\n    return weights[ingredientName] || 50;\n  }\n  \n  private getSheetWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '사각어묵': 25,  // 어묵 1장 = 25g\n      '알배추잎': 30,  // 배추잎 1장 = 30g\n      '깻잎': 1        // 깻잎 1장 = 1g\n    };\n    return weights[ingredientName] || 20;\n  }\n  \n  private getWholeWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '알배기배추': 1500  // 배추 1통 = 1.5kg\n    };\n    return weights[ingredientName] || 500;\n  }\n  \n  private getPackageWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '숙주': 200,      // 숙주 1봉 = 200g\n      '팽이버섯': 150   // 팽이버섯 1봉 = 150g\n    };\n    return weights[ingredientName] || 100;\n  }\n  \n  private getBunchWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '대파': 100,      // 대파 1단 = 100g\n      '얼갈이': 300     // 얼갈이 1단 = 300g\n    };\n    return weights[ingredientName] || 100;\n  }\n  \n  // 영양소 계산\n  calculateNutrition(ingredients: Array<{name: string; quantity: number; unit: string}>): {\n    calories: number; protein: number; carb: number; fat: number;\n  } {\n    let totalNutrition = { calories: 0, protein: 0, carb: 0, fat: 0 };\n    \n    ingredients.forEach(ingredient => {\n      const baseNutrition = this.nutritionDB[ingredient.name];\n      if (baseNutrition) {\n        const gramsUsed = this.convertToGrams(ingredient.quantity, ingredient.unit, ingredient.name);\n        const ratio = gramsUsed / 100; // 100g 기준으로 계산\n        \n        totalNutrition.calories += baseNutrition.calories * ratio;\n        totalNutrition.protein += baseNutrition.protein * ratio;\n        totalNutrition.carb += baseNutrition.carb * ratio;\n        totalNutrition.fat += baseNutrition.fat * ratio;\n      }\n    });\n    \n    return {\n      calories: Math.round(totalNutrition.calories),\n      protein: Math.round(totalNutrition.protein * 10) / 10,\n      carb: Math.round(totalNutrition.carb * 10) / 10,\n      fat: Math.round(totalNutrition.fat * 10) / 10\n    };\n  }\n}\n\n// 🤖 AI 기반 목표 분류기\nclass GoalClassifier {\n  classifyRecipeGoals(\n    ingredients: Array<{name: string; quantity: number; unit: string}>,\n    cookingMethod: string,\n    mealPurpose: string,\n    description: string,\n    nutrition: {calories: number; protein: number; carb: number; fat: number}\n  ): ('weight_loss' | 'muscle_gain' | 'maintenance')[] {\n    const goals: ('weight_loss' | 'muscle_gain' | 'maintenance')[] = [];\n    \n    // 🔥 다이어트 분류 로직 (스마트 분류)\n    const isLowCalorie = nutrition.calories < 400;\n    \n    // 채소 기반 재료 확인 (더 포괄적)\n    const vegetableKeywords = ['배추', '숙주', '깻잎', '브로콜리', '양배추', '샐러드', '야채', '채소', '무', '당근', '시금치', '버섯', '콩나물'];\n    const isVegetableBased = ingredients.some(ing => {\n      const ingName = ing.name.toLowerCase();\n      return vegetableKeywords.some(veg => ingName.includes(veg));\n    });\n    \n    // 다이어트 친화적 조리법\n    const lightCookingMethods = ['찌기', '삶기', '무침'];\n    const isLightCooking = lightCookingMethods.includes(cookingMethod);\n    \n    // 국물 요리 (포만감 높고 칼로리 낮음)\n    const isSoupBased = cookingMethod === '국/탕' || description.includes('국') || description.includes('탕');\n    \n    // 다이어트 키워드 (기존 + 추가)\n    const dietKeywords = ['다이어트', '저칼로리', '살빼기', '헬시', '건강'];\n    const hasDietKeyword = dietKeywords.some(keyword => description.toLowerCase().includes(keyword));\n    \n    // 다이어트 레시피 판정 (더 관대하게)\n    if (isLowCalorie || isVegetableBased || isLightCooking || isSoupBased || hasDietKeyword) {\n      goals.push('weight_loss');\n    }\n    \n    // 💪 근성장 분류 로직 (스마트 분류)\n    const isHighProtein = nutrition.protein > 20;\n    \n    // 단백질 재료 확인 (더 포괄적)\n    const proteinKeywords = ['계란', '달걀', '닭', '소고기', '돼지', '연어', '참치', '두부', '새우', '조개', '생선', '육'];\n    const hasProteinSource = ingredients.some(ing => {\n      const ingName = ing.name.toLowerCase();\n      return proteinKeywords.some(protein => ingName.includes(protein));\n    });\n    \n    // 고단백 조리법\n    const proteinCookingMethods = ['굽기', '볶기', '튀기기'];\n    const isProteinCooking = proteinCookingMethods.includes(cookingMethod);\n    \n    // 근성장 키워드\n    const muscleKeywords = ['단백질', '근육', '고단백', '프로틴'];\n    const hasMuscleKeyword = muscleKeywords.some(keyword => description.toLowerCase().includes(keyword));\n    \n    // 근성장 레시피 판정\n    if (isHighProtein || hasProteinSource || isProteinCooking || hasMuscleKeyword) {\n      goals.push('muscle_gain');\n    }\n    \n    // 🥘 균형 잡힌 식단 (maintenance) - 모든 레시피가 최소 하나의 목표를 가지도록\n    if (goals.length === 0 || cookingMethod === '국/탕' || mealPurpose === '일상') {\n      goals.push('maintenance');\n    }\n    \n    return goals;\n  }\n}\n\n// 🛒 쿠팡 상품 매칭기\nclass CoupangProductMatcher {\n  private findMatchingProduct(ingredientName: string): CoupangProduct | null {\n    // 재료명 → 쿠팡 상품 매핑 테이블\n    const productMapping: Record<string, string> = {\n      '계란': 'prod-whole-egg-1',\n      '당근': 'prod-carrot-1',\n      '알배기배추': 'prod-cabbage-1',\n      '아보카도': 'prod-avocado-1',\n      '훈제연어': 'prod-salmon-1',\n      // 더 많은 매핑 추가 가능\n    };\n    \n    const productId = productMapping[ingredientName];\n    if (productId) {\n      return mockProducts.find(p => p.id === productId) || null;\n    }\n    \n    // 부분 매치 로직\n    const partialMatch = mockProducts.find(product => \n      product.name.includes(ingredientName) || \n      ingredientName.includes(product.name.split(' ')[0])\n    );\n    \n    return partialMatch || null;\n  }\n  \n  matchIngredients(ingredients: Array<{name: string; quantity: number; unit: string}>): RecipeIngredient[] {\n    return ingredients.map(ingredient => {\n      const product = this.findMatchingProduct(ingredient.name);\n      \n      return {\n        product: product || this.createFallbackProduct(ingredient.name),\n        quantity: ingredient.quantity,\n        unit: ingredient.unit,\n        isOptional: false\n      };\n    });\n  }\n  \n  private createFallbackProduct(ingredientName: string): CoupangProduct {\n    // 매칭되지 않는 재료에 대한 기본 상품 생성\n    return {\n      id: `fallback-${ingredientName}`,\n      name: `${ingredientName} (쿠팡)`,\n      price: 3000, // 기본 가격\n      imageUrl: 'https://via.placeholder.com/200x200?text=' + encodeURIComponent(ingredientName),\n      coupangUrl: 'https://www.coupang.com/search?q=' + encodeURIComponent(ingredientName),\n      category: '식재료',\n      nutrition: { calories: 50, carb: 10, protein: 2, fat: 1, sodium: 100, sugar: 0 },\n      description: `${ingredientName} 상품`,\n      brand: '일반',\n      weight: '1개',\n      rating: 4.0,\n      reviewCount: 100,\n      isRocketDelivery: false\n    };\n  }\n}\n\n// 🎯 메인 변환기 클래스\nexport class MankaeRecipeProcessor {\n  private nutritionCalculator = new NutritionCalculator();\n  private goalClassifier = new GoalClassifier();\n  private productMatcher = new CoupangProductMatcher();\n  \n  // 재료 문자열 파싱 (실제 CSV 형식에 맞춘 완전 개선 버전)\n  private parseIngredients(ingredientText: string): Array<{name: string; quantity: number; unit: string}> {\n    const ingredients: Array<{name: string; quantity: number; unit: string}> = [];\n\n    console.log(`🧪 재료 파싱 시작: \"${ingredientText.substring(0, 100)}...\"`);\n\n    if (!ingredientText || ingredientText.trim() === '') {\n      console.log(`⚠️ 재료 텍스트가 비어있음`);\n      return ingredients;\n    }\n\n    // 실제 CSV 형식 처리: \"[재료] 떡국떡400g| 다진소고기100g| ...\"\n    const sections = ingredientText.split(/\\[재료\\]|\\[양념\\]|\\[소스\\]|\\[육수\\]|\\[간장양념\\]|\\[양념장\\]|\\[얼갈이데칠때\\]|\\[만두전골 육수\\]|\\[전골요리 양념장\\]/);\n\n    sections.forEach((section, sectionIndex) => {\n      if (!section.trim()) return;\n\n      console.log(`🔍 섹션 ${sectionIndex}: \"${section.substring(0, 50)}...\"`);\n\n      const items = section.split('|').filter(item => item.trim());\n      console.log(`📝 아이템 개수: ${items.length}`);\n\n      items.forEach((item, itemIndex) => {\n        const trimmed = item.trim();\n        if (!trimmed || trimmed === '약간' || trimmed.length < 2) return;\n\n        console.log(`🔍 아이템 ${itemIndex}: \"${trimmed}\"`);\n\n        let match = null;\n\n        // 🔥 실제 CSV 데이터 패턴에 완벽하게 맞춘 정규식들\n\n        // 1. \"돼지고기수육용삼겹살500g\" 형태 (공백 없는 긴 이름 + 숫자 + 한글단위)\n        match = trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);\n\n        // 2. \"멸치육수800ml\" 형태 (공백 없는 이름 + 숫자 + 영어단위)\n        if (!match) {\n          match = trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([a-zA-Z]+)$/);\n        }\n\n        // 3. \"돼지고기 수육용삼겹살500g\" 형태 (공백 포함 긴 이름 + 숫자 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)\\s+(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);\n        }\n\n        // 4. \"된장1.5큰술\" 형태 (소수점 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+(?:\\.\\d+)?)([가-힣]+)$/);\n        }\n\n        // 5. \"대파1/3대\" 형태 (분수 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+\\/\\d+)([가-힣]+)$/);\n        }\n\n        // 6. \"참기름1T\" 형태 (영어 단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([TtLl])$/);\n        }\n\n        // 7. \"소금\" 형태 (이름만, 수량 1로 설정)\n        if (!match && trimmed.length > 1 && !trimmed.includes('약간')) {\n          match = [trimmed, trimmed, '1', '개'];\n        }\n\n        if (match) {\n          const [, name, quantityStr, unit] = match;\n          let quantity = parseFloat(quantityStr);\n\n          // 분수 처리 (1/3 → 0.333)\n          if (quantityStr.includes('/')) {\n            const [numerator, denominator] = quantityStr.split('/').map(Number);\n            quantity = numerator / denominator;\n          }\n\n          const ingredient = {\n            name: name.trim(),\n            quantity,\n            unit: unit.trim()\n          };\n\n          ingredients.push(ingredient);\n          console.log(`✅ 재료 추가: ${ingredient.name} ${ingredient.quantity}${ingredient.unit}`);\n        } else {\n          console.log(`❌ 매칭 실패: \"${trimmed}\"`);\n\n          // 실패한 경우라도 유효한 재료명 추출 시도\n          // 숫자와 단위를 제외한 나머지를 재료명으로 간주\n          const nameOnlyMatch = trimmed.match(/^(.+?)(?:\\d|\\s*$)/);\n          if (nameOnlyMatch && nameOnlyMatch[1].trim().length > 1 &&\n              !trimmed.includes('약간') && !trimmed.includes('적당히')) {\n\n            const fallbackIngredient = {\n              name: nameOnlyMatch[1].trim(),\n              quantity: 1,\n              unit: '개'\n            };\n            ingredients.push(fallbackIngredient);\n            console.log(`🔄 폴백 재료 추가: ${fallbackIngredient.name} ${fallbackIngredient.quantity}${fallbackIngredient.unit}`);\n          }\n        }\n      });\n    });\n\n    console.log(`📋 최종 재료 개수: ${ingredients.length}`);\n    return ingredients;\n  }\n  \n  // 조리시간 변환\n  private parseTime(timeStr: string): number {\n    // null/undefined 체크 추가\n    if (!timeStr || typeof timeStr !== 'string') {\n      console.log('⚠️ 조리시간 정보가 없음, 기본값 30분 사용');\n      return 30; // 기본값 30분\n    }\n\n    if (timeStr.includes('시간')) {\n      const hours = parseInt(timeStr) || 1;\n      return hours * 60;\n    }\n\n    const minutes = parseInt(timeStr) || 15;\n    return minutes;\n  }\n\n  // 🧪 파싱 함수 테스트 (임시 디버깅용)\n  testParseIngredients(ingredientText: string): Array<{name: string; quantity: number; unit: string}> {\n    console.log('🧪 파싱 테스트 시작:', ingredientText);\n    return this.parseIngredients(ingredientText);\n  }\n\n  // 🔥 긴급 디버깅: 실제 CSV 데이터로 테스트\n  debugRealDataParsing() {\n    const testData = [\n      \"[재료] 떡국떡400g| 다진소고기100g| 멸치육수800ml| 대파1/3대| 계란2개| 참기름1T| 국간장1T\",\n      \"[재료] 돼지고기 수육용삼겹살500g| 된장1.5큰술| 술4큰술| 홍어무침| 무생채| 콩나물무침\",\n      \"[재료] 배추3장| 양파1/2개| 대파1대| 청양고추2개\"\n    ];\n\n    testData.forEach((data, index) => {\n      console.log(`\\n🧪 테스트 ${index + 1}: ${data}`);\n      const result = this.parseIngredients(data);\n      console.log(`📋 결과: ${result.length}개 재료 파싱됨`);\n      result.forEach((ing, i) => {\n        console.log(`   ${i + 1}. ${ing.name}: ${ing.quantity}${ing.unit}`);\n      });\n    });\n  }\n  \n  // 인분수 변환\n  private parseServings(servingStr: string): number {\n    if (!servingStr || typeof servingStr !== 'string') {\n      return 2; // 기본값 2인분\n    }\n    const match = servingStr.match(/(\\d+)/);\n    return match ? parseInt(match[1]) : 2;\n  }\n  \n  // 난이도 변환\n  private parseDifficulty(difficultyStr: string): 'easy' | 'medium' | 'hard' {\n    // null/undefined 체크 추가\n    if (!difficultyStr || typeof difficultyStr !== 'string') {\n      console.log('⚠️ 난이도 정보가 없음, 기본값 medium 사용');\n      return 'medium'; // 기본값 medium\n    }\n\n    if (difficultyStr.includes('초급') || difficultyStr.includes('아무나')) return 'easy';\n    if (difficultyStr.includes('중급')) return 'medium';\n    return 'hard';\n  }\n  \n  // 식사 타입 추론\n  private inferMealType(\n    title: string, \n    category: string, \n    mealPurpose: string\n  ): 'breakfast' | 'lunch' | 'dinner' | 'snack' {\n    // null/undefined 체크\n    const safeTitle = title || '';\n    const safeCategory = category || '';\n    const safeMealPurpose = mealPurpose || '';\n    \n    const titleLower = safeTitle.toLowerCase();\n    \n    if (titleLower.includes('아침') || safeMealPurpose === '아침대용') return 'breakfast';\n    if (titleLower.includes('점심')) return 'lunch';\n    if (titleLower.includes('저녁') || safeMealPurpose === '술안주') return 'dinner';\n    if (safeCategory === '양념/소스/잼' || safeMealPurpose === '간식') return 'snack';\n    \n    // 기본값: 요리 종류에 따라 결정\n    if (safeCategory === '국/탕') return 'dinner';\n    if (safeCategory === '밑반찬') return 'lunch';\n    \n    return 'lunch'; // 기본값\n  }\n  \n  // 품질 점수 계산\n  private calculateQualityScore(views: number, scraps: number): {\n    overall: number; taste: number; difficulty: number; nutrition: number; reviewCount: number;\n  } {\n    // 조회수 기반 점수 (최대 5.0)\n    const viewScore = Math.min((views / 200) * 5, 5.0);\n    \n    // 스크랩율 기반 점수 (최대 5.0)\n    const engagementRate = views > 0 ? (scraps / views) * 100 : 0;\n    const engagementScore = Math.min(engagementRate * 50, 5.0);\n    \n    // 전체 점수 (조회수 70% + 스크랩율 30%)\n    const overall = (viewScore * 0.7 + engagementScore * 0.3);\n    \n    return {\n      overall: Math.round(overall * 10) / 10,\n      taste: Math.min(overall + 0.2, 5.0),\n      difficulty: Math.min(overall + 0.1, 5.0),\n      nutrition: Math.min(overall - 0.1, 5.0),\n      reviewCount: views\n    };\n  }\n  \n  // 🎯 메인 변환 함수 (성능 최적화)\n  processRecipe(rawData: MankaeLRecipeRaw): Recipe {\n    // 🔥 긴급 디버깅: 모든 레시피 처리 과정 추적\n    console.log(`🔄 레시피 처리 시작: ${rawData.RCP_TTL}`);\n    console.log(`   - 원본 재료 데이터: \"${rawData.CKG_MTRL_CN?.substring(0, 100)}...\"`);\n\n    // 1단계: 재료 파싱\n    const ingredients = this.parseIngredients(rawData.CKG_MTRL_CN || '');\n    console.log(`   - 파싱된 재료 수: ${ingredients.length}개`);\n\n    if (ingredients.length > 0) {\n      console.log(`   - 샘플 재료: ${ingredients.slice(0, 3).map(i => `${i.name}(${i.quantity}${i.unit})`).join(', ')}`);\n    }\n\n    // 2단계: 영양소 계산 (캐시 활용)\n    const nutrition = this.nutritionCalculator.calculateNutrition(ingredients);\n    console.log(`   - 계산된 영양소: ${nutrition.calories}kcal, ${nutrition.protein}g 단백질`);\n\n    // 3단계: 목표 분류 (최적화된 알고리즘)\n    const goalFit = this.goalClassifier.classifyRecipeGoals(\n      ingredients,\n      rawData.CKG_MTH_ACTO_NM || '',\n      rawData.CKG_STA_ACTO_NM || '',\n      rawData.CKG_IPDC || '',\n      nutrition\n    );\n\n    console.log(`   - 분류된 목표: [${goalFit.join(', ')}]`);\n    console.log('---');\n\n    // 4단계: 품질 평가\n    const userRatings = this.calculateQualityScore(rawData.INQ_CNT || 0, rawData.SRAP_CNT || 0);\n\n    // 5단계: Recipe 객체 생성\n    const recipe: Recipe = {\n      id: `mankae-${rawData.RCP_SNO}`,\n      name: rawData.CKG_NM || '제목 없음',\n      description: rawData.CKG_IPDC || '설명 없음',\n      image: rawData.RCP_IMG_URL || `https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3`, // 실제 이미지 또는 기본 이미지\n      cookingTime: this.parseTime(rawData.CKG_TIME_NM || ''),\n      difficulty: this.parseDifficulty(rawData.CKG_DODF_NM || ''),\n      instructions: this.generateInstructions(rawData.CKG_MTH_ACTO_NM || '', ingredients),\n      tags: this.generateTags(rawData, nutrition),\n      mealType: this.inferMealType(rawData.RCP_TTL || '', rawData.CKG_KND_ACTO_NM || '', rawData.CKG_STA_ACTO_NM || ''),\n      goalFit,\n      \n      // 확장 정보 (선택적)\n      nutritionHighlights: {\n        mainBenefits: this.generateNutritionBenefits(ingredients, nutrition),\n        calorieContext: `${nutrition.calories}kcal로 균형잡힌 한 끼`,\n        dietaryInfo: this.generateDietaryInfo(ingredients, nutrition)\n      },\n      \n      userRatings,\n      \n      sourceInfo: {\n        chef: rawData.RGTR_NM,\n        source: 'chef_recipe',\n        verified: rawData.INQ_CNT > 100, // 조회수 100 이상이면 검증된 것으로 간주\n        lastUpdated: rawData.FIRST_REG_DT.substring(0, 8) // YYYYMMDD 형식\n      }\n    };\n    \n    console.log(`✅ 변환 완료: ${recipe.name}`);\n    return recipe;\n  }\n  \n  // 조리법 생성\n  private generateInstructions(cookingMethod: string, ingredients: Array<{name: string; quantity: number; unit: string}>): string[] {\n    const baseInstructions: Record<string, string[]> = {\n      '부침': [\n        '팬에 기름을 두르고 중약불로 달궈주세요',\n        '재료를 올리고 노릇하게 부쳐주세요',\n        '뒤집어서 반대면도 익혀주세요',\n        '완성된 요리를 접시에 담아주세요'\n      ],\n      '볶음': [\n        '팬을 달구고 기름을 두르세요',\n        '재료를 넣고 센 불에서 빠르게 볶아주세요',\n        '양념을 넣고 골고루 섞어주세요',\n        '불을 끄고 접시에 담아 완성하세요'\n      ],\n      '찜': [\n        '재료를 깨끗이 손질하여 준비하세요',\n        '찜기에 물을 넣고 끓여주세요',\n        '재료를 찜기에 올리고 뚜껑을 덮어주세요',\n        '충분히 익으면 양념과 함께 완성하세요'\n      ],\n      '끓이기': [\n        '냄비에 물을 넣고 끓여주세요',\n        '재료를 넣고 중불에서 끓여주세요',\n        '간을 맞추고 더 끓여주세요',\n        '그릇에 담아 뜨겁게 완성하세요'\n      ]\n    };\n    \n    return baseInstructions[cookingMethod] || [\n      '재료를 준비하고 손질하세요',\n      '적절한 방법으로 조리하세요',\n      '간을 맞추고 완성하세요'\n    ];\n  }\n  \n  // 태그 생성\n  private generateTags(rawData: MankaeLRecipeRaw, nutrition: {calories: number; protein: number}): string[] {\n    const tags: string[] = [];\n    \n    // 조리법 기반 - null 체크\n    if (rawData.CKG_MTH_ACTO_NM) {\n      tags.push(rawData.CKG_MTH_ACTO_NM);\n    }\n    \n    // 영양 기반\n    if (nutrition.protein > 15) tags.push('고단백');\n    if (nutrition.calories < 200) tags.push('저칼로리');\n    \n    // 상황 기반 - null 체크\n    if (rawData.CKG_STA_ACTO_NM === '초스피드') tags.push('간편');\n    if (rawData.CKG_DODF_NM === '아무나') tags.push('초보자');\n    \n    // 시간 기반 - null 체크\n    if (rawData.CKG_TIME_NM && rawData.CKG_TIME_NM.includes('10분')) tags.push('10분완성');\n    if (rawData.CKG_TIME_NM && rawData.CKG_TIME_NM.includes('15분')) tags.push('15분완성');\n    \n    return tags;\n  }\n  \n  // 영양 혜택 생성\n  private generateNutritionBenefits(\n    ingredients: Array<{name: string}>, \n    nutrition: {protein: number; calories: number}\n  ): string[] {\n    const benefits: string[] = [];\n    \n    if (nutrition.protein > 15) {\n      benefits.push(`고단백질(${nutrition.protein}g)로 근육 건강에 도움`);\n    }\n    \n    ingredients.forEach(ing => {\n      if (ing.name === '계란') benefits.push('완전단백질과 비타민 공급');\n      if (ing.name === '배추') benefits.push('식이섬유와 비타민C 풍부');\n      if (ing.name === '아보카도') benefits.push('건강한 불포화지방산 함유');\n    });\n    \n    return benefits;\n  }\n  \n  // 식단 정보 생성\n  private generateDietaryInfo(\n    ingredients: Array<{name: string}>, \n    nutrition: {calories: number; protein: number}\n  ): ('글루텐프리' | '저탄수화물' | '고단백' | '저지방' | '비건' | '케토' | '저칼로리')[] {\n    const info: ('글루텐프리' | '저탄수화물' | '고단백' | '저지방' | '비건' | '케토' | '저칼로리')[] = [];\n    \n    if (nutrition.protein > 15) info.push('고단백');\n    if (nutrition.calories < 200) info.push('저칼로리');\n    \n    const hasAnimalProducts = ingredients.some(ing => \n      ['계란', '우삼겹', '훈제연어'].includes(ing.name)\n    );\n    if (!hasAnimalProducts) info.push('비건');\n    \n    return info;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
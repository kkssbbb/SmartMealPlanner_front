{"ast":null,"code":"import _objectSpread from\"/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _FastRecommendationEngine;// ⚡ 초고속 추천 엔진 (메모이제이션 + 인덱싱 + 캐싱)\nimport{getRecipesByGoal}from'../data/recipeData';export class FastRecommendationEngine{// 10분\nconstructor(){this.nutritionCache={};this.combinationCache={};this.fastCache=new Map();this.CACHE_TTL=10*60*1000;}static getInstance(){if(!FastRecommendationEngine.instance){FastRecommendationEngine.instance=new FastRecommendationEngine();}return FastRecommendationEngine.instance;}// 🚀 초고속 추천 생성 (메인 함수)\nasync generateFastRecommendations(userProfile,calorieCalculation,monthlyBudget){const startTime=performance.now();// 캐시 키 생성\nconst cacheKey=this.generateCacheKey(userProfile,calorieCalculation,monthlyBudget);// 캐시 확인 (디버깅 추가)\nconst cached=this.getValidCache(cacheKey);if(cached){var _cached$data$recommen;console.log('⚡ 초고속 캐시 히트! 즉시 반환');console.log('📊 캐시된 레시피 수:',((_cached$data$recommen=cached.data.recommendedRecipes)===null||_cached$data$recommen===void 0?void 0:_cached$data$recommen.length)||0);// 빈 배열이면 캐시 무효화\nif(!cached.data.recommendedRecipes||cached.data.recommendedRecipes.length===0){console.log('⚠️ 빈 캐시 감지! 캐시 삭제 후 새로 생성');this.fastCache.delete(cacheKey);}else{return cached.data;}}console.log('🚀 초고속 추천 엔진 시작...');// 1단계: 목표 레시피 가져오기 (에러 처리를 위해 try 밖에서 선언)\nlet goalRecipes=[];try{goalRecipes=await getRecipesByGoal(userProfile.goal||'maintenance');console.log('📋 1단계: 목표 레시피 로드 완료:',goalRecipes.length+'개');if(goalRecipes.length===0){console.log('⚠️ 목표 레시피가 없음! 폴백 모드로 전환');return this.generateSimpleFallback([],monthlyBudget);}// 2단계: 고속 전처리 (영양소 + 비용)\nconst preprocessedRecipes=await this.fastPreprocessRecipes(goalRecipes);console.log('📋 2단계: 전처리 완료:',preprocessedRecipes.length+'개');// 3단계: 예산 기반 빠른 필터링\nconst affordableRecipes=this.fastBudgetFilter(preprocessedRecipes,monthlyBudget);console.log('📋 3단계: 예산 필터링 완료:',affordableRecipes.length+'개');// 4단계: 초고속 조합 찾기 (휴리스틱 알고리즘)\nconst optimalRecipes=this.findOptimalCombinationFast(affordableRecipes,monthlyBudget,calorieCalculation);console.log('📋 4단계: 최적 조합 선택 완료:',optimalRecipes.length+'개');// 5단계: 예산 분석\nconst budgetAnalysis=this.generateBudgetAnalysis(optimalRecipes,monthlyBudget);const result={recommendedRecipes:optimalRecipes,budgetAnalysis};// 결과 캐싱\nthis.setCache(cacheKey,result);const endTime=performance.now();console.log(\"\\u2705 \\uCD08\\uACE0\\uC18D \\uCD94\\uCC9C \\uC644\\uB8CC: \".concat(Math.round(endTime-startTime),\"ms\"));return result;}catch(error){console.error('❌ 초고속 추천 실패:',error);// 🔄 단순 폴백 (가장 빠른 방식)\nreturn this.generateSimpleFallback(goalRecipes,monthlyBudget);}}// 🔥 고속 전처리 (배치 처리 + 메모이제이션)\nasync fastPreprocessRecipes(recipes){const processed=[];for(const recipe of recipes){// 캐시된 영양소 정보 확인\nlet nutrition=this.nutritionCache[recipe.id];if(!nutrition){// 간단한 추정치 사용 (실제 계산 대신)\nnutrition=this.estimateNutrition(recipe);this.nutritionCache[recipe.id]=nutrition;}processed.push({recipe,nutrition,monthlyCost:nutrition.monthlyCost,score:this.calculateSimpleScore(recipe,nutrition)});}return processed;}// ⚡ 간단한 영양소 추정 (복잡한 계산 대신)\nestimateNutrition(recipe){var _recipe$tags;// 레시피 이름과 태그 기반 빠른 추정\nconst name=recipe.name.toLowerCase();const tags=((_recipe$tags=recipe.tags)===null||_recipe$tags===void 0?void 0:_recipe$tags.join(' ').toLowerCase())||'';let calories=400;// 기본값\nlet protein=20;let carbs=50;let fat=15;let monthlyCost=45000;// 기본 월 비용\n// 키워드 기반 빠른 조정\nif(name.includes('닭')||name.includes('계란')||tags.includes('고단백')){protein+=15;calories+=50;monthlyCost+=15000;}if(name.includes('샐러드')||name.includes('야채')||tags.includes('저칼로리')){calories-=150;carbs-=20;monthlyCost-=10000;}if(name.includes('밥')||name.includes('면')||name.includes('파스타')){carbs+=30;calories+=100;}if(name.includes('등심')||name.includes('소고기')){protein+=20;fat+=10;calories+=100;monthlyCost+=25000;}return{calories,protein,carbs,fat,monthlyCost};}// ⚡ 간단한 점수 계산\ncalculateSimpleScore(recipe,nutrition){var _recipe$userRatings;const viewScore=Math.min((((_recipe$userRatings=recipe.userRatings)===null||_recipe$userRatings===void 0?void 0:_recipe$userRatings.overall)||0)*20,100);const nutritionScore=Math.min(nutrition.protein*2+nutrition.calories*0.1,100);const costScore=Math.max(100-nutrition.monthlyCost/1000,0);return viewScore*0.4+nutritionScore*0.4+costScore*0.2;}// ⚡ 예산 기반 빠른 필터링\nfastBudgetFilter(recipes,monthlyBudget){const maxCostPerRecipe=monthlyBudget*0.6;// 한 레시피가 예산의 60% 이하\nreturn recipes.filter(item=>item.monthlyCost<=maxCostPerRecipe).sort((a,b)=>b.score-a.score)// 점수순 정렬\n.slice(0,20);// 상위 20개만 처리\n}// 🚀 초고속 조합 찾기 (휴리스틱 알고리즘)\nfindOptimalCombinationFast(affordableRecipes,monthlyBudget,calorieCalculation){console.log('🔍 조합 찾기 시작:',{available:affordableRecipes.length,budget:monthlyBudget});if(affordableRecipes.length===0){console.log('⚠️ 사용 가능한 레시피가 없음');return[];}// 🔥 휴리스틱: 가격-성능비 기반 그리디 알고리즘\nlet remainingBudget=monthlyBudget;const selectedRecipes=[];// 가격 대비 점수 기준으로 재정렬\nconst costEffectiveRecipes=affordableRecipes.map(item=>_objectSpread(_objectSpread({},item),{},{efficiency:item.monthlyCost>0?item.score/(item.monthlyCost/10000):item.score// 0으로 나누기 방지\n})).sort((a,b)=>b.efficiency-a.efficiency);console.log('💰 가격-성능비 상위 5개:',costEffectiveRecipes.slice(0,5).map(item=>({name:item.recipe.name,cost:item.monthlyCost,score:item.score,efficiency:item.efficiency})));// 그리디 선택 (최대 3개)\nfor(const item of costEffectiveRecipes){if(selectedRecipes.length>=3)break;const canAfford=item.monthlyCost<=remainingBudget*0.9;// 90% 예산 사용\nconsole.log(\"\\uD83D\\uDD0D \\uAC80\\uD1A0: \".concat(item.recipe.name,\" (\\uBE44\\uC6A9: \").concat(item.monthlyCost,\", \\uC608\\uC0B0\\uC5EC\\uC720: \").concat(remainingBudget,\", \\uAC00\\uB2A5: \").concat(canAfford,\")\"));if(canAfford){selectedRecipes.push(item.recipe);remainingBudget-=item.monthlyCost;console.log(\"\\u2705 \\uC120\\uD0DD: \".concat(item.recipe.name));}}// 예산 제한이 너무 엄격하면 완화\nif(selectedRecipes.length===0){console.log('⚠️ 예산 조건 완화해서 재시도');for(const item of costEffectiveRecipes.slice(0,3)){selectedRecipes.push(item.recipe);if(selectedRecipes.length>=3)break;}}// 최소 1개는 선택 보장\nif(selectedRecipes.length===0&&affordableRecipes.length>0){selectedRecipes.push(affordableRecipes[0].recipe);console.log('🛡️ 최소 1개 보장:',affordableRecipes[0].recipe.name);}console.log(\"\\u26A1 \\uACE0\\uC18D \\uC870\\uD569 \\uC644\\uB8CC: \".concat(selectedRecipes.length,\"\\uAC1C \\uB808\\uC2DC\\uD53C \\uC120\\uD0DD\"));return selectedRecipes;}// 📊 예산 분석 생성\ngenerateBudgetAnalysis(recipes,monthlyBudget){const costBreakdown=recipes.map(recipe=>{const nutrition=this.nutritionCache[recipe.id];const monthlyCost=(nutrition===null||nutrition===void 0?void 0:nutrition.monthlyCost)||45000;return{recipeId:recipe.id,recipeName:recipe.name,monthlyCost,costPercentage:monthlyCost/monthlyBudget*100};});const totalEstimatedCost=costBreakdown.reduce((sum,item)=>sum+item.monthlyCost,0);const budgetUsagePercentage=totalEstimatedCost/monthlyBudget*100;return{totalEstimatedCost,budgetUsagePercentage,costBreakdown};}// 🔄 단순 폴백 (최후 수단)\nasync generateSimpleFallback(recipes,monthlyBudget){console.log('⚠️ 단순 폴백 모드');let fallbackRecipes=[];if(recipes.length>0){// 레시피가 있으면 인기순으로 선택\nfallbackRecipes=recipes.sort((a,b)=>{var _b$userRatings,_a$userRatings;return(((_b$userRatings=b.userRatings)===null||_b$userRatings===void 0?void 0:_b$userRatings.overall)||0)-(((_a$userRatings=a.userRatings)===null||_a$userRatings===void 0?void 0:_a$userRatings.overall)||0);}).slice(0,3);}else{// 레시피가 없으면 기본 더미 레시피 생성\nconsole.log('📋 더미 레시피 생성');fallbackRecipes=[{id:'fallback-breakfast',name:'추천 아침 레시피',description:'균형잡힌 아침 식사를 위한 추천 레시피',image:'https://images.unsplash.com/photo-1533089860892-a7c6f0a88666?q=80&w=400',cookingTime:15,difficulty:'easy',instructions:['재료 준비','조리하기','완성'],tags:['건강','간편'],mealType:'breakfast',goalFit:['maintenance'],userRatings:{overall:4.0,taste:4.0,difficulty:4.0,nutrition:4.0,reviewCount:100}},{id:'fallback-lunch',name:'추천 점심 레시피',description:'든든한 점심 식사를 위한 추천 레시피',image:'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400',cookingTime:20,difficulty:'easy',instructions:['재료 준비','조리하기','완성'],tags:['건강','균형'],mealType:'lunch',goalFit:['maintenance'],userRatings:{overall:4.0,taste:4.0,difficulty:4.0,nutrition:4.0,reviewCount:100}},{id:'fallback-dinner',name:'추천 저녁 레시피',description:'건강한 저녁 식사를 위한 추천 레시피',image:'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?q=80&w=400',cookingTime:25,difficulty:'easy',instructions:['재료 준비','조리하기','완성'],tags:['건강','영양'],mealType:'dinner',goalFit:['maintenance'],userRatings:{overall:4.0,taste:4.0,difficulty:4.0,nutrition:4.0,reviewCount:100}}];}const estimatedCostPerRecipe=Math.round(monthlyBudget/Math.max(fallbackRecipes.length,1));console.log('📋 폴백 레시피 생성 완료:',fallbackRecipes.length+'개');return{recommendedRecipes:fallbackRecipes,budgetAnalysis:{totalEstimatedCost:monthlyBudget,budgetUsagePercentage:100,costBreakdown:fallbackRecipes.map(recipe=>({recipeId:recipe.id,recipeName:recipe.name,monthlyCost:estimatedCostPerRecipe,costPercentage:Math.round(100/fallbackRecipes.length)}))}};}// 🔧 유틸리티 메소드들\ngenerateCacheKey(userProfile,calorieCalculation,budget){return\"\".concat(userProfile.goal,\"_\").concat(Math.round(calorieCalculation.tdee),\"_\").concat(budget);}getValidCache(key){const cached=this.fastCache.get(key);if(!cached)return null;if(Date.now()-cached.timestamp>this.CACHE_TTL){this.fastCache.delete(key);return null;}return cached;}setCache(key,data){this.fastCache.set(key,{data,timestamp:Date.now(),hash:key});}// 🧹 캐시 관리\nclearCache(){this.fastCache.clear();this.nutritionCache={};this.combinationCache={};console.log('🧹 초고속 엔진 캐시 클리어 완료');}// 📊 성능 통계\ngetStats(){return{cacheSize:this.fastCache.size,nutritionCacheSize:Object.keys(this.nutritionCache).length,hitRate:0// 실제로는 히트율 계산\n};}}// 싱글톤 인스턴스\n_FastRecommendationEngine=FastRecommendationEngine;FastRecommendationEngine.instance=void 0;export const fastRecommendationEngine=FastRecommendationEngine.getInstance();","map":{"version":3,"names":["getRecipesByGoal","FastRecommendationEngine","constructor","nutritionCache","combinationCache","fastCache","Map","CACHE_TTL","getInstance","instance","generateFastRecommendations","userProfile","calorieCalculation","monthlyBudget","startTime","performance","now","cacheKey","generateCacheKey","cached","getValidCache","_cached$data$recommen","console","log","data","recommendedRecipes","length","delete","goalRecipes","goal","generateSimpleFallback","preprocessedRecipes","fastPreprocessRecipes","affordableRecipes","fastBudgetFilter","optimalRecipes","findOptimalCombinationFast","budgetAnalysis","generateBudgetAnalysis","result","setCache","endTime","concat","Math","round","error","recipes","processed","recipe","nutrition","id","estimateNutrition","push","monthlyCost","score","calculateSimpleScore","_recipe$tags","name","toLowerCase","tags","join","calories","protein","carbs","fat","includes","_recipe$userRatings","viewScore","min","userRatings","overall","nutritionScore","costScore","max","maxCostPerRecipe","filter","item","sort","a","b","slice","available","budget","remainingBudget","selectedRecipes","costEffectiveRecipes","map","_objectSpread","efficiency","cost","canAfford","costBreakdown","recipeId","recipeName","costPercentage","totalEstimatedCost","reduce","sum","budgetUsagePercentage","fallbackRecipes","_b$userRatings","_a$userRatings","description","image","cookingTime","difficulty","instructions","mealType","goalFit","taste","reviewCount","estimatedCostPerRecipe","tdee","key","get","Date","timestamp","set","hash","clearCache","clear","getStats","cacheSize","size","nutritionCacheSize","Object","keys","hitRate","_FastRecommendationEngine","fastRecommendationEngine"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/fastRecommendationEngine.ts"],"sourcesContent":["// ⚡ 초고속 추천 엔진 (메모이제이션 + 인덱싱 + 캐싱)\nimport { Recipe, UserProfile, CalorieCalculation } from '../types';\nimport { getRecipesByGoal } from '../data/recipeData';\n\ninterface FastCacheEntry {\n  data: any;\n  timestamp: number;\n  hash: string;\n}\n\ninterface NutritionCache {\n  [recipeId: string]: {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n    monthlyCost: number;\n  };\n}\n\ninterface RecipeCombinationCache {\n  [hash: string]: {\n    recipes: Recipe[];\n    totalCost: number;\n    nutritionScore: number;\n  };\n}\n\nexport class FastRecommendationEngine {\n  private static instance: FastRecommendationEngine;\n  private nutritionCache: NutritionCache = {};\n  private combinationCache: RecipeCombinationCache = {};\n  private fastCache = new Map<string, FastCacheEntry>();\n  private readonly CACHE_TTL = 10 * 60 * 1000; // 10분\n\n  private constructor() {}\n\n  static getInstance(): FastRecommendationEngine {\n    if (!FastRecommendationEngine.instance) {\n      FastRecommendationEngine.instance = new FastRecommendationEngine();\n    }\n    return FastRecommendationEngine.instance;\n  }\n\n  // 🚀 초고속 추천 생성 (메인 함수)\n  async generateFastRecommendations(\n    userProfile: UserProfile,\n    calorieCalculation: CalorieCalculation,\n    monthlyBudget: number\n  ): Promise<{\n    recommendedRecipes: Recipe[];\n    budgetAnalysis: {\n      totalEstimatedCost: number;\n      budgetUsagePercentage: number;\n      costBreakdown: Array<{\n        recipeId: string;\n        recipeName: string;\n        monthlyCost: number;\n        costPercentage: number;\n      }>;\n    };\n  }> {\n    const startTime = performance.now();\n    \n    // 캐시 키 생성\n    const cacheKey = this.generateCacheKey(userProfile, calorieCalculation, monthlyBudget);\n    \n    // 캐시 확인 (디버깅 추가)\n    const cached = this.getValidCache(cacheKey);\n    if (cached) {\n      console.log('⚡ 초고속 캐시 히트! 즉시 반환');\n      console.log('📊 캐시된 레시피 수:', cached.data.recommendedRecipes?.length || 0);\n      \n      // 빈 배열이면 캐시 무효화\n      if (!cached.data.recommendedRecipes || cached.data.recommendedRecipes.length === 0) {\n        console.log('⚠️ 빈 캐시 감지! 캐시 삭제 후 새로 생성');\n        this.fastCache.delete(cacheKey);\n      } else {\n        return cached.data;\n      }\n    }\n\n    console.log('🚀 초고속 추천 엔진 시작...');\n\n    // 1단계: 목표 레시피 가져오기 (에러 처리를 위해 try 밖에서 선언)\n    let goalRecipes: Recipe[] = [];\n    \n    try {\n      goalRecipes = await getRecipesByGoal(userProfile.goal || 'maintenance');\n      console.log('📋 1단계: 목표 레시피 로드 완료:', goalRecipes.length + '개');\n      \n      if (goalRecipes.length === 0) {\n        console.log('⚠️ 목표 레시피가 없음! 폴백 모드로 전환');\n        return this.generateSimpleFallback([], monthlyBudget);\n      }\n      \n      // 2단계: 고속 전처리 (영양소 + 비용)\n      const preprocessedRecipes = await this.fastPreprocessRecipes(goalRecipes);\n      console.log('📋 2단계: 전처리 완료:', preprocessedRecipes.length + '개');\n      \n      // 3단계: 예산 기반 빠른 필터링\n      const affordableRecipes = this.fastBudgetFilter(preprocessedRecipes, monthlyBudget);\n      console.log('📋 3단계: 예산 필터링 완료:', affordableRecipes.length + '개');\n      \n      // 4단계: 초고속 조합 찾기 (휴리스틱 알고리즘)\n      const optimalRecipes = this.findOptimalCombinationFast(\n        affordableRecipes, \n        monthlyBudget,\n        calorieCalculation\n      );\n      console.log('📋 4단계: 최적 조합 선택 완료:', optimalRecipes.length + '개');\n\n      // 5단계: 예산 분석\n      const budgetAnalysis = this.generateBudgetAnalysis(optimalRecipes, monthlyBudget);\n\n      const result = {\n        recommendedRecipes: optimalRecipes,\n        budgetAnalysis\n      };\n\n      // 결과 캐싱\n      this.setCache(cacheKey, result);\n\n      const endTime = performance.now();\n      console.log(`✅ 초고속 추천 완료: ${Math.round(endTime - startTime)}ms`);\n      \n      return result;\n\n    } catch (error) {\n      console.error('❌ 초고속 추천 실패:', error);\n      \n      // 🔄 단순 폴백 (가장 빠른 방식)\n      return this.generateSimpleFallback(goalRecipes, monthlyBudget);\n    }\n  }\n\n  // 🔥 고속 전처리 (배치 처리 + 메모이제이션)\n  private async fastPreprocessRecipes(recipes: Recipe[]): Promise<Array<{\n    recipe: Recipe;\n    nutrition: { calories: number; protein: number; carbs: number; fat: number };\n    monthlyCost: number;\n    score: number;\n  }>> {\n    const processed = [];\n    \n    for (const recipe of recipes) {\n      // 캐시된 영양소 정보 확인\n      let nutrition = this.nutritionCache[recipe.id];\n      if (!nutrition) {\n        // 간단한 추정치 사용 (실제 계산 대신)\n        nutrition = this.estimateNutrition(recipe);\n        this.nutritionCache[recipe.id] = nutrition;\n      }\n\n      processed.push({\n        recipe,\n        nutrition,\n        monthlyCost: nutrition.monthlyCost,\n        score: this.calculateSimpleScore(recipe, nutrition)\n      });\n    }\n\n    return processed;\n  }\n\n  // ⚡ 간단한 영양소 추정 (복잡한 계산 대신)\n  private estimateNutrition(recipe: Recipe): {\n    calories: number; protein: number; carbs: number; fat: number; monthlyCost: number;\n  } {\n    // 레시피 이름과 태그 기반 빠른 추정\n    const name = recipe.name.toLowerCase();\n    const tags = recipe.tags?.join(' ').toLowerCase() || '';\n    \n    let calories = 400; // 기본값\n    let protein = 20;\n    let carbs = 50;\n    let fat = 15;\n    let monthlyCost = 45000; // 기본 월 비용\n\n    // 키워드 기반 빠른 조정\n    if (name.includes('닭') || name.includes('계란') || tags.includes('고단백')) {\n      protein += 15;\n      calories += 50;\n      monthlyCost += 15000;\n    }\n    \n    if (name.includes('샐러드') || name.includes('야채') || tags.includes('저칼로리')) {\n      calories -= 150;\n      carbs -= 20;\n      monthlyCost -= 10000;\n    }\n    \n    if (name.includes('밥') || name.includes('면') || name.includes('파스타')) {\n      carbs += 30;\n      calories += 100;\n    }\n\n    if (name.includes('등심') || name.includes('소고기')) {\n      protein += 20;\n      fat += 10;\n      calories += 100;\n      monthlyCost += 25000;\n    }\n\n    return { calories, protein, carbs, fat, monthlyCost };\n  }\n\n  // ⚡ 간단한 점수 계산\n  private calculateSimpleScore(recipe: Recipe, nutrition: any): number {\n    const viewScore = Math.min((recipe.userRatings?.overall || 0) * 20, 100);\n    const nutritionScore = Math.min(nutrition.protein * 2 + nutrition.calories * 0.1, 100);\n    const costScore = Math.max(100 - (nutrition.monthlyCost / 1000), 0);\n    \n    return (viewScore * 0.4 + nutritionScore * 0.4 + costScore * 0.2);\n  }\n\n  // ⚡ 예산 기반 빠른 필터링\n  private fastBudgetFilter(\n    recipes: Array<{ recipe: Recipe; nutrition: any; monthlyCost: number; score: number }>,\n    monthlyBudget: number\n  ) {\n    const maxCostPerRecipe = monthlyBudget * 0.6; // 한 레시피가 예산의 60% 이하\n    \n    return recipes\n      .filter(item => item.monthlyCost <= maxCostPerRecipe)\n      .sort((a, b) => b.score - a.score) // 점수순 정렬\n      .slice(0, 20); // 상위 20개만 처리\n  }\n\n  // 🚀 초고속 조합 찾기 (휴리스틱 알고리즘)\n  private findOptimalCombinationFast(\n    affordableRecipes: Array<{ recipe: Recipe; nutrition: any; monthlyCost: number; score: number }>,\n    monthlyBudget: number,\n    calorieCalculation: CalorieCalculation\n  ): Recipe[] {\n    console.log('🔍 조합 찾기 시작:', {\n      available: affordableRecipes.length,\n      budget: monthlyBudget\n    });\n\n    if (affordableRecipes.length === 0) {\n      console.log('⚠️ 사용 가능한 레시피가 없음');\n      return [];\n    }\n\n    // 🔥 휴리스틱: 가격-성능비 기반 그리디 알고리즘\n    let remainingBudget = monthlyBudget;\n    const selectedRecipes: Recipe[] = [];\n\n    // 가격 대비 점수 기준으로 재정렬\n    const costEffectiveRecipes = affordableRecipes\n      .map(item => ({\n        ...item,\n        efficiency: item.monthlyCost > 0 ? (item.score / (item.monthlyCost / 10000)) : item.score // 0으로 나누기 방지\n      }))\n      .sort((a, b) => b.efficiency - a.efficiency);\n\n    console.log('💰 가격-성능비 상위 5개:', costEffectiveRecipes.slice(0, 5).map(item => ({\n      name: item.recipe.name,\n      cost: item.monthlyCost,\n      score: item.score,\n      efficiency: item.efficiency\n    })));\n\n    // 그리디 선택 (최대 3개)\n    for (const item of costEffectiveRecipes) {\n      if (selectedRecipes.length >= 3) break;\n      \n      const canAfford = item.monthlyCost <= remainingBudget * 0.9; // 90% 예산 사용\n      console.log(`🔍 검토: ${item.recipe.name} (비용: ${item.monthlyCost}, 예산여유: ${remainingBudget}, 가능: ${canAfford})`);\n      \n      if (canAfford) {\n        selectedRecipes.push(item.recipe);\n        remainingBudget -= item.monthlyCost;\n        console.log(`✅ 선택: ${item.recipe.name}`);\n      }\n    }\n\n    // 예산 제한이 너무 엄격하면 완화\n    if (selectedRecipes.length === 0) {\n      console.log('⚠️ 예산 조건 완화해서 재시도');\n      for (const item of costEffectiveRecipes.slice(0, 3)) {\n        selectedRecipes.push(item.recipe);\n        if (selectedRecipes.length >= 3) break;\n      }\n    }\n\n    // 최소 1개는 선택 보장\n    if (selectedRecipes.length === 0 && affordableRecipes.length > 0) {\n      selectedRecipes.push(affordableRecipes[0].recipe);\n      console.log('🛡️ 최소 1개 보장:', affordableRecipes[0].recipe.name);\n    }\n\n    console.log(`⚡ 고속 조합 완료: ${selectedRecipes.length}개 레시피 선택`);\n    return selectedRecipes;\n  }\n\n  // 📊 예산 분석 생성\n  private generateBudgetAnalysis(recipes: Recipe[], monthlyBudget: number) {\n    const costBreakdown = recipes.map(recipe => {\n      const nutrition = this.nutritionCache[recipe.id];\n      const monthlyCost = nutrition?.monthlyCost || 45000;\n      \n      return {\n        recipeId: recipe.id,\n        recipeName: recipe.name,\n        monthlyCost,\n        costPercentage: (monthlyCost / monthlyBudget) * 100\n      };\n    });\n\n    const totalEstimatedCost = costBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n    const budgetUsagePercentage = (totalEstimatedCost / monthlyBudget) * 100;\n\n    return {\n      totalEstimatedCost,\n      budgetUsagePercentage,\n      costBreakdown\n    };\n  }\n\n  // 🔄 단순 폴백 (최후 수단)\n  private async generateSimpleFallback(recipes: Recipe[], monthlyBudget: number) {\n    console.log('⚠️ 단순 폴백 모드');\n    \n    let fallbackRecipes: Recipe[] = [];\n    \n    if (recipes.length > 0) {\n      // 레시피가 있으면 인기순으로 선택\n      fallbackRecipes = recipes\n        .sort((a, b) => (b.userRatings?.overall || 0) - (a.userRatings?.overall || 0))\n        .slice(0, 3);\n    } else {\n      // 레시피가 없으면 기본 더미 레시피 생성\n      console.log('📋 더미 레시피 생성');\n      fallbackRecipes = [\n        {\n          id: 'fallback-breakfast',\n          name: '추천 아침 레시피',\n          description: '균형잡힌 아침 식사를 위한 추천 레시피',\n          image: 'https://images.unsplash.com/photo-1533089860892-a7c6f0a88666?q=80&w=400',\n          cookingTime: 15,\n          difficulty: 'easy' as any,\n          instructions: ['재료 준비', '조리하기', '완성'],\n          tags: ['건강', '간편'],\n          mealType: 'breakfast' as any,\n          goalFit: ['maintenance'] as any,\n          userRatings: { overall: 4.0, taste: 4.0, difficulty: 4.0, nutrition: 4.0, reviewCount: 100 }\n        },\n        {\n          id: 'fallback-lunch',\n          name: '추천 점심 레시피',\n          description: '든든한 점심 식사를 위한 추천 레시피',\n          image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400',\n          cookingTime: 20,\n          difficulty: 'easy' as any,\n          instructions: ['재료 준비', '조리하기', '완성'],\n          tags: ['건강', '균형'],\n          mealType: 'lunch' as any,\n          goalFit: ['maintenance'] as any,\n          userRatings: { overall: 4.0, taste: 4.0, difficulty: 4.0, nutrition: 4.0, reviewCount: 100 }\n        },\n        {\n          id: 'fallback-dinner',\n          name: '추천 저녁 레시피',\n          description: '건강한 저녁 식사를 위한 추천 레시피',\n          image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?q=80&w=400',\n          cookingTime: 25,\n          difficulty: 'easy' as any,\n          instructions: ['재료 준비', '조리하기', '완성'],\n          tags: ['건강', '영양'],\n          mealType: 'dinner' as any,\n          goalFit: ['maintenance'] as any,\n          userRatings: { overall: 4.0, taste: 4.0, difficulty: 4.0, nutrition: 4.0, reviewCount: 100 }\n        }\n      ];\n    }\n\n    const estimatedCostPerRecipe = Math.round(monthlyBudget / Math.max(fallbackRecipes.length, 1));\n    \n    console.log('📋 폴백 레시피 생성 완료:', fallbackRecipes.length + '개');\n    \n    return {\n      recommendedRecipes: fallbackRecipes,\n      budgetAnalysis: {\n        totalEstimatedCost: monthlyBudget,\n        budgetUsagePercentage: 100,\n        costBreakdown: fallbackRecipes.map(recipe => ({\n          recipeId: recipe.id,\n          recipeName: recipe.name,\n          monthlyCost: estimatedCostPerRecipe,\n          costPercentage: Math.round(100 / fallbackRecipes.length)\n        }))\n      }\n    };\n  }\n\n  // 🔧 유틸리티 메소드들\n  private generateCacheKey(userProfile: UserProfile, calorieCalculation: CalorieCalculation, budget: number): string {\n    return `${userProfile.goal}_${Math.round(calorieCalculation.tdee)}_${budget}`;\n  }\n\n  private getValidCache(key: string): FastCacheEntry | null {\n    const cached = this.fastCache.get(key);\n    if (!cached) return null;\n    \n    if (Date.now() - cached.timestamp > this.CACHE_TTL) {\n      this.fastCache.delete(key);\n      return null;\n    }\n    \n    return cached;\n  }\n\n  private setCache(key: string, data: any): void {\n    this.fastCache.set(key, {\n      data,\n      timestamp: Date.now(),\n      hash: key\n    });\n  }\n\n  // 🧹 캐시 관리\n  clearCache(): void {\n    this.fastCache.clear();\n    this.nutritionCache = {};\n    this.combinationCache = {};\n    console.log('🧹 초고속 엔진 캐시 클리어 완료');\n  }\n\n  // 📊 성능 통계\n  getStats(): { cacheSize: number; nutritionCacheSize: number; hitRate: number } {\n    return {\n      cacheSize: this.fastCache.size,\n      nutritionCacheSize: Object.keys(this.nutritionCache).length,\n      hitRate: 0 // 실제로는 히트율 계산\n    };\n  }\n}\n\n// 싱글톤 인스턴스\nexport const fastRecommendationEngine = FastRecommendationEngine.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
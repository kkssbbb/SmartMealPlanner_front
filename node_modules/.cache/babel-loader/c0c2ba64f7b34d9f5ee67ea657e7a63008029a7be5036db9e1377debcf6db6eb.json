{"ast":null,"code":"var _RealTimeRecipeLoader;\nimport { MankaeRecipeProcessor } from '../utils/recipeDataProcessor';\nimport { csvProcessor } from '../utils/csvProcessor';\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor';\nimport { getRecipeIngredientsData } from './recipeIngredients';\n\n// 🔥 실시간 만개의 레시피 데이터 로더\nclass RealTimeRecipeLoader {\n  constructor() {\n    this.processor = new MankaeRecipeProcessor();\n    this.cachedRecipes = new Map();\n    this.isLoading = false;\n  }\n  static getInstance() {\n    if (!RealTimeRecipeLoader.instance) {\n      RealTimeRecipeLoader.instance = new RealTimeRecipeLoader();\n    }\n    return RealTimeRecipeLoader.instance;\n  }\n\n  // 🎯 목표별 레시피 조회 (고성능 최적화)\n  async getRecipesByGoal(goal) {\n    // 캐시 확인 (빈 배열 감지)\n    if (this.cachedRecipes.has(goal)) {\n      const cached = this.cachedRecipes.get(goal);\n      console.log(`⚡ 캐시된 ${goal} 레시피: ${cached.length}개`);\n\n      // 빈 캐시면 무효화\n      if (cached.length === 0) {\n        console.log('⚠️ 빈 캐시 감지! 삭제하고 재로드');\n        this.cachedRecipes.delete(goal);\n      } else {\n        return cached;\n      }\n    }\n    try {\n      console.log(`🚀 ${goal} 고성능 레시피 로딩 시작...`);\n      const startTime = performance.now();\n\n      // 🔥 최적화된 프로세서 사용 (스트리밍 + 청크) - 더 많은 레시피 확보\n      console.log(`📥 ${goal} 레시피 요청 시작 (최대 200개)`);\n      const rawRecipes = await optimizedCSVProcessor.getRecipesByGoal(goal, 200);\n      console.log(`📤 ${goal} 원본 레시피 수신: ${rawRecipes.length}개`);\n\n      // 🔄 배치 처리로 변환 최적화\n      const convertedRecipes = [];\n      const batchSize = 10;\n      for (let i = 0; i < rawRecipes.length; i += batchSize) {\n        const batch = rawRecipes.slice(i, i + batchSize);\n\n        // 배치 단위로 병렬 처리\n        const batchResults = await Promise.allSettled(batch.map(async rawRecipe => {\n          try {\n            const recipe = this.processor.processRecipe(rawRecipe);\n            console.log(`🔧 처리 중인 레시피: ${rawRecipe.CKG_NM || rawRecipe.RCP_TTL}`);\n            return recipe;\n          } catch (error) {\n            console.log(`❌ 레시피 처리 에러: ${rawRecipe.CKG_NM || rawRecipe.RCP_TTL}`, error);\n            throw error; // null 대신 에러를 던져서 rejected 상태로 만듦\n          }\n        }));\n\n        // 🔥 상세 디버깅: 변환 과정 전체 추적\n        let batchSuccessCount = 0;\n        let batchGoalMatchCount = 0;\n        batchResults.forEach((result, index) => {\n          if (result.status === 'fulfilled' && result.value) {\n            var _recipe$goalFit, _recipe$goalFit2;\n            const recipe = result.value;\n            batchSuccessCount++;\n            console.log(`🔄 레시피 변환 성공 ${i + index + 1}: ${recipe.name}`);\n            console.log(`   - 목표 분류: [${((_recipe$goalFit = recipe.goalFit) === null || _recipe$goalFit === void 0 ? void 0 : _recipe$goalFit.join(', ')) || '없음'}]`);\n            console.log(`   - 목표 포함 여부: ${(_recipe$goalFit2 = recipe.goalFit) !== null && _recipe$goalFit2 !== void 0 && _recipe$goalFit2.includes(goal) ? '✅ 포함' : '❌ 제외'}`);\n            if (recipe.goalFit && recipe.goalFit.includes(goal)) {\n              convertedRecipes.push(recipe);\n              batchGoalMatchCount++;\n              console.log(`✅ ${goal} 최종 매칭: ${recipe.name}`);\n            }\n          } else if (result.status === 'rejected') {\n            console.log(`❌ 레시피 처리 실패 ${i + index + 1}:`, result.reason);\n          } else if (result.status === 'fulfilled' && !result.value) {\n            console.log(`⚠️ 레시피 처리 결과가 null ${i + index + 1}`);\n          }\n        });\n        console.log(`📊 배치 결과: ${batchSuccessCount}개 처리, ${batchGoalMatchCount}개 ${goal} 매칭`);\n        console.log(`📈 누적 결과: ${convertedRecipes.length}개 ${goal} 레시피`);\n\n        // UI 응답성을 위한 마이크로 태스크\n        if (i % (batchSize * 3) === 0) {\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n      }\n\n      // 품질 점수로 정렬\n      const sortedRecipes = convertedRecipes.sort((a, b) => {\n        var _b$userRatings, _a$userRatings;\n        return (((_b$userRatings = b.userRatings) === null || _b$userRatings === void 0 ? void 0 : _b$userRatings.overall) || 0) - (((_a$userRatings = a.userRatings) === null || _a$userRatings === void 0 ? void 0 : _a$userRatings.overall) || 0);\n      });\n\n      // 캐시 저장\n      this.cachedRecipes.set(goal, sortedRecipes);\n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      console.log(`✅ ${goal} 레시피 ${sortedRecipes.length}개 고성능 로드 완료 (${loadTime}ms)`);\n      return sortedRecipes;\n    } catch (error) {\n      console.error(`❌ ${goal} 레시피 로드 실패:`, error);\n\n      // 🔄 폴백: 기존 방식\n      console.log(`⚠️ ${goal} 폴백 모드로 전환`);\n      return this.fallbackGetRecipesByGoal(goal);\n    }\n  }\n\n  // 🔄 폴백 메소드 (기존 방식)\n  async fallbackGetRecipesByGoal(goal) {\n    const goalKeywords = {\n      weight_loss: ['다이어트', '저칼로리', '살빼기'],\n      muscle_gain: ['단백질', '근육', '고단백'],\n      maintenance: ['건강', '균형', '일상']\n    };\n    console.log(`🔄 폴백 모드: ${goal} 레시피 로드 시작`);\n    try {\n      const rawRecipes = await csvProcessor.getRecipesByKeywords(goalKeywords[goal], 30);\n      console.log(`📋 폴백: CSV에서 ${rawRecipes.length}개 레시피 찾음`);\n      const convertedRecipes = [];\n      for (const rawRecipe of rawRecipes) {\n        try {\n          const recipe = this.processor.processRecipe(rawRecipe);\n          if (recipe.goalFit.includes(goal)) {\n            convertedRecipes.push(recipe);\n          }\n        } catch (error) {\n          continue;\n        }\n      }\n      return convertedRecipes.sort((a, b) => {\n        var _b$userRatings2, _a$userRatings2;\n        return (((_b$userRatings2 = b.userRatings) === null || _b$userRatings2 === void 0 ? void 0 : _b$userRatings2.overall) || 0) - (((_a$userRatings2 = a.userRatings) === null || _a$userRatings2 === void 0 ? void 0 : _a$userRatings2.overall) || 0);\n      });\n    } catch (error) {\n      console.error(`❌ ${goal} 폴백 로드도 실패:`, error);\n      return [];\n    }\n  }\n\n  // 🔥 인기 레시피 조회\n  async getPopularRecipes(limit = 30) {\n    const cacheKey = `popular_${limit}`;\n    if (this.cachedRecipes.has(cacheKey)) {\n      return this.cachedRecipes.get(cacheKey);\n    }\n    try {\n      const rawRecipes = await csvProcessor.getPopularRecipes(limit);\n      const convertedRecipes = rawRecipes.map(raw => {\n        try {\n          return this.processor.processRecipe(raw);\n        } catch {\n          return null;\n        }\n      }).filter(recipe => recipe !== null);\n      this.cachedRecipes.set(cacheKey, convertedRecipes);\n      return convertedRecipes;\n    } catch (error) {\n      console.error('❌ 인기 레시피 로드 실패:', error);\n      return [];\n    }\n  }\n\n  // 🔍 레시피 검색\n  async searchRecipes(query) {\n    try {\n      const rawRecipes = await csvProcessor.searchRecipes(query, 50);\n      return rawRecipes.map(raw => {\n        try {\n          return this.processor.processRecipe(raw);\n        } catch {\n          return null;\n        }\n      }).filter(recipe => recipe !== null);\n    } catch (error) {\n      console.error('❌ 레시피 검색 실패:', error);\n      return [];\n    }\n  }\n\n  // 📊 통계 정보\n  async getStatistics() {\n    return csvProcessor.getStatistics();\n  }\n\n  // 🔄 캐시 클리어\n  clearCache() {\n    this.cachedRecipes.clear();\n    console.log('🧹 레시피 캐시 클리어 완료');\n  }\n\n  // 🔍 캐시 및 시스템 상태 진단\n  async diagnoseCacheStatus() {\n    var _this$cachedRecipes$g, _this$cachedRecipes$g2, _this$cachedRecipes$g3;\n    console.log('🔍 === 레시피 시스템 진단 시작 ===');\n    console.log(`📦 캐시된 목표별 레시피 수:`);\n    console.log(`   - weight_loss: ${((_this$cachedRecipes$g = this.cachedRecipes.get('weight_loss')) === null || _this$cachedRecipes$g === void 0 ? void 0 : _this$cachedRecipes$g.length) || 0}개`);\n    console.log(`   - muscle_gain: ${((_this$cachedRecipes$g2 = this.cachedRecipes.get('muscle_gain')) === null || _this$cachedRecipes$g2 === void 0 ? void 0 : _this$cachedRecipes$g2.length) || 0}개`);\n    console.log(`   - maintenance: ${((_this$cachedRecipes$g3 = this.cachedRecipes.get('maintenance')) === null || _this$cachedRecipes$g3 === void 0 ? void 0 : _this$cachedRecipes$g3.length) || 0}개`);\n\n    // 빈 캐시 강제 재로딩\n    for (const goal of ['weight_loss', 'muscle_gain', 'maintenance']) {\n      const cached = this.cachedRecipes.get(goal);\n      if (!cached || cached.length === 0) {\n        console.log(`🔄 ${goal} 캐시가 비어있음, 강제 재로딩...`);\n        const result = await this.getRecipesByGoal(goal);\n        console.log(`✅ ${goal} 재로딩 완료: ${result.length}개`);\n      }\n    }\n    console.log('🔍 === 진단 완료 ===');\n  }\n\n  // 🔍 레시피 찾기 (공개 메소드)\n  findRecipeById(recipeId) {\n    const allRecipes = [...(this.cachedRecipes.get('weight_loss') || []), ...(this.cachedRecipes.get('muscle_gain') || []), ...(this.cachedRecipes.get('maintenance') || [])];\n    return allRecipes.find(r => r.id === recipeId);\n  }\n}\n\n// 🎯 전역 레시피 로더 인스턴스\n_RealTimeRecipeLoader = RealTimeRecipeLoader;\nRealTimeRecipeLoader.instance = void 0;\nexport const recipeLoader = RealTimeRecipeLoader.getInstance();\n\n// 🍳 레시피별 재료 조회 (실제 쿠팡 상품 매핑)\nexport const getRecipeIngredients = recipeId => {\n  console.log('🔍 getRecipeIngredients 호출됨, recipeId:', recipeId);\n\n  // 레시피 ID로 실제 레시피 찾기\n  const recipe = recipeLoader.findRecipeById(recipeId);\n  let searchTerm = recipeId;\n  if (recipe) {\n    console.log('📋 찾은 레시피:', recipe.name);\n    // 레시피 이름을 검색어로 사용\n    searchTerm = recipe.name;\n  }\n  const ingredients = getRecipeIngredientsData(searchTerm);\n  console.log('📦 매칭된 재료 수:', ingredients.length);\n  console.log('🛒 재료 목록:', ingredients.map(ing => ing.product.name));\n  return ingredients;\n};\n\n// 🧮 레시피 영양소 계산\nexport const calculateRecipeNutrition = recipeId => {\n  const ingredients = getRecipeIngredients(recipeId);\n  return ingredients.reduce((total, ingredient) => {\n    const product = ingredient.product;\n    const ratio = ingredient.quantity / 100; // 100g 기준\n\n    return {\n      calories: total.calories + product.nutrition.calories * ratio,\n      carb: total.carb + product.nutrition.carb * ratio,\n      protein: total.protein + product.nutrition.protein * ratio,\n      fat: total.fat + product.nutrition.fat * ratio,\n      sodium: total.sodium + product.nutrition.sodium * ratio,\n      sugar: total.sugar + product.nutrition.sugar * ratio\n    };\n  }, {\n    calories: 0,\n    carb: 0,\n    protein: 0,\n    fat: 0,\n    sodium: 0,\n    sugar: 0\n  });\n};\n\n// 🎯 통합 레시피 조회 함수 (비동기)\nexport const getRecipesByGoal = async goal => {\n  return recipeLoader.getRecipesByGoal(goal);\n};\n\n// 🔥 기존 동기 함수를 위한 임시 래퍼 (점진적 마이그레이션)\nexport const getRecipesByGoalSync = goal => {\n  console.warn('⚠️ getRecipesByGoalSync는 deprecated입니다. getRecipesByGoal을 사용하세요.');\n  return [];\n};\n\n// 📊 레시피 시스템 초기화\nexport const initializeRecipeSystem = async () => {\n  console.log('🚀 만개의 레시피 시스템 초기화 중...');\n  try {\n    // 통계 정보 로드\n    const stats = await recipeLoader.getStatistics();\n    console.log('📊 레시피 통계:', stats);\n\n    // 각 목표별 레시피 프리로드 (백그라운드)\n    Promise.all([recipeLoader.getRecipesByGoal('weight_loss'), recipeLoader.getRecipesByGoal('muscle_gain'), recipeLoader.getRecipesByGoal('maintenance')]).then(() => {\n      console.log('✅ 모든 레시피 프리로드 완료');\n    });\n  } catch (error) {\n    console.error('❌ 레시피 시스템 초기화 실패:', error);\n  }\n};\n\n// 앱 시작시 자동 초기화\nif (typeof window !== 'undefined') {\n  initializeRecipeSystem();\n}","map":{"version":3,"names":["MankaeRecipeProcessor","csvProcessor","optimizedCSVProcessor","getRecipeIngredientsData","RealTimeRecipeLoader","constructor","processor","cachedRecipes","Map","isLoading","getInstance","instance","getRecipesByGoal","goal","has","cached","get","console","log","length","delete","startTime","performance","now","rawRecipes","convertedRecipes","batchSize","i","batch","slice","batchResults","Promise","allSettled","map","rawRecipe","recipe","processRecipe","CKG_NM","RCP_TTL","error","batchSuccessCount","batchGoalMatchCount","forEach","result","index","status","value","_recipe$goalFit","_recipe$goalFit2","name","goalFit","join","includes","push","reason","resolve","setTimeout","sortedRecipes","sort","a","b","_b$userRatings","_a$userRatings","userRatings","overall","set","endTime","loadTime","Math","round","fallbackGetRecipesByGoal","goalKeywords","weight_loss","muscle_gain","maintenance","getRecipesByKeywords","_b$userRatings2","_a$userRatings2","getPopularRecipes","limit","cacheKey","raw","filter","searchRecipes","query","getStatistics","clearCache","clear","diagnoseCacheStatus","_this$cachedRecipes$g","_this$cachedRecipes$g2","_this$cachedRecipes$g3","findRecipeById","recipeId","allRecipes","find","r","id","_RealTimeRecipeLoader","recipeLoader","getRecipeIngredients","searchTerm","ingredients","ing","product","calculateRecipeNutrition","reduce","total","ingredient","ratio","quantity","calories","nutrition","carb","protein","fat","sodium","sugar","getRecipesByGoalSync","warn","initializeRecipeSystem","stats","all","then","window"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/data/recipeData.ts"],"sourcesContent":["import { Recipe, RecipeIngredient } from '../types';\nimport { MankaeRecipeProcessor } from '../utils/recipeDataProcessor';\nimport { csvProcessor } from '../utils/csvProcessor';\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor';\nimport { getRecipeIngredientsData } from './recipeIngredients';\n\n// 🔥 실시간 만개의 레시피 데이터 로더\nclass RealTimeRecipeLoader {\n  private static instance: RealTimeRecipeLoader;\n  private processor = new MankaeRecipeProcessor();\n  private cachedRecipes: Map<string, Recipe[]> = new Map();\n  private isLoading = false;\n  \n  private constructor() {}\n  \n  static getInstance(): RealTimeRecipeLoader {\n    if (!RealTimeRecipeLoader.instance) {\n      RealTimeRecipeLoader.instance = new RealTimeRecipeLoader();\n    }\n    return RealTimeRecipeLoader.instance;\n  }\n  \n  // 🎯 목표별 레시피 조회 (고성능 최적화)\n  async getRecipesByGoal(goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Promise<Recipe[]> {\n    // 캐시 확인 (빈 배열 감지)\n    if (this.cachedRecipes.has(goal)) {\n      const cached = this.cachedRecipes.get(goal)!;\n      console.log(`⚡ 캐시된 ${goal} 레시피: ${cached.length}개`);\n      \n      // 빈 캐시면 무효화\n      if (cached.length === 0) {\n        console.log('⚠️ 빈 캐시 감지! 삭제하고 재로드');\n        this.cachedRecipes.delete(goal);\n      } else {\n        return cached;\n      }\n    }\n    \n    try {\n      console.log(`🚀 ${goal} 고성능 레시피 로딩 시작...`);\n      const startTime = performance.now();\n      \n      // 🔥 최적화된 프로세서 사용 (스트리밍 + 청크) - 더 많은 레시피 확보\n      console.log(`📥 ${goal} 레시피 요청 시작 (최대 200개)`);\n      const rawRecipes = await optimizedCSVProcessor.getRecipesByGoal(goal, 200);\n      console.log(`📤 ${goal} 원본 레시피 수신: ${rawRecipes.length}개`);\n      \n      // 🔄 배치 처리로 변환 최적화\n      const convertedRecipes: Recipe[] = [];\n      const batchSize = 10;\n      \n      for (let i = 0; i < rawRecipes.length; i += batchSize) {\n        const batch = rawRecipes.slice(i, i + batchSize);\n        \n        // 배치 단위로 병렬 처리\n        const batchResults = await Promise.allSettled(\n          batch.map(async (rawRecipe) => {\n            try {\n              const recipe = this.processor.processRecipe(rawRecipe);\n              console.log(`🔧 처리 중인 레시피: ${rawRecipe.CKG_NM || rawRecipe.RCP_TTL}`);\n              return recipe;\n            } catch (error) {\n              console.log(`❌ 레시피 처리 에러: ${rawRecipe.CKG_NM || rawRecipe.RCP_TTL}`, error);\n              throw error; // null 대신 에러를 던져서 rejected 상태로 만듦\n            }\n          })\n        );\n        \n        // 🔥 상세 디버깅: 변환 과정 전체 추적\n        let batchSuccessCount = 0;\n        let batchGoalMatchCount = 0;\n\n        batchResults.forEach((result, index) => {\n          if (result.status === 'fulfilled' && result.value) {\n            const recipe = result.value;\n            batchSuccessCount++;\n\n            console.log(`🔄 레시피 변환 성공 ${i + index + 1}: ${recipe.name}`);\n            console.log(`   - 목표 분류: [${recipe.goalFit?.join(', ') || '없음'}]`);\n            console.log(`   - 목표 포함 여부: ${recipe.goalFit?.includes(goal) ? '✅ 포함' : '❌ 제외'}`);\n\n            if (recipe.goalFit && recipe.goalFit.includes(goal)) {\n              convertedRecipes.push(recipe);\n              batchGoalMatchCount++;\n              console.log(`✅ ${goal} 최종 매칭: ${recipe.name}`);\n            }\n           } else if (result.status === 'rejected') {\n             console.log(`❌ 레시피 처리 실패 ${i + index + 1}:`, result.reason);\n           } else if (result.status === 'fulfilled' && !result.value) {\n             console.log(`⚠️ 레시피 처리 결과가 null ${i + index + 1}`);\n           }\n        });\n\n        console.log(`📊 배치 결과: ${batchSuccessCount}개 처리, ${batchGoalMatchCount}개 ${goal} 매칭`);\n        console.log(`📈 누적 결과: ${convertedRecipes.length}개 ${goal} 레시피`);\n        \n        // UI 응답성을 위한 마이크로 태스크\n        if (i % (batchSize * 3) === 0) {\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n      }\n      \n      // 품질 점수로 정렬\n      const sortedRecipes = convertedRecipes.sort((a, b) => \n        (b.userRatings?.overall || 0) - (a.userRatings?.overall || 0)\n      );\n      \n      // 캐시 저장\n      this.cachedRecipes.set(goal, sortedRecipes);\n      \n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      \n      console.log(`✅ ${goal} 레시피 ${sortedRecipes.length}개 고성능 로드 완료 (${loadTime}ms)`);\n      \n      return sortedRecipes;\n      \n    } catch (error) {\n      console.error(`❌ ${goal} 레시피 로드 실패:`, error);\n      \n      // 🔄 폴백: 기존 방식\n      console.log(`⚠️ ${goal} 폴백 모드로 전환`);\n      return this.fallbackGetRecipesByGoal(goal);\n    }\n  }\n  \n  // 🔄 폴백 메소드 (기존 방식)\n  private async fallbackGetRecipesByGoal(goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Promise<Recipe[]> {\n    const goalKeywords = {\n      weight_loss: ['다이어트', '저칼로리', '살빼기'],\n      muscle_gain: ['단백질', '근육', '고단백'],\n      maintenance: ['건강', '균형', '일상']\n    };\n    \n    console.log(`🔄 폴백 모드: ${goal} 레시피 로드 시작`);\n    \n    try {\n      const rawRecipes = await csvProcessor.getRecipesByKeywords(goalKeywords[goal], 30);\n      console.log(`📋 폴백: CSV에서 ${rawRecipes.length}개 레시피 찾음`);\n      const convertedRecipes: Recipe[] = [];\n      \n      for (const rawRecipe of rawRecipes) {\n        try {\n          const recipe = this.processor.processRecipe(rawRecipe);\n          if (recipe.goalFit.includes(goal)) {\n            convertedRecipes.push(recipe);\n          }\n        } catch (error) {\n          continue;\n        }\n      }\n      \n      return convertedRecipes.sort((a, b) => \n        (b.userRatings?.overall || 0) - (a.userRatings?.overall || 0)\n      );\n    } catch (error) {\n      console.error(`❌ ${goal} 폴백 로드도 실패:`, error);\n      return [];\n    }\n  }\n  \n  // 🔥 인기 레시피 조회\n  async getPopularRecipes(limit: number = 30): Promise<Recipe[]> {\n    const cacheKey = `popular_${limit}`;\n    \n    if (this.cachedRecipes.has(cacheKey)) {\n      return this.cachedRecipes.get(cacheKey)!;\n    }\n    \n    try {\n      const rawRecipes = await csvProcessor.getPopularRecipes(limit);\n      const convertedRecipes = rawRecipes\n        .map(raw => {\n          try {\n            return this.processor.processRecipe(raw);\n          } catch {\n            return null;\n          }\n        })\n        .filter((recipe): recipe is Recipe => recipe !== null);\n      \n      this.cachedRecipes.set(cacheKey, convertedRecipes);\n      return convertedRecipes;\n      \n    } catch (error) {\n      console.error('❌ 인기 레시피 로드 실패:', error);\n      return [];\n    }\n  }\n  \n  // 🔍 레시피 검색\n  async searchRecipes(query: string): Promise<Recipe[]> {\n    try {\n      const rawRecipes = await csvProcessor.searchRecipes(query, 50);\n      \n      return rawRecipes\n        .map(raw => {\n          try {\n            return this.processor.processRecipe(raw);\n          } catch {\n            return null;\n          }\n        })\n        .filter((recipe): recipe is Recipe => recipe !== null);\n        \n    } catch (error) {\n      console.error('❌ 레시피 검색 실패:', error);\n      return [];\n    }\n  }\n  \n  // 📊 통계 정보\n  async getStatistics() {\n    return csvProcessor.getStatistics();\n  }\n  \n  // 🔄 캐시 클리어\n  clearCache() {\n    this.cachedRecipes.clear();\n    console.log('🧹 레시피 캐시 클리어 완료');\n  }\n\n  // 🔍 캐시 및 시스템 상태 진단\n  async diagnoseCacheStatus(): Promise<void> {\n    console.log('🔍 === 레시피 시스템 진단 시작 ===');\n    console.log(`📦 캐시된 목표별 레시피 수:`);\n    console.log(`   - weight_loss: ${this.cachedRecipes.get('weight_loss')?.length || 0}개`);\n    console.log(`   - muscle_gain: ${this.cachedRecipes.get('muscle_gain')?.length || 0}개`);\n    console.log(`   - maintenance: ${this.cachedRecipes.get('maintenance')?.length || 0}개`);\n    \n    // 빈 캐시 강제 재로딩\n    for (const goal of ['weight_loss', 'muscle_gain', 'maintenance'] as const) {\n      const cached = this.cachedRecipes.get(goal);\n      if (!cached || cached.length === 0) {\n        console.log(`🔄 ${goal} 캐시가 비어있음, 강제 재로딩...`);\n        const result = await this.getRecipesByGoal(goal);\n        console.log(`✅ ${goal} 재로딩 완료: ${result.length}개`);\n      }\n    }\n    \n    console.log('🔍 === 진단 완료 ===');\n  }\n  \n  // 🔍 레시피 찾기 (공개 메소드)\n  findRecipeById(recipeId: string): Recipe | undefined {\n    const allRecipes = [\n      ...(this.cachedRecipes.get('weight_loss') || []),\n      ...(this.cachedRecipes.get('muscle_gain') || []),\n      ...(this.cachedRecipes.get('maintenance') || [])\n    ];\n    \n    return allRecipes.find(r => r.id === recipeId);\n  }\n}\n\n// 🎯 전역 레시피 로더 인스턴스\nexport const recipeLoader = RealTimeRecipeLoader.getInstance();\n\n// 🍳 레시피별 재료 조회 (실제 쿠팡 상품 매핑)\nexport const getRecipeIngredients = (recipeId: string): RecipeIngredient[] => {\n  console.log('🔍 getRecipeIngredients 호출됨, recipeId:', recipeId);\n  \n  // 레시피 ID로 실제 레시피 찾기\n  const recipe = recipeLoader.findRecipeById(recipeId);\n  let searchTerm = recipeId;\n  \n  if (recipe) {\n    console.log('📋 찾은 레시피:', recipe.name);\n    // 레시피 이름을 검색어로 사용\n    searchTerm = recipe.name;\n  }\n  \n  const ingredients = getRecipeIngredientsData(searchTerm);\n  console.log('📦 매칭된 재료 수:', ingredients.length);\n  console.log('🛒 재료 목록:', ingredients.map(ing => ing.product.name));\n  return ingredients;\n};\n\n// 🧮 레시피 영양소 계산\nexport const calculateRecipeNutrition = (recipeId: string) => {\n  const ingredients = getRecipeIngredients(recipeId);\n  \n  return ingredients.reduce((total, ingredient) => {\n    const product = ingredient.product;\n    const ratio = ingredient.quantity / 100; // 100g 기준\n    \n    return {\n      calories: total.calories + (product.nutrition.calories * ratio),\n      carb: total.carb + (product.nutrition.carb * ratio),\n      protein: total.protein + (product.nutrition.protein * ratio),\n      fat: total.fat + (product.nutrition.fat * ratio),\n      sodium: total.sodium + (product.nutrition.sodium * ratio),\n      sugar: total.sugar + (product.nutrition.sugar * ratio),\n    };\n  }, {\n    calories: 0,\n    carb: 0,\n    protein: 0,\n    fat: 0,\n    sodium: 0,\n    sugar: 0,\n  });\n};\n\n// 🎯 통합 레시피 조회 함수 (비동기)\nexport const getRecipesByGoal = async (goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Promise<Recipe[]> => {\n  return recipeLoader.getRecipesByGoal(goal);\n};\n\n// 🔥 기존 동기 함수를 위한 임시 래퍼 (점진적 마이그레이션)\nexport const getRecipesByGoalSync = (goal: 'weight_loss' | 'muscle_gain' | 'maintenance'): Recipe[] => {\n  console.warn('⚠️ getRecipesByGoalSync는 deprecated입니다. getRecipesByGoal을 사용하세요.');\n  return [];\n};\n\n// 📊 레시피 시스템 초기화\nexport const initializeRecipeSystem = async () => {\n  console.log('🚀 만개의 레시피 시스템 초기화 중...');\n  \n  try {\n    // 통계 정보 로드\n    const stats = await recipeLoader.getStatistics();\n    console.log('📊 레시피 통계:', stats);\n    \n    // 각 목표별 레시피 프리로드 (백그라운드)\n    Promise.all([\n      recipeLoader.getRecipesByGoal('weight_loss'),\n      recipeLoader.getRecipesByGoal('muscle_gain'),\n      recipeLoader.getRecipesByGoal('maintenance')\n    ]).then(() => {\n      console.log('✅ 모든 레시피 프리로드 완료');\n    });\n    \n  } catch (error) {\n    console.error('❌ 레시피 시스템 초기화 실패:', error);\n  }\n};\n\n// 앱 시작시 자동 초기화\nif (typeof window !== 'undefined') {\n  initializeRecipeSystem();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
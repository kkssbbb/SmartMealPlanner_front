{"ast":null,"code":"var _FastRecommendationEngine;\n// ⚡ 초고속 추천 엔진 (메모이제이션 + 인덱싱 + 캐싱)\n\nimport { getRecipesByGoal } from '../data/recipeData';\nexport class FastRecommendationEngine {\n  // 10분\n\n  constructor() {\n    this.nutritionCache = {};\n    this.combinationCache = {};\n    this.fastCache = new Map();\n    this.CACHE_TTL = 10 * 60 * 1000;\n  }\n  static getInstance() {\n    if (!FastRecommendationEngine.instance) {\n      FastRecommendationEngine.instance = new FastRecommendationEngine();\n    }\n    return FastRecommendationEngine.instance;\n  }\n\n  // 🚀 초고속 추천 생성 (메인 함수)\n  async generateFastRecommendations(userProfile, calorieCalculation, monthlyBudget) {\n    const startTime = performance.now();\n\n    // 캐시 키 생성\n    const cacheKey = this.generateCacheKey(userProfile, calorieCalculation, monthlyBudget);\n\n    // 캐시 확인 (디버깅 추가)\n    const cached = this.getValidCache(cacheKey);\n    if (cached) {\n      var _cached$data$recommen;\n      console.log('⚡ 초고속 캐시 히트! 즉시 반환');\n      console.log('📊 캐시된 레시피 수:', ((_cached$data$recommen = cached.data.recommendedRecipes) === null || _cached$data$recommen === void 0 ? void 0 : _cached$data$recommen.length) || 0);\n\n      // 빈 배열이면 캐시 무효화\n      if (!cached.data.recommendedRecipes || cached.data.recommendedRecipes.length === 0) {\n        console.log('⚠️ 빈 캐시 감지! 캐시 삭제 후 새로 생성');\n        this.fastCache.delete(cacheKey);\n      } else {\n        return cached.data;\n      }\n    }\n    console.log('🚀 초고속 추천 엔진 시작...');\n\n    // 1단계: 목표 레시피 가져오기 (에러 처리를 위해 try 밖에서 선언)\n    let goalRecipes = [];\n    try {\n      goalRecipes = await getRecipesByGoal(userProfile.goal || 'maintenance');\n      console.log('📋 1단계: 목표 레시피 로드 완료:', goalRecipes.length + '개');\n      if (goalRecipes.length === 0) {\n        console.log('⚠️ 목표 레시피가 없음! 폴백 모드로 전환');\n        return this.generateSimpleFallback([], monthlyBudget);\n      }\n\n      // 2단계: 고속 전처리 (영양소 + 비용)\n      const preprocessedRecipes = await this.fastPreprocessRecipes(goalRecipes);\n      console.log('📋 2단계: 전처리 완료:', preprocessedRecipes.length + '개');\n\n      // 3단계: 예산 기반 빠른 필터링\n      const affordableRecipes = this.fastBudgetFilter(preprocessedRecipes, monthlyBudget);\n      console.log('📋 3단계: 예산 필터링 완료:', affordableRecipes.length + '개');\n\n      // 4단계: 초고속 조합 찾기 (휴리스틱 알고리즘)\n      const optimalRecipes = this.findOptimalCombinationFast(affordableRecipes, monthlyBudget, calorieCalculation);\n      console.log('📋 4단계: 최적 조합 선택 완료:', optimalRecipes.length + '개');\n\n      // 5단계: 예산 분석\n      const budgetAnalysis = this.generateBudgetAnalysis(optimalRecipes, monthlyBudget);\n      const result = {\n        recommendedRecipes: optimalRecipes,\n        budgetAnalysis\n      };\n\n      // 결과 캐싱\n      this.setCache(cacheKey, result);\n      const endTime = performance.now();\n      console.log(`✅ 초고속 추천 완료: ${Math.round(endTime - startTime)}ms`);\n      return result;\n    } catch (error) {\n      console.error('❌ 초고속 추천 실패:', error);\n\n      // 🔄 단순 폴백 (가장 빠른 방식)\n      return this.generateSimpleFallback(goalRecipes, monthlyBudget);\n    }\n  }\n\n  // 🔥 고속 전처리 (배치 처리 + 메모이제이션)\n  async fastPreprocessRecipes(recipes) {\n    const processed = [];\n    for (const recipe of recipes) {\n      // 캐시된 영양소 정보 확인\n      let nutrition = this.nutritionCache[recipe.id];\n      if (!nutrition) {\n        // 간단한 추정치 사용 (실제 계산 대신)\n        nutrition = this.estimateNutrition(recipe);\n        this.nutritionCache[recipe.id] = nutrition;\n      }\n      processed.push({\n        recipe,\n        nutrition,\n        monthlyCost: nutrition.monthlyCost,\n        score: this.calculateSimpleScore(recipe, nutrition)\n      });\n    }\n    return processed;\n  }\n\n  // ⚡ 간단한 영양소 추정 (복잡한 계산 대신)\n  estimateNutrition(recipe) {\n    var _recipe$tags;\n    // 레시피 이름과 태그 기반 빠른 추정\n    const name = recipe.name.toLowerCase();\n    const tags = ((_recipe$tags = recipe.tags) === null || _recipe$tags === void 0 ? void 0 : _recipe$tags.join(' ').toLowerCase()) || '';\n    let calories = 400; // 기본값\n    let protein = 20;\n    let carbs = 50;\n    let fat = 15;\n    let monthlyCost = 45000; // 기본 월 비용\n\n    // 키워드 기반 빠른 조정\n    if (name.includes('닭') || name.includes('계란') || tags.includes('고단백')) {\n      protein += 15;\n      calories += 50;\n      monthlyCost += 15000;\n    }\n    if (name.includes('샐러드') || name.includes('야채') || tags.includes('저칼로리')) {\n      calories -= 150;\n      carbs -= 20;\n      monthlyCost -= 10000;\n    }\n    if (name.includes('밥') || name.includes('면') || name.includes('파스타')) {\n      carbs += 30;\n      calories += 100;\n    }\n    if (name.includes('등심') || name.includes('소고기')) {\n      protein += 20;\n      fat += 10;\n      calories += 100;\n      monthlyCost += 25000;\n    }\n    return {\n      calories,\n      protein,\n      carbs,\n      fat,\n      monthlyCost\n    };\n  }\n\n  // ⚡ 간단한 점수 계산\n  calculateSimpleScore(recipe, nutrition) {\n    var _recipe$userRatings;\n    const viewScore = Math.min((((_recipe$userRatings = recipe.userRatings) === null || _recipe$userRatings === void 0 ? void 0 : _recipe$userRatings.overall) || 0) * 20, 100);\n    const nutritionScore = Math.min(nutrition.protein * 2 + nutrition.calories * 0.1, 100);\n    const costScore = Math.max(100 - nutrition.monthlyCost / 1000, 0);\n    return viewScore * 0.4 + nutritionScore * 0.4 + costScore * 0.2;\n  }\n\n  // ⚡ 예산 기반 빠른 필터링\n  fastBudgetFilter(recipes, monthlyBudget) {\n    const maxCostPerRecipe = monthlyBudget * 0.6; // 한 레시피가 예산의 60% 이하\n\n    return recipes.filter(item => item.monthlyCost <= maxCostPerRecipe).sort((a, b) => b.score - a.score) // 점수순 정렬\n    .slice(0, 20); // 상위 20개만 처리\n  }\n\n  // 🚀 초고속 조합 찾기 (휴리스틱 알고리즘)\n  findOptimalCombinationFast(affordableRecipes, monthlyBudget, calorieCalculation) {\n    console.log('🔍 조합 찾기 시작:', {\n      available: affordableRecipes.length,\n      budget: monthlyBudget\n    });\n    if (affordableRecipes.length === 0) {\n      console.log('⚠️ 사용 가능한 레시피가 없음');\n      return [];\n    }\n\n    // 🔥 휴리스틱: 가격-성능비 기반 그리디 알고리즘\n    let remainingBudget = monthlyBudget;\n    const selectedRecipes = [];\n\n    // 가격 대비 점수 기준으로 재정렬\n    const costEffectiveRecipes = affordableRecipes.map(item => ({\n      ...item,\n      efficiency: item.monthlyCost > 0 ? item.score / (item.monthlyCost / 10000) : item.score // 0으로 나누기 방지\n    })).sort((a, b) => b.efficiency - a.efficiency);\n    console.log('💰 가격-성능비 상위 5개:', costEffectiveRecipes.slice(0, 5).map(item => ({\n      name: item.recipe.name,\n      cost: item.monthlyCost,\n      score: item.score,\n      efficiency: item.efficiency\n    })));\n\n    // 그리디 선택 (최대 3개)\n    for (const item of costEffectiveRecipes) {\n      if (selectedRecipes.length >= 3) break;\n      const canAfford = item.monthlyCost <= remainingBudget * 0.9; // 90% 예산 사용\n      console.log(`🔍 검토: ${item.recipe.name} (비용: ${item.monthlyCost}, 예산여유: ${remainingBudget}, 가능: ${canAfford})`);\n      if (canAfford) {\n        selectedRecipes.push(item.recipe);\n        remainingBudget -= item.monthlyCost;\n        console.log(`✅ 선택: ${item.recipe.name}`);\n      }\n    }\n\n    // 예산 제한이 너무 엄격하면 완화\n    if (selectedRecipes.length === 0) {\n      console.log('⚠️ 예산 조건 완화해서 재시도');\n      for (const item of costEffectiveRecipes.slice(0, 3)) {\n        selectedRecipes.push(item.recipe);\n        if (selectedRecipes.length >= 3) break;\n      }\n    }\n\n    // 최소 1개는 선택 보장\n    if (selectedRecipes.length === 0 && affordableRecipes.length > 0) {\n      selectedRecipes.push(affordableRecipes[0].recipe);\n      console.log('🛡️ 최소 1개 보장:', affordableRecipes[0].recipe.name);\n    }\n    console.log(`⚡ 고속 조합 완료: ${selectedRecipes.length}개 레시피 선택`);\n    return selectedRecipes;\n  }\n\n  // 📊 예산 분석 생성\n  generateBudgetAnalysis(recipes, monthlyBudget) {\n    const costBreakdown = recipes.map(recipe => {\n      const nutrition = this.nutritionCache[recipe.id];\n      const monthlyCost = (nutrition === null || nutrition === void 0 ? void 0 : nutrition.monthlyCost) || 45000;\n      return {\n        recipeId: recipe.id,\n        recipeName: recipe.name,\n        monthlyCost,\n        costPercentage: monthlyCost / monthlyBudget * 100\n      };\n    });\n    const totalEstimatedCost = costBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n    const budgetUsagePercentage = totalEstimatedCost / monthlyBudget * 100;\n    return {\n      totalEstimatedCost,\n      budgetUsagePercentage,\n      costBreakdown\n    };\n  }\n\n  // 🔄 단순 폴백 (최후 수단)\n  async generateSimpleFallback(recipes, monthlyBudget) {\n    console.log('⚠️ 단순 폴백 모드');\n    let fallbackRecipes = [];\n    if (recipes.length > 0) {\n      // 레시피가 있으면 인기순으로 선택\n      fallbackRecipes = recipes.sort((a, b) => {\n        var _b$userRatings, _a$userRatings;\n        return (((_b$userRatings = b.userRatings) === null || _b$userRatings === void 0 ? void 0 : _b$userRatings.overall) || 0) - (((_a$userRatings = a.userRatings) === null || _a$userRatings === void 0 ? void 0 : _a$userRatings.overall) || 0);\n      }).slice(0, 3);\n    } else {\n      // 레시피가 없으면 기본 더미 레시피 생성\n      console.log('📋 더미 레시피 생성');\n      fallbackRecipes = [{\n        id: 'fallback-breakfast',\n        name: '추천 아침 레시피',\n        description: '균형잡힌 아침 식사를 위한 추천 레시피',\n        image: 'https://images.unsplash.com/photo-1533089860892-a7c6f0a88666?q=80&w=400',\n        cookingTime: 15,\n        difficulty: 'easy',\n        instructions: ['재료 준비', '조리하기', '완성'],\n        tags: ['건강', '간편'],\n        mealType: 'breakfast',\n        goalFit: ['maintenance'],\n        userRatings: {\n          overall: 4.0,\n          taste: 4.0,\n          difficulty: 4.0,\n          nutrition: 4.0,\n          reviewCount: 100\n        }\n      }, {\n        id: 'fallback-lunch',\n        name: '추천 점심 레시피',\n        description: '든든한 점심 식사를 위한 추천 레시피',\n        image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400',\n        cookingTime: 20,\n        difficulty: 'easy',\n        instructions: ['재료 준비', '조리하기', '완성'],\n        tags: ['건강', '균형'],\n        mealType: 'lunch',\n        goalFit: ['maintenance'],\n        userRatings: {\n          overall: 4.0,\n          taste: 4.0,\n          difficulty: 4.0,\n          nutrition: 4.0,\n          reviewCount: 100\n        }\n      }, {\n        id: 'fallback-dinner',\n        name: '추천 저녁 레시피',\n        description: '건강한 저녁 식사를 위한 추천 레시피',\n        image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?q=80&w=400',\n        cookingTime: 25,\n        difficulty: 'easy',\n        instructions: ['재료 준비', '조리하기', '완성'],\n        tags: ['건강', '영양'],\n        mealType: 'dinner',\n        goalFit: ['maintenance'],\n        userRatings: {\n          overall: 4.0,\n          taste: 4.0,\n          difficulty: 4.0,\n          nutrition: 4.0,\n          reviewCount: 100\n        }\n      }];\n    }\n    const estimatedCostPerRecipe = Math.round(monthlyBudget / Math.max(fallbackRecipes.length, 1));\n    console.log('📋 폴백 레시피 생성 완료:', fallbackRecipes.length + '개');\n    return {\n      recommendedRecipes: fallbackRecipes,\n      budgetAnalysis: {\n        totalEstimatedCost: monthlyBudget,\n        budgetUsagePercentage: 100,\n        costBreakdown: fallbackRecipes.map(recipe => ({\n          recipeId: recipe.id,\n          recipeName: recipe.name,\n          monthlyCost: estimatedCostPerRecipe,\n          costPercentage: Math.round(100 / fallbackRecipes.length)\n        }))\n      }\n    };\n  }\n\n  // 🔧 유틸리티 메소드들\n  generateCacheKey(userProfile, calorieCalculation, budget) {\n    return `${userProfile.goal}_${Math.round(calorieCalculation.tdee)}_${budget}`;\n  }\n  getValidCache(key) {\n    const cached = this.fastCache.get(key);\n    if (!cached) return null;\n    if (Date.now() - cached.timestamp > this.CACHE_TTL) {\n      this.fastCache.delete(key);\n      return null;\n    }\n    return cached;\n  }\n  setCache(key, data) {\n    this.fastCache.set(key, {\n      data,\n      timestamp: Date.now(),\n      hash: key\n    });\n  }\n\n  // 🧹 캐시 관리\n  clearCache() {\n    this.fastCache.clear();\n    this.nutritionCache = {};\n    this.combinationCache = {};\n    console.log('🧹 초고속 엔진 캐시 클리어 완료');\n  }\n\n  // 📊 성능 통계\n  getStats() {\n    return {\n      cacheSize: this.fastCache.size,\n      nutritionCacheSize: Object.keys(this.nutritionCache).length,\n      hitRate: 0 // 실제로는 히트율 계산\n    };\n  }\n}\n\n// 싱글톤 인스턴스\n_FastRecommendationEngine = FastRecommendationEngine;\nFastRecommendationEngine.instance = void 0;\nexport const fastRecommendationEngine = FastRecommendationEngine.getInstance();","map":{"version":3,"names":["getRecipesByGoal","FastRecommendationEngine","constructor","nutritionCache","combinationCache","fastCache","Map","CACHE_TTL","getInstance","instance","generateFastRecommendations","userProfile","calorieCalculation","monthlyBudget","startTime","performance","now","cacheKey","generateCacheKey","cached","getValidCache","_cached$data$recommen","console","log","data","recommendedRecipes","length","delete","goalRecipes","goal","generateSimpleFallback","preprocessedRecipes","fastPreprocessRecipes","affordableRecipes","fastBudgetFilter","optimalRecipes","findOptimalCombinationFast","budgetAnalysis","generateBudgetAnalysis","result","setCache","endTime","Math","round","error","recipes","processed","recipe","nutrition","id","estimateNutrition","push","monthlyCost","score","calculateSimpleScore","_recipe$tags","name","toLowerCase","tags","join","calories","protein","carbs","fat","includes","_recipe$userRatings","viewScore","min","userRatings","overall","nutritionScore","costScore","max","maxCostPerRecipe","filter","item","sort","a","b","slice","available","budget","remainingBudget","selectedRecipes","costEffectiveRecipes","map","efficiency","cost","canAfford","costBreakdown","recipeId","recipeName","costPercentage","totalEstimatedCost","reduce","sum","budgetUsagePercentage","fallbackRecipes","_b$userRatings","_a$userRatings","description","image","cookingTime","difficulty","instructions","mealType","goalFit","taste","reviewCount","estimatedCostPerRecipe","tdee","key","get","Date","timestamp","set","hash","clearCache","clear","getStats","cacheSize","size","nutritionCacheSize","Object","keys","hitRate","_FastRecommendationEngine","fastRecommendationEngine"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/fastRecommendationEngine.ts"],"sourcesContent":["// ⚡ 초고속 추천 엔진 (메모이제이션 + 인덱싱 + 캐싱)\nimport { Recipe, UserProfile, CalorieCalculation } from '../types';\nimport { getRecipesByGoal } from '../data/recipeData';\n\ninterface FastCacheEntry {\n  data: any;\n  timestamp: number;\n  hash: string;\n}\n\ninterface NutritionCache {\n  [recipeId: string]: {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n    monthlyCost: number;\n  };\n}\n\ninterface RecipeCombinationCache {\n  [hash: string]: {\n    recipes: Recipe[];\n    totalCost: number;\n    nutritionScore: number;\n  };\n}\n\nexport class FastRecommendationEngine {\n  private static instance: FastRecommendationEngine;\n  private nutritionCache: NutritionCache = {};\n  private combinationCache: RecipeCombinationCache = {};\n  private fastCache = new Map<string, FastCacheEntry>();\n  private readonly CACHE_TTL = 10 * 60 * 1000; // 10분\n\n  private constructor() {}\n\n  static getInstance(): FastRecommendationEngine {\n    if (!FastRecommendationEngine.instance) {\n      FastRecommendationEngine.instance = new FastRecommendationEngine();\n    }\n    return FastRecommendationEngine.instance;\n  }\n\n  // 🚀 초고속 추천 생성 (메인 함수)\n  async generateFastRecommendations(\n    userProfile: UserProfile,\n    calorieCalculation: CalorieCalculation,\n    monthlyBudget: number\n  ): Promise<{\n    recommendedRecipes: Recipe[];\n    budgetAnalysis: {\n      totalEstimatedCost: number;\n      budgetUsagePercentage: number;\n      costBreakdown: Array<{\n        recipeId: string;\n        recipeName: string;\n        monthlyCost: number;\n        costPercentage: number;\n      }>;\n    };\n  }> {\n    const startTime = performance.now();\n    \n    // 캐시 키 생성\n    const cacheKey = this.generateCacheKey(userProfile, calorieCalculation, monthlyBudget);\n    \n    // 캐시 확인 (디버깅 추가)\n    const cached = this.getValidCache(cacheKey);\n    if (cached) {\n      console.log('⚡ 초고속 캐시 히트! 즉시 반환');\n      console.log('📊 캐시된 레시피 수:', cached.data.recommendedRecipes?.length || 0);\n      \n      // 빈 배열이면 캐시 무효화\n      if (!cached.data.recommendedRecipes || cached.data.recommendedRecipes.length === 0) {\n        console.log('⚠️ 빈 캐시 감지! 캐시 삭제 후 새로 생성');\n        this.fastCache.delete(cacheKey);\n      } else {\n        return cached.data;\n      }\n    }\n\n    console.log('🚀 초고속 추천 엔진 시작...');\n\n    // 1단계: 목표 레시피 가져오기 (에러 처리를 위해 try 밖에서 선언)\n    let goalRecipes: Recipe[] = [];\n    \n    try {\n      goalRecipes = await getRecipesByGoal(userProfile.goal || 'maintenance');\n      console.log('📋 1단계: 목표 레시피 로드 완료:', goalRecipes.length + '개');\n      \n      if (goalRecipes.length === 0) {\n        console.log('⚠️ 목표 레시피가 없음! 폴백 모드로 전환');\n        return this.generateSimpleFallback([], monthlyBudget);\n      }\n      \n      // 2단계: 고속 전처리 (영양소 + 비용)\n      const preprocessedRecipes = await this.fastPreprocessRecipes(goalRecipes);\n      console.log('📋 2단계: 전처리 완료:', preprocessedRecipes.length + '개');\n      \n      // 3단계: 예산 기반 빠른 필터링\n      const affordableRecipes = this.fastBudgetFilter(preprocessedRecipes, monthlyBudget);\n      console.log('📋 3단계: 예산 필터링 완료:', affordableRecipes.length + '개');\n      \n      // 4단계: 초고속 조합 찾기 (휴리스틱 알고리즘)\n      const optimalRecipes = this.findOptimalCombinationFast(\n        affordableRecipes, \n        monthlyBudget,\n        calorieCalculation\n      );\n      console.log('📋 4단계: 최적 조합 선택 완료:', optimalRecipes.length + '개');\n\n      // 5단계: 예산 분석\n      const budgetAnalysis = this.generateBudgetAnalysis(optimalRecipes, monthlyBudget);\n\n      const result = {\n        recommendedRecipes: optimalRecipes,\n        budgetAnalysis\n      };\n\n      // 결과 캐싱\n      this.setCache(cacheKey, result);\n\n      const endTime = performance.now();\n      console.log(`✅ 초고속 추천 완료: ${Math.round(endTime - startTime)}ms`);\n      \n      return result;\n\n    } catch (error) {\n      console.error('❌ 초고속 추천 실패:', error);\n      \n      // 🔄 단순 폴백 (가장 빠른 방식)\n      return this.generateSimpleFallback(goalRecipes, monthlyBudget);\n    }\n  }\n\n  // 🔥 고속 전처리 (배치 처리 + 메모이제이션)\n  private async fastPreprocessRecipes(recipes: Recipe[]): Promise<Array<{\n    recipe: Recipe;\n    nutrition: { calories: number; protein: number; carbs: number; fat: number };\n    monthlyCost: number;\n    score: number;\n  }>> {\n    const processed = [];\n    \n    for (const recipe of recipes) {\n      // 캐시된 영양소 정보 확인\n      let nutrition = this.nutritionCache[recipe.id];\n      if (!nutrition) {\n        // 간단한 추정치 사용 (실제 계산 대신)\n        nutrition = this.estimateNutrition(recipe);\n        this.nutritionCache[recipe.id] = nutrition;\n      }\n\n      processed.push({\n        recipe,\n        nutrition,\n        monthlyCost: nutrition.monthlyCost,\n        score: this.calculateSimpleScore(recipe, nutrition)\n      });\n    }\n\n    return processed;\n  }\n\n  // ⚡ 간단한 영양소 추정 (복잡한 계산 대신)\n  private estimateNutrition(recipe: Recipe): {\n    calories: number; protein: number; carbs: number; fat: number; monthlyCost: number;\n  } {\n    // 레시피 이름과 태그 기반 빠른 추정\n    const name = recipe.name.toLowerCase();\n    const tags = recipe.tags?.join(' ').toLowerCase() || '';\n    \n    let calories = 400; // 기본값\n    let protein = 20;\n    let carbs = 50;\n    let fat = 15;\n    let monthlyCost = 45000; // 기본 월 비용\n\n    // 키워드 기반 빠른 조정\n    if (name.includes('닭') || name.includes('계란') || tags.includes('고단백')) {\n      protein += 15;\n      calories += 50;\n      monthlyCost += 15000;\n    }\n    \n    if (name.includes('샐러드') || name.includes('야채') || tags.includes('저칼로리')) {\n      calories -= 150;\n      carbs -= 20;\n      monthlyCost -= 10000;\n    }\n    \n    if (name.includes('밥') || name.includes('면') || name.includes('파스타')) {\n      carbs += 30;\n      calories += 100;\n    }\n\n    if (name.includes('등심') || name.includes('소고기')) {\n      protein += 20;\n      fat += 10;\n      calories += 100;\n      monthlyCost += 25000;\n    }\n\n    return { calories, protein, carbs, fat, monthlyCost };\n  }\n\n  // ⚡ 간단한 점수 계산\n  private calculateSimpleScore(recipe: Recipe, nutrition: any): number {\n    const viewScore = Math.min((recipe.userRatings?.overall || 0) * 20, 100);\n    const nutritionScore = Math.min(nutrition.protein * 2 + nutrition.calories * 0.1, 100);\n    const costScore = Math.max(100 - (nutrition.monthlyCost / 1000), 0);\n    \n    return (viewScore * 0.4 + nutritionScore * 0.4 + costScore * 0.2);\n  }\n\n  // ⚡ 예산 기반 빠른 필터링\n  private fastBudgetFilter(\n    recipes: Array<{ recipe: Recipe; nutrition: any; monthlyCost: number; score: number }>,\n    monthlyBudget: number\n  ) {\n    const maxCostPerRecipe = monthlyBudget * 0.6; // 한 레시피가 예산의 60% 이하\n    \n    return recipes\n      .filter(item => item.monthlyCost <= maxCostPerRecipe)\n      .sort((a, b) => b.score - a.score) // 점수순 정렬\n      .slice(0, 20); // 상위 20개만 처리\n  }\n\n  // 🚀 초고속 조합 찾기 (휴리스틱 알고리즘)\n  private findOptimalCombinationFast(\n    affordableRecipes: Array<{ recipe: Recipe; nutrition: any; monthlyCost: number; score: number }>,\n    monthlyBudget: number,\n    calorieCalculation: CalorieCalculation\n  ): Recipe[] {\n    console.log('🔍 조합 찾기 시작:', {\n      available: affordableRecipes.length,\n      budget: monthlyBudget\n    });\n\n    if (affordableRecipes.length === 0) {\n      console.log('⚠️ 사용 가능한 레시피가 없음');\n      return [];\n    }\n\n    // 🔥 휴리스틱: 가격-성능비 기반 그리디 알고리즘\n    let remainingBudget = monthlyBudget;\n    const selectedRecipes: Recipe[] = [];\n\n    // 가격 대비 점수 기준으로 재정렬\n    const costEffectiveRecipes = affordableRecipes\n      .map(item => ({\n        ...item,\n        efficiency: item.monthlyCost > 0 ? (item.score / (item.monthlyCost / 10000)) : item.score // 0으로 나누기 방지\n      }))\n      .sort((a, b) => b.efficiency - a.efficiency);\n\n    console.log('💰 가격-성능비 상위 5개:', costEffectiveRecipes.slice(0, 5).map(item => ({\n      name: item.recipe.name,\n      cost: item.monthlyCost,\n      score: item.score,\n      efficiency: item.efficiency\n    })));\n\n    // 그리디 선택 (최대 3개)\n    for (const item of costEffectiveRecipes) {\n      if (selectedRecipes.length >= 3) break;\n      \n      const canAfford = item.monthlyCost <= remainingBudget * 0.9; // 90% 예산 사용\n      console.log(`🔍 검토: ${item.recipe.name} (비용: ${item.monthlyCost}, 예산여유: ${remainingBudget}, 가능: ${canAfford})`);\n      \n      if (canAfford) {\n        selectedRecipes.push(item.recipe);\n        remainingBudget -= item.monthlyCost;\n        console.log(`✅ 선택: ${item.recipe.name}`);\n      }\n    }\n\n    // 예산 제한이 너무 엄격하면 완화\n    if (selectedRecipes.length === 0) {\n      console.log('⚠️ 예산 조건 완화해서 재시도');\n      for (const item of costEffectiveRecipes.slice(0, 3)) {\n        selectedRecipes.push(item.recipe);\n        if (selectedRecipes.length >= 3) break;\n      }\n    }\n\n    // 최소 1개는 선택 보장\n    if (selectedRecipes.length === 0 && affordableRecipes.length > 0) {\n      selectedRecipes.push(affordableRecipes[0].recipe);\n      console.log('🛡️ 최소 1개 보장:', affordableRecipes[0].recipe.name);\n    }\n\n    console.log(`⚡ 고속 조합 완료: ${selectedRecipes.length}개 레시피 선택`);\n    return selectedRecipes;\n  }\n\n  // 📊 예산 분석 생성\n  private generateBudgetAnalysis(recipes: Recipe[], monthlyBudget: number) {\n    const costBreakdown = recipes.map(recipe => {\n      const nutrition = this.nutritionCache[recipe.id];\n      const monthlyCost = nutrition?.monthlyCost || 45000;\n      \n      return {\n        recipeId: recipe.id,\n        recipeName: recipe.name,\n        monthlyCost,\n        costPercentage: (monthlyCost / monthlyBudget) * 100\n      };\n    });\n\n    const totalEstimatedCost = costBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n    const budgetUsagePercentage = (totalEstimatedCost / monthlyBudget) * 100;\n\n    return {\n      totalEstimatedCost,\n      budgetUsagePercentage,\n      costBreakdown\n    };\n  }\n\n  // 🔄 단순 폴백 (최후 수단)\n  private async generateSimpleFallback(recipes: Recipe[], monthlyBudget: number) {\n    console.log('⚠️ 단순 폴백 모드');\n    \n    let fallbackRecipes: Recipe[] = [];\n    \n    if (recipes.length > 0) {\n      // 레시피가 있으면 인기순으로 선택\n      fallbackRecipes = recipes\n        .sort((a, b) => (b.userRatings?.overall || 0) - (a.userRatings?.overall || 0))\n        .slice(0, 3);\n    } else {\n      // 레시피가 없으면 기본 더미 레시피 생성\n      console.log('📋 더미 레시피 생성');\n      fallbackRecipes = [\n        {\n          id: 'fallback-breakfast',\n          name: '추천 아침 레시피',\n          description: '균형잡힌 아침 식사를 위한 추천 레시피',\n          image: 'https://images.unsplash.com/photo-1533089860892-a7c6f0a88666?q=80&w=400',\n          cookingTime: 15,\n          difficulty: 'easy' as any,\n          instructions: ['재료 준비', '조리하기', '완성'],\n          tags: ['건강', '간편'],\n          mealType: 'breakfast' as any,\n          goalFit: ['maintenance'] as any,\n          userRatings: { overall: 4.0, taste: 4.0, difficulty: 4.0, nutrition: 4.0, reviewCount: 100 }\n        },\n        {\n          id: 'fallback-lunch',\n          name: '추천 점심 레시피',\n          description: '든든한 점심 식사를 위한 추천 레시피',\n          image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400',\n          cookingTime: 20,\n          difficulty: 'easy' as any,\n          instructions: ['재료 준비', '조리하기', '완성'],\n          tags: ['건강', '균형'],\n          mealType: 'lunch' as any,\n          goalFit: ['maintenance'] as any,\n          userRatings: { overall: 4.0, taste: 4.0, difficulty: 4.0, nutrition: 4.0, reviewCount: 100 }\n        },\n        {\n          id: 'fallback-dinner',\n          name: '추천 저녁 레시피',\n          description: '건강한 저녁 식사를 위한 추천 레시피',\n          image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?q=80&w=400',\n          cookingTime: 25,\n          difficulty: 'easy' as any,\n          instructions: ['재료 준비', '조리하기', '완성'],\n          tags: ['건강', '영양'],\n          mealType: 'dinner' as any,\n          goalFit: ['maintenance'] as any,\n          userRatings: { overall: 4.0, taste: 4.0, difficulty: 4.0, nutrition: 4.0, reviewCount: 100 }\n        }\n      ];\n    }\n\n    const estimatedCostPerRecipe = Math.round(monthlyBudget / Math.max(fallbackRecipes.length, 1));\n    \n    console.log('📋 폴백 레시피 생성 완료:', fallbackRecipes.length + '개');\n    \n    return {\n      recommendedRecipes: fallbackRecipes,\n      budgetAnalysis: {\n        totalEstimatedCost: monthlyBudget,\n        budgetUsagePercentage: 100,\n        costBreakdown: fallbackRecipes.map(recipe => ({\n          recipeId: recipe.id,\n          recipeName: recipe.name,\n          monthlyCost: estimatedCostPerRecipe,\n          costPercentage: Math.round(100 / fallbackRecipes.length)\n        }))\n      }\n    };\n  }\n\n  // 🔧 유틸리티 메소드들\n  private generateCacheKey(userProfile: UserProfile, calorieCalculation: CalorieCalculation, budget: number): string {\n    return `${userProfile.goal}_${Math.round(calorieCalculation.tdee)}_${budget}`;\n  }\n\n  private getValidCache(key: string): FastCacheEntry | null {\n    const cached = this.fastCache.get(key);\n    if (!cached) return null;\n    \n    if (Date.now() - cached.timestamp > this.CACHE_TTL) {\n      this.fastCache.delete(key);\n      return null;\n    }\n    \n    return cached;\n  }\n\n  private setCache(key: string, data: any): void {\n    this.fastCache.set(key, {\n      data,\n      timestamp: Date.now(),\n      hash: key\n    });\n  }\n\n  // 🧹 캐시 관리\n  clearCache(): void {\n    this.fastCache.clear();\n    this.nutritionCache = {};\n    this.combinationCache = {};\n    console.log('🧹 초고속 엔진 캐시 클리어 완료');\n  }\n\n  // 📊 성능 통계\n  getStats(): { cacheSize: number; nutritionCacheSize: number; hitRate: number } {\n    return {\n      cacheSize: this.fastCache.size,\n      nutritionCacheSize: Object.keys(this.nutritionCache).length,\n      hitRate: 0 // 실제로는 히트율 계산\n    };\n  }\n}\n\n// 싱글톤 인스턴스\nexport const fastRecommendationEngine = FastRecommendationEngine.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
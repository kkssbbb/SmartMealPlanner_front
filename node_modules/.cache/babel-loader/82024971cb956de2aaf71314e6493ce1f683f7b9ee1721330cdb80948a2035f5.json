{"ast":null,"code":"var _CSVProcessor;// 🔥 CSV 데이터 처리를 위한 고성능 프로세서\nexport class CSVProcessor{constructor(){this.recipesCache=null;}static getInstance(){if(!CSVProcessor.instance){CSVProcessor.instance=new CSVProcessor();}return CSVProcessor.instance;}// CSV 파일 로드 및 파싱\nasync loadCSVData(){if(this.recipesCache){console.log('📦 캐시된 레시피 데이터 사용');return this.recipesCache;}try{console.log('🔄 CSV 파일 로딩 중...');// Public 폴더에서 CSV 파일 로드\nconst response=await fetch('/data/TB_RECIPE_SEARCH_241226.csv');const csvText=await response.text();console.log('📊 CSV 파싱 시작...');const recipes=this.parseCSV(csvText);console.log(\"\\u2705 \\uCD1D \".concat(recipes.length,\"\\uAC1C \\uB808\\uC2DC\\uD53C \\uB85C\\uB4DC \\uC644\\uB8CC\"));this.recipesCache=recipes;return recipes;}catch(error){console.error('❌ CSV 로드 실패:',error);throw error;}}// CSV 텍스트 파싱\nparseCSV(csvText){const lines=csvText.split('\\n');const headers=this.parseCSVLine(lines[0]);const recipes=[];// 헤더 제외하고 파싱 (최대 10,000개로 제한)\nconst maxRecipes=10000;for(let i=1;i<Math.min(lines.length,maxRecipes+1);i++){if(!lines[i].trim())continue;try{const values=this.parseCSVLine(lines[i]);const recipe=this.createRecipeObject(headers,values);// 유효한 레시피만 추가\nif(recipe&&recipe.RCP_SNO&&recipe.CKG_NM){recipes.push(recipe);}}catch(error){console.warn(\"\\u26A0\\uFE0F \".concat(i,\"\\uBC88\\uC9F8 \\uB77C\\uC778 \\uD30C\\uC2F1 \\uC2E4\\uD328:\"),error);}}return recipes;}// CSV 라인 파싱 (쉼표와 따옴표 처리)\nparseCSVLine(line){const result=[];let current='';let inQuotes=false;for(let i=0;i<line.length;i++){const char=line[i];const nextChar=line[i+1];if(char==='\"'&&inQuotes&&nextChar==='\"'){current+='\"';i++;// Skip next quote\n}else if(char==='\"'){inQuotes=!inQuotes;}else if(char===','&&!inQuotes){result.push(current.trim());current='';}else{current+=char;}}result.push(current.trim());return result;}// 레시피 객체 생성\ncreateRecipeObject(headers,values){const recipe={};headers.forEach((header,index)=>{const value=values[index]||'';// 숫자 필드 변환\nif(['INQ_CNT','RCMM_CNT','SRAP_CNT'].includes(header)){recipe[header]=parseInt(value)||0;}else{recipe[header]=value;}});// 추가 필드 (CSV에 없는 경우 기본값)\nrecipe.RCP_IMG_URL=recipe.RCP_IMG_URL||'';return recipe;}// 🎯 필터링 및 검색 기능\nasync searchRecipes(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;const allRecipes=await this.loadCSVData();const lowerQuery=query.toLowerCase();return allRecipes.filter(recipe=>recipe.CKG_NM.toLowerCase().includes(lowerQuery)||recipe.RCP_TTL.toLowerCase().includes(lowerQuery)||recipe.CKG_IPDC.toLowerCase().includes(lowerQuery)).slice(0,limit);}// 🔥 인기 레시피 조회\nasync getPopularRecipes(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;const allRecipes=await this.loadCSVData();return allRecipes.sort((a,b)=>b.INQ_CNT-a.INQ_CNT).slice(0,limit);}// 🎯 목표별 레시피 필터링\nasync getRecipesByKeywords(keywords){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;const allRecipes=await this.loadCSVData();return allRecipes.filter(recipe=>{const content=\"\".concat(recipe.CKG_NM,\" \").concat(recipe.RCP_TTL,\" \").concat(recipe.CKG_IPDC).toLowerCase();return keywords.some(keyword=>content.includes(keyword.toLowerCase()));}).slice(0,limit);}// 📊 통계 정보\nasync getStatistics(){const allRecipes=await this.loadCSVData();// 카테고리별 집계\nconst categoryCount={};const methodCount={};let totalViews=0;let totalScraps=0;allRecipes.forEach(recipe=>{// 조회수/스크랩 합계\ntotalViews+=recipe.INQ_CNT;totalScraps+=recipe.SRAP_CNT;// 카테고리 집계\nif(recipe.CKG_KND_ACTO_NM){categoryCount[recipe.CKG_KND_ACTO_NM]=(categoryCount[recipe.CKG_KND_ACTO_NM]||0)+1;}// 조리법 집계\nif(recipe.CKG_MTH_ACTO_NM){methodCount[recipe.CKG_MTH_ACTO_NM]=(methodCount[recipe.CKG_MTH_ACTO_NM]||0)+1;}});// 상위 카테고리/조리법 추출\nconst topCategories=Object.entries(categoryCount).sort((a,b)=>b[1]-a[1]).slice(0,10).map(_ref=>{let[category,count]=_ref;return{category,count};});const topCookingMethods=Object.entries(methodCount).sort((a,b)=>b[1]-a[1]).slice(0,10).map(_ref2=>{let[method,count]=_ref2;return{method,count};});return{totalRecipes:allRecipes.length,avgViews:Math.round(totalViews/allRecipes.length),avgScraps:Math.round(totalScraps/allRecipes.length),topCategories,topCookingMethods};}}// 🎯 싱글톤 인스턴스 export\n_CSVProcessor=CSVProcessor;CSVProcessor.instance=void 0;export const csvProcessor=CSVProcessor.getInstance();","map":{"version":3,"names":["CSVProcessor","constructor","recipesCache","getInstance","instance","loadCSVData","console","log","response","fetch","csvText","text","recipes","parseCSV","concat","length","error","lines","split","headers","parseCSVLine","maxRecipes","i","Math","min","trim","values","recipe","createRecipeObject","RCP_SNO","CKG_NM","push","warn","line","result","current","inQuotes","char","nextChar","forEach","header","index","value","includes","parseInt","RCP_IMG_URL","searchRecipes","query","limit","arguments","undefined","allRecipes","lowerQuery","toLowerCase","filter","RCP_TTL","CKG_IPDC","slice","getPopularRecipes","sort","a","b","INQ_CNT","getRecipesByKeywords","keywords","content","some","keyword","getStatistics","categoryCount","methodCount","totalViews","totalScraps","SRAP_CNT","CKG_KND_ACTO_NM","CKG_MTH_ACTO_NM","topCategories","Object","entries","map","_ref","category","count","topCookingMethods","_ref2","method","totalRecipes","avgViews","round","avgScraps","_CSVProcessor","csvProcessor"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/csvProcessor.ts"],"sourcesContent":["import { MankaeLRecipeRaw } from './recipeDataProcessor';\n\n// 🔥 CSV 데이터 처리를 위한 고성능 프로세서\nexport class CSVProcessor {\n  private static instance: CSVProcessor;\n  private recipesCache: MankaeLRecipeRaw[] | null = null;\n  \n  private constructor() {}\n  \n  static getInstance(): CSVProcessor {\n    if (!CSVProcessor.instance) {\n      CSVProcessor.instance = new CSVProcessor();\n    }\n    return CSVProcessor.instance;\n  }\n  \n  // CSV 파일 로드 및 파싱\n  async loadCSVData(): Promise<MankaeLRecipeRaw[]> {\n    if (this.recipesCache) {\n      console.log('📦 캐시된 레시피 데이터 사용');\n      return this.recipesCache;\n    }\n    \n    try {\n      console.log('🔄 CSV 파일 로딩 중...');\n      \n      // Public 폴더에서 CSV 파일 로드\n      const response = await fetch('/data/TB_RECIPE_SEARCH_241226.csv');\n      const csvText = await response.text();\n      \n      console.log('📊 CSV 파싱 시작...');\n      const recipes = this.parseCSV(csvText);\n      \n      console.log(`✅ 총 ${recipes.length}개 레시피 로드 완료`);\n      this.recipesCache = recipes;\n      \n      return recipes;\n    } catch (error) {\n      console.error('❌ CSV 로드 실패:', error);\n      throw error;\n    }\n  }\n  \n  // CSV 텍스트 파싱\n  private parseCSV(csvText: string): MankaeLRecipeRaw[] {\n    const lines = csvText.split('\\n');\n    const headers = this.parseCSVLine(lines[0]);\n    \n    const recipes: MankaeLRecipeRaw[] = [];\n    \n    // 헤더 제외하고 파싱 (최대 10,000개로 제한)\n    const maxRecipes = 10000;\n    for (let i = 1; i < Math.min(lines.length, maxRecipes + 1); i++) {\n      if (!lines[i].trim()) continue;\n      \n      try {\n        const values = this.parseCSVLine(lines[i]);\n        const recipe = this.createRecipeObject(headers, values);\n        \n        // 유효한 레시피만 추가\n        if (recipe && recipe.RCP_SNO && recipe.CKG_NM) {\n          recipes.push(recipe);\n        }\n      } catch (error) {\n        console.warn(`⚠️ ${i}번째 라인 파싱 실패:`, error);\n      }\n    }\n    \n    return recipes;\n  }\n  \n  // CSV 라인 파싱 (쉼표와 따옴표 처리)\n  private parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n      \n      if (char === '\"' && inQuotes && nextChar === '\"') {\n        current += '\"';\n        i++; // Skip next quote\n      } else if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    result.push(current.trim());\n    return result;\n  }\n  \n  // 레시피 객체 생성\n  private createRecipeObject(headers: string[], values: string[]): MankaeLRecipeRaw {\n    const recipe: any = {};\n    \n    headers.forEach((header, index) => {\n      const value = values[index] || '';\n      \n      // 숫자 필드 변환\n      if (['INQ_CNT', 'RCMM_CNT', 'SRAP_CNT'].includes(header)) {\n        recipe[header] = parseInt(value) || 0;\n      } else {\n        recipe[header] = value;\n      }\n    });\n    \n    // 추가 필드 (CSV에 없는 경우 기본값)\n    recipe.RCP_IMG_URL = recipe.RCP_IMG_URL || '';\n    \n    return recipe as MankaeLRecipeRaw;\n  }\n  \n  // 🎯 필터링 및 검색 기능\n  async searchRecipes(query: string, limit: number = 100): Promise<MankaeLRecipeRaw[]> {\n    const allRecipes = await this.loadCSVData();\n    const lowerQuery = query.toLowerCase();\n    \n    return allRecipes\n      .filter(recipe => \n        recipe.CKG_NM.toLowerCase().includes(lowerQuery) ||\n        recipe.RCP_TTL.toLowerCase().includes(lowerQuery) ||\n        recipe.CKG_IPDC.toLowerCase().includes(lowerQuery)\n      )\n      .slice(0, limit);\n  }\n  \n  // 🔥 인기 레시피 조회\n  async getPopularRecipes(limit: number = 100): Promise<MankaeLRecipeRaw[]> {\n    const allRecipes = await this.loadCSVData();\n    \n    return allRecipes\n      .sort((a, b) => b.INQ_CNT - a.INQ_CNT)\n      .slice(0, limit);\n  }\n  \n  // 🎯 목표별 레시피 필터링\n  async getRecipesByKeywords(keywords: string[], limit: number = 50): Promise<MankaeLRecipeRaw[]> {\n    const allRecipes = await this.loadCSVData();\n    \n    return allRecipes\n      .filter(recipe => {\n        const content = `${recipe.CKG_NM} ${recipe.RCP_TTL} ${recipe.CKG_IPDC}`.toLowerCase();\n        return keywords.some(keyword => content.includes(keyword.toLowerCase()));\n      })\n      .slice(0, limit);\n  }\n  \n  // 📊 통계 정보\n  async getStatistics(): Promise<{\n    totalRecipes: number;\n    avgViews: number;\n    avgScraps: number;\n    topCategories: Array<{ category: string; count: number }>;\n    topCookingMethods: Array<{ method: string; count: number }>;\n  }> {\n    const allRecipes = await this.loadCSVData();\n    \n    // 카테고리별 집계\n    const categoryCount: Record<string, number> = {};\n    const methodCount: Record<string, number> = {};\n    \n    let totalViews = 0;\n    let totalScraps = 0;\n    \n    allRecipes.forEach(recipe => {\n      // 조회수/스크랩 합계\n      totalViews += recipe.INQ_CNT;\n      totalScraps += recipe.SRAP_CNT;\n      \n      // 카테고리 집계\n      if (recipe.CKG_KND_ACTO_NM) {\n        categoryCount[recipe.CKG_KND_ACTO_NM] = (categoryCount[recipe.CKG_KND_ACTO_NM] || 0) + 1;\n      }\n      \n      // 조리법 집계\n      if (recipe.CKG_MTH_ACTO_NM) {\n        methodCount[recipe.CKG_MTH_ACTO_NM] = (methodCount[recipe.CKG_MTH_ACTO_NM] || 0) + 1;\n      }\n    });\n    \n    // 상위 카테고리/조리법 추출\n    const topCategories = Object.entries(categoryCount)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([category, count]) => ({ category, count }));\n      \n    const topCookingMethods = Object.entries(methodCount)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([method, count]) => ({ method, count }));\n    \n    return {\n      totalRecipes: allRecipes.length,\n      avgViews: Math.round(totalViews / allRecipes.length),\n      avgScraps: Math.round(totalScraps / allRecipes.length),\n      topCategories,\n      topCookingMethods\n    };\n  }\n}\n\n// 🎯 싱글톤 인스턴스 export\nexport const csvProcessor = CSVProcessor.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
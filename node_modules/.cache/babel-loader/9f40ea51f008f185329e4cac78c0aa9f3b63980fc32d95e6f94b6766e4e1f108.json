{"ast":null,"code":"var _OptimizedCSVProcessor;\n// 🚀 초고성능 CSV 프로세서 (스트리밍 + 워커 + 캐싱)\n\nexport class OptimizedCSVProcessor {\n  constructor() {\n    this.cache = new Map();\n    this.CACHE_TTL = 30 * 60 * 1000;\n    // 30분\n    this.CHUNK_SIZE = 1000;\n    // 1000개씩 처리\n    this.isLoading = false;\n    this.loadingPromise = null;\n  }\n  static getInstance() {\n    if (!OptimizedCSVProcessor.instance) {\n      OptimizedCSVProcessor.instance = new OptimizedCSVProcessor();\n    }\n    return OptimizedCSVProcessor.instance;\n  }\n\n  // 🔥 스트리밍 기반 CSV 로딩\n  async loadCSVOptimized() {\n    // 중복 로딩 방지\n    if (this.isLoading && this.loadingPromise) {\n      console.log('⏳ 이미 로딩 중... 기존 Promise 반환');\n      return this.loadingPromise;\n    }\n\n    // 캐시 확인\n    const cached = this.getValidCache('main');\n    if (cached) {\n      console.log('⚡ 캐시 히트! 즉시 반환');\n      return cached.data;\n    }\n    this.isLoading = true;\n    this.loadingPromise = this.performOptimizedLoad();\n    try {\n      const result = await this.loadingPromise;\n      this.isLoading = false;\n      return result;\n    } catch (error) {\n      this.isLoading = false;\n      this.loadingPromise = null;\n      throw error;\n    }\n  }\n  async performOptimizedLoad() {\n    const startTime = performance.now();\n    console.log('🚀 최적화된 CSV 로딩 시작...');\n    try {\n      var _response$body;\n      // 1단계: 스트리밍 페치 (청크 단위)\n      const response = await fetch('/data/TB_RECIPE_SEARCH_241226.csv');\n      console.log('📡 CSV 파일 응답:', response.status, response.ok);\n      console.log(`📏 Content-Length: ${response.headers.get('content-length')} bytes`);\n      if (!response.ok) {\n        console.error('❌ CSV 파일 로드 실패:', response.status, response.statusText);\n        console.error('💡 확인사항: public/data/ 폴더에 TB_RECIPE_SEARCH_241226.csv 파일이 있는지 확인하세요');\n        throw new Error(`HTTP ${response.status} - CSV 파일을 찾을 수 없습니다`);\n      }\n      const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n      if (!reader) throw new Error('스트림 리더 생성 실패');\n\n      // 2단계: 청크 단위 파싱\n      let csvText = '';\n      let processed = 0;\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        csvText += decoder.decode(value, {\n          stream: true\n        });\n        processed += value.length;\n\n        // 진행률 표시 (매 1MB마다)\n        if (processed % (1024 * 1024) === 0) {\n          console.log(`📊 로딩 진행: ${(processed / (1024 * 1024)).toFixed(1)}MB`);\n        }\n      }\n\n      // 3단계: 최적화된 파싱\n      const recipes = await this.parseCSVOptimized(csvText);\n\n      // 4단계: 캐싱\n      this.setCache('main', recipes);\n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      console.log(`✅ 최적화 로딩 완료: ${recipes.length}개 (${loadTime}ms)`);\n      console.log(`📈 성능 향상: 평균 ${Math.round(recipes.length / loadTime * 1000)}개/초`);\n      return recipes;\n    } catch (error) {\n      console.error('❌ 최적화 로딩 실패:', error);\n      throw error;\n    }\n  }\n\n  // 🔥 최적화된 CSV 파싱 (정규식 최소화 + 배치 처리)\n  async parseCSVOptimized(csvText) {\n    console.log('⚡ 고성능 파싱 시작...');\n    const lines = csvText.split('\\n');\n    const headerLine = lines[0];\n    if (!headerLine) {\n      throw new Error('CSV 헤더가 없습니다');\n    }\n\n    // 헤더 파싱 (한 번만)\n    const headers = this.parseCSVLine(headerLine);\n    const recipes = [];\n\n    // 배치 처리로 성능 최적화\n    for (let i = 1; i < lines.length; i += this.CHUNK_SIZE) {\n      const endIndex = Math.min(i + this.CHUNK_SIZE, lines.length);\n      const batch = lines.slice(i, endIndex);\n\n      // 배치 단위 처리\n      for (const line of batch) {\n        if (!line.trim()) continue;\n        try {\n          const values = this.parseCSVLine(line);\n          if (values.length < headers.length) continue;\n          const recipe = this.createRecipeObject(headers, values);\n          if (recipe && this.isValidRecipe(recipe)) {\n            recipes.push(recipe);\n          }\n        } catch (error) {\n          // 개별 라인 파싱 실패는 스킵\n          continue;\n        }\n      }\n\n      // UI 블로킹 방지 (매 청크마다 양보)\n      if (i % (this.CHUNK_SIZE * 5) === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n        console.log(`⚡ 파싱 진행: ${Math.round(i / lines.length * 100)}%`);\n      }\n    }\n    console.log(`✅ 파싱 완료: ${recipes.length}/${lines.length - 1}개 성공`);\n\n    // 🔍 디버깅: 첫 3개 레시피 샘플 출력\n    if (recipes.length > 0) {\n      console.log('📋 파싱된 레시피 샘플:');\n      recipes.slice(0, 3).forEach((recipe, index) => {\n        var _recipe$CKG_MTRL_CN;\n        console.log(`  ${index + 1}. ${recipe.RCP_TTL || recipe.CKG_NM}`);\n        console.log(`     - 재료: ${(_recipe$CKG_MTRL_CN = recipe.CKG_MTRL_CN) === null || _recipe$CKG_MTRL_CN === void 0 ? void 0 : _recipe$CKG_MTRL_CN.substring(0, 100)}...`);\n        console.log(`     - 조리법: ${recipe.CKG_MTH_ACTO_NM}`);\n        console.log(`     - 상황: ${recipe.CKG_STA_ACTO_NM}`);\n      });\n    }\n    return recipes;\n  }\n\n  // 🎯 목표별 고성능 레시피 조회\n  async getRecipesByGoal(goal, limit = 200) {\n    const cacheKey = `goal_${goal}_${limit}`;\n\n    // 캐시 확인\n    const cached = this.getValidCache(cacheKey);\n    if (cached) {\n      console.log(`⚡ ${goal} 캐시 히트!`);\n      return cached.data;\n    }\n    console.log(`🎯 ${goal} 고성능 검색 시작...`);\n    const startTime = performance.now();\n\n    // 전체 데이터 로드\n    const allRecipes = await this.loadCSVOptimized();\n\n    // 🔥 목표별 키워드 대폭 확대 (실제 데이터에 맞춰서)\n    const goalKeywords = {\n      weight_loss: ['다이어트', '저칼로리', '살빼기', '체중감량', '샐러드', '야채', '채소', '저지방', '헬시', '칼로리', '무침', '삶기', '찌기', '국', '탕', '배추', '브로콜리', '양배추', '콩나물', '시금치', '무', '당근', '버섯', '양파', '대파', '쪽파', '깻잎', '상추', '쌈채소', '청경채', '부추', '미나리', '김', '미역', '파래', '김치', '콩', '두부', '연두부', '순두부', '된장', '간장', '참기름', '들기름', '올리브오일', '샐러드드레싱', '요거트', '과일', '사과', '바나나', '오렌지', '키위', '레몬', '토마토', '오이', '파프리카', '피망', '가지', '호박', '감자', '고구마', '옥수수', '완두콩', '병아리콩', '렌틸콩', '현미', '귀리', '보리', '퀴노아', '통곡물', '통밀빵', '현미밥', '잡곡밥', '닭가슴살', '생선', '연어', '참치', '고등어', '갈치', '멸치', '김', '미역', '다시마', '조개', '새우', '문어', '오징어', '닭', '오리고기', '소고기', '돼지고기', '양고기', '계란', '달걀', '메추리알', '삶은계란', '찐계란', '계란찜', '스크램블', '요구르트', '치즈', '저지방치즈', '코티지치즈', '리코타치즈', '두유', '아몬드', '호두', '잣', '참깨', '들깨', '해바라기씨', '슬림', '라이트', '제로', '무가당', '무설탕', '무염', '저염', '저나트륨', '저콜레스테롤', '저트랜스지방', '무트랜스지방', '디톡스', '클린', '그린', '비건', '락토오보', '락토', '오보', '페스코', '플렉시테리언', '세미베지테리언'],\n      muscle_gain: ['단백질', '근육', '고단백', '닭가슴살', '소고기', '계란', '프로틴', '근력', '운동', '닭', '돼지', '새우', '연어', '참치', '두부', '굽기', '볶기', '구이', '튀기기', '찌기', '삶기', '고기', '육류', '생선', '해산물', '유제품', '치즈', '요거트', '우유', '단백질쉐이크', '프로틴파우더', '크레아틴', '글루타민', 'BCAA', '아미노산', '벌크', '벌킹', '머슬', '스트렝스', '웨이트', '피트니스', '바디빌딩', '보디빌딩', '헬스', '짐', '운동', 'PT', '크로스핏', '요가', '필라테스'],\n      maintenance: ['건강', '균형', '일상', '집밥', '영양', '웰빙', '가정식', '보양', '만들기', '레시피', '요리', '밥', '국', '찌개', '전골', '탕', '찌개', '볶음', '구이', '튀김', '무침', '비빔밥', '덮밥', '볶음밥', '김치찌개', '된장찌개', '순두부찌개', '부대찌개', '돼지고기', '소고기', '닭고기', '생선', '채소', '과일', '쌀', '밀가루', '빵', '파스타', '국수', '면', '떡', '죽', '스프', '수프', '샐러드', '샌드위치']\n    };\n    const keywords = goalKeywords[goal];\n    console.log(`🔍 ${goal} 키워드 개수: ${keywords.length}개`);\n\n    // 고성능 필터링 (단일 패스)\n    const filteredRecipes = [];\n    for (const recipe of allRecipes) {\n      // 🔍 각 레시피별 상세 디버깅 (처음 5개만)\n      if (filteredRecipes.length < 5) {\n        var _recipe$CKG_IPDC, _recipe$CKG_MTRL_CN2;\n        console.log(`\\n🧪 레시피 검사: \"${recipe.RCP_TTL || recipe.CKG_NM}\"`);\n        console.log(`   - 제목: ${recipe.RCP_TTL}`);\n        console.log(`   - 요리명: ${recipe.CKG_NM}`);\n        console.log(`   - 소개: ${(_recipe$CKG_IPDC = recipe.CKG_IPDC) === null || _recipe$CKG_IPDC === void 0 ? void 0 : _recipe$CKG_IPDC.substring(0, 50)}...`);\n        console.log(`   - 재료: ${(_recipe$CKG_MTRL_CN2 = recipe.CKG_MTRL_CN) === null || _recipe$CKG_MTRL_CN2 === void 0 ? void 0 : _recipe$CKG_MTRL_CN2.substring(0, 50)}...`);\n        console.log(`   - 주재료: ${recipe.CKG_MTRL_ACTO_NM}`);\n        console.log(`   - 상황: ${recipe.CKG_STA_ACTO_NM}`);\n      }\n\n      // 빠른 키워드 매칭 (정규식 대신 includes 사용) - 재료 필드 추가!\n      const hasKeyword = keywords.some(keyword => {\n        var _recipe$RCP_TTL, _recipe$CKG_NM, _recipe$CKG_IPDC2, _recipe$CKG_STA_ACTO_, _recipe$CKG_MTRL_ACTO, _recipe$CKG_MTRL_CN3;\n        return ((_recipe$RCP_TTL = recipe.RCP_TTL) === null || _recipe$RCP_TTL === void 0 ? void 0 : _recipe$RCP_TTL.includes(keyword)) || ((_recipe$CKG_NM = recipe.CKG_NM) === null || _recipe$CKG_NM === void 0 ? void 0 : _recipe$CKG_NM.includes(keyword)) || ((_recipe$CKG_IPDC2 = recipe.CKG_IPDC) === null || _recipe$CKG_IPDC2 === void 0 ? void 0 : _recipe$CKG_IPDC2.includes(keyword)) || ((_recipe$CKG_STA_ACTO_ = recipe.CKG_STA_ACTO_NM) === null || _recipe$CKG_STA_ACTO_ === void 0 ? void 0 : _recipe$CKG_STA_ACTO_.includes(keyword)) || ((_recipe$CKG_MTRL_ACTO = recipe.CKG_MTRL_ACTO_NM) === null || _recipe$CKG_MTRL_ACTO === void 0 ? void 0 : _recipe$CKG_MTRL_ACTO.includes(keyword)) || ((_recipe$CKG_MTRL_CN3 = recipe.CKG_MTRL_CN) === null || _recipe$CKG_MTRL_CN3 === void 0 ? void 0 : _recipe$CKG_MTRL_CN3.includes(keyword));\n      } // 🔥 재료 필드도 검색!\n      );\n      if (hasKeyword) {\n        filteredRecipes.push(recipe);\n\n        // 🔥 상세 디버깅: 키워드 매칭 세부 정보 출력\n        if (goal === 'weight_loss') {\n          const matchedKeywords = keywords.filter(keyword => {\n            var _recipe$RCP_TTL2, _recipe$CKG_NM2, _recipe$CKG_IPDC3, _recipe$CKG_STA_ACTO_2, _recipe$CKG_MTRL_ACTO2, _recipe$CKG_MTRL_CN4;\n            return ((_recipe$RCP_TTL2 = recipe.RCP_TTL) === null || _recipe$RCP_TTL2 === void 0 ? void 0 : _recipe$RCP_TTL2.includes(keyword)) || ((_recipe$CKG_NM2 = recipe.CKG_NM) === null || _recipe$CKG_NM2 === void 0 ? void 0 : _recipe$CKG_NM2.includes(keyword)) || ((_recipe$CKG_IPDC3 = recipe.CKG_IPDC) === null || _recipe$CKG_IPDC3 === void 0 ? void 0 : _recipe$CKG_IPDC3.includes(keyword)) || ((_recipe$CKG_STA_ACTO_2 = recipe.CKG_STA_ACTO_NM) === null || _recipe$CKG_STA_ACTO_2 === void 0 ? void 0 : _recipe$CKG_STA_ACTO_2.includes(keyword)) || ((_recipe$CKG_MTRL_ACTO2 = recipe.CKG_MTRL_ACTO_NM) === null || _recipe$CKG_MTRL_ACTO2 === void 0 ? void 0 : _recipe$CKG_MTRL_ACTO2.includes(keyword)) || ((_recipe$CKG_MTRL_CN4 = recipe.CKG_MTRL_CN) === null || _recipe$CKG_MTRL_CN4 === void 0 ? void 0 : _recipe$CKG_MTRL_CN4.includes(keyword));\n          });\n          if (matchedKeywords.length > 0) {\n            var _recipe$CKG_MTRL_CN5;\n            console.log(`🔍 ${goal} 키워드 매칭: \"${recipe.RCP_TTL}\"`);\n            console.log(`   - 매칭 키워드: [${matchedKeywords.join(', ')}]`);\n            console.log(`   - 재료 샘플: ${(_recipe$CKG_MTRL_CN5 = recipe.CKG_MTRL_CN) === null || _recipe$CKG_MTRL_CN5 === void 0 ? void 0 : _recipe$CKG_MTRL_CN5.substring(0, 100)}...`);\n            console.log(`   - 총 매칭 레시피: ${filteredRecipes.length}개`);\n          }\n        }\n      }\n\n      // 조기 종료 (충분한 결과) - 더 많은 레시피 확보를 위해 완화\n      if (filteredRecipes.length >= limit * 3) {\n        console.log(`🎯 충분한 레시피 확보: ${filteredRecipes.length}개 → 조기 종료`);\n        break;\n      }\n    }\n\n    // 품질 기반 정렬 (조회수 + 스크랩수)\n    const sortedRecipes = filteredRecipes.sort((a, b) => {\n      const scoreA = (a.INQ_CNT || 0) * 0.7 + (a.SRAP_CNT || 0) * 0.3;\n      const scoreB = (b.INQ_CNT || 0) * 0.7 + (b.SRAP_CNT || 0) * 0.3;\n      return scoreB - scoreA;\n    }).slice(0, limit);\n\n    // 결과 캐싱\n    this.setCache(cacheKey, sortedRecipes);\n    const endTime = performance.now();\n    console.log(`✅ ${goal} 고성능 검색 완료: ${sortedRecipes.length}개 (${Math.round(endTime - startTime)}ms)`);\n    console.log(`🔍 ${goal} 필터링 결과: 전체 ${allRecipes.length}개 중 ${filteredRecipes.length}개 키워드 매칭, 최종 ${sortedRecipes.length}개 선택`);\n    return sortedRecipes;\n  }\n\n  // 🔧 유틸리티 메소드들\n  parseCSVLine(line) {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    result.push(current.trim());\n    return result;\n  }\n  createRecipeObject(headers, values) {\n    try {\n      const recipe = {};\n\n      // 필수 필드만 매핑 (성능 최적화)\n      const essentialFields = ['RCP_SNO', 'RCP_TTL', 'CKG_NM', 'RGTR_NM', 'INQ_CNT', 'SRAP_CNT', 'CKG_MTH_ACTO_NM', 'CKG_STA_ACTO_NM', 'CKG_IPDC', 'CKG_MTRL_CN'];\n      for (let i = 0; i < headers.length && i < values.length; i++) {\n        const header = headers[i].trim();\n        if (essentialFields.includes(header)) {\n          recipe[header] = values[i];\n        }\n      }\n\n      // 숫자 필드 변환\n      recipe.INQ_CNT = parseInt(recipe.INQ_CNT) || 0;\n      recipe.SRAP_CNT = parseInt(recipe.SRAP_CNT) || 0;\n      recipe.RCMM_CNT = parseInt(recipe.RCMM_CNT) || 0;\n      return recipe;\n    } catch (error) {\n      return null;\n    }\n  }\n  isValidRecipe(recipe) {\n    return !!(recipe.RCP_SNO && recipe.RCP_TTL && recipe.CKG_NM);\n  }\n\n  // 캐시 관리\n  getValidCache(key) {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n    if (Date.now() - cached.timestamp > this.CACHE_TTL) {\n      this.cache.delete(key);\n      return null;\n    }\n    return cached;\n  }\n  setCache(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      version: '1.0'\n    });\n  }\n\n  // 🧹 메모리 정리\n  clearCache() {\n    this.cache.clear();\n    console.log('🧹 캐시 클리어 완료');\n  }\n\n  // 📊 성능 통계\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// 싱글톤 인스턴스\n_OptimizedCSVProcessor = OptimizedCSVProcessor;\nOptimizedCSVProcessor.instance = void 0;\nexport const optimizedCSVProcessor = OptimizedCSVProcessor.getInstance();","map":{"version":3,"names":["OptimizedCSVProcessor","constructor","cache","Map","CACHE_TTL","CHUNK_SIZE","isLoading","loadingPromise","getInstance","instance","loadCSVOptimized","console","log","cached","getValidCache","data","performOptimizedLoad","result","error","startTime","performance","now","_response$body","response","fetch","status","ok","headers","get","statusText","Error","reader","body","getReader","csvText","processed","decoder","TextDecoder","done","value","read","decode","stream","length","toFixed","recipes","parseCSVOptimized","setCache","endTime","loadTime","Math","round","lines","split","headerLine","parseCSVLine","i","endIndex","min","batch","slice","line","trim","values","recipe","createRecipeObject","isValidRecipe","push","Promise","resolve","setTimeout","forEach","index","_recipe$CKG_MTRL_CN","RCP_TTL","CKG_NM","CKG_MTRL_CN","substring","CKG_MTH_ACTO_NM","CKG_STA_ACTO_NM","getRecipesByGoal","goal","limit","cacheKey","allRecipes","goalKeywords","weight_loss","muscle_gain","maintenance","keywords","filteredRecipes","_recipe$CKG_IPDC","_recipe$CKG_MTRL_CN2","CKG_IPDC","CKG_MTRL_ACTO_NM","hasKeyword","some","keyword","_recipe$RCP_TTL","_recipe$CKG_NM","_recipe$CKG_IPDC2","_recipe$CKG_STA_ACTO_","_recipe$CKG_MTRL_ACTO","_recipe$CKG_MTRL_CN3","includes","matchedKeywords","filter","_recipe$RCP_TTL2","_recipe$CKG_NM2","_recipe$CKG_IPDC3","_recipe$CKG_STA_ACTO_2","_recipe$CKG_MTRL_ACTO2","_recipe$CKG_MTRL_CN4","_recipe$CKG_MTRL_CN5","join","sortedRecipes","sort","a","b","scoreA","INQ_CNT","SRAP_CNT","scoreB","current","inQuotes","char","essentialFields","header","parseInt","RCMM_CNT","RCP_SNO","key","Date","timestamp","delete","set","version","clearCache","clear","getCacheStats","size","keys","Array","from","_OptimizedCSVProcessor","optimizedCSVProcessor"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/optimizedCSVProcessor.ts"],"sourcesContent":["// 🚀 초고성능 CSV 프로세서 (스트리밍 + 워커 + 캐싱)\nimport { MankaeLRecipeRaw } from './recipeDataProcessor';\n\ninterface ProcessedCache {\n  data: MankaeLRecipeRaw[];\n  timestamp: number;\n  version: string;\n}\n\nexport class OptimizedCSVProcessor {\n  private static instance: OptimizedCSVProcessor;\n  private cache = new Map<string, ProcessedCache>();\n  private readonly CACHE_TTL = 30 * 60 * 1000; // 30분\n  private readonly CHUNK_SIZE = 1000; // 1000개씩 처리\n  private isLoading = false;\n  private loadingPromise: Promise<MankaeLRecipeRaw[]> | null = null;\n\n  private constructor() {}\n\n  static getInstance(): OptimizedCSVProcessor {\n    if (!OptimizedCSVProcessor.instance) {\n      OptimizedCSVProcessor.instance = new OptimizedCSVProcessor();\n    }\n    return OptimizedCSVProcessor.instance;\n  }\n\n  // 🔥 스트리밍 기반 CSV 로딩\n  async loadCSVOptimized(): Promise<MankaeLRecipeRaw[]> {\n    // 중복 로딩 방지\n    if (this.isLoading && this.loadingPromise) {\n      console.log('⏳ 이미 로딩 중... 기존 Promise 반환');\n      return this.loadingPromise;\n    }\n\n    // 캐시 확인\n    const cached = this.getValidCache('main');\n    if (cached) {\n      console.log('⚡ 캐시 히트! 즉시 반환');\n      return cached.data;\n    }\n\n    this.isLoading = true;\n    this.loadingPromise = this.performOptimizedLoad();\n    \n    try {\n      const result = await this.loadingPromise;\n      this.isLoading = false;\n      return result;\n    } catch (error) {\n      this.isLoading = false;\n      this.loadingPromise = null;\n      throw error;\n    }\n  }\n\n  private async performOptimizedLoad(): Promise<MankaeLRecipeRaw[]> {\n    const startTime = performance.now();\n    console.log('🚀 최적화된 CSV 로딩 시작...');\n\n    try {\n      // 1단계: 스트리밍 페치 (청크 단위)\n      const response = await fetch('/data/TB_RECIPE_SEARCH_241226.csv');\n      console.log('📡 CSV 파일 응답:', response.status, response.ok);\n      console.log(`📏 Content-Length: ${response.headers.get('content-length')} bytes`);\n      if (!response.ok) {\n        console.error('❌ CSV 파일 로드 실패:', response.status, response.statusText);\n        console.error('💡 확인사항: public/data/ 폴더에 TB_RECIPE_SEARCH_241226.csv 파일이 있는지 확인하세요');\n        throw new Error(`HTTP ${response.status} - CSV 파일을 찾을 수 없습니다`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) throw new Error('스트림 리더 생성 실패');\n\n      // 2단계: 청크 단위 파싱\n      let csvText = '';\n      let processed = 0;\n      \n      const decoder = new TextDecoder();\n      \n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        \n        csvText += decoder.decode(value, { stream: true });\n        processed += value.length;\n        \n        // 진행률 표시 (매 1MB마다)\n        if (processed % (1024 * 1024) === 0) {\n          console.log(`📊 로딩 진행: ${(processed / (1024 * 1024)).toFixed(1)}MB`);\n        }\n      }\n\n      // 3단계: 최적화된 파싱\n      const recipes = await this.parseCSVOptimized(csvText);\n      \n      // 4단계: 캐싱\n      this.setCache('main', recipes);\n      \n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      \n      console.log(`✅ 최적화 로딩 완료: ${recipes.length}개 (${loadTime}ms)`);\n      console.log(`📈 성능 향상: 평균 ${Math.round(recipes.length / loadTime * 1000)}개/초`);\n      \n      return recipes;\n\n    } catch (error) {\n      console.error('❌ 최적화 로딩 실패:', error);\n      throw error;\n    }\n  }\n\n  // 🔥 최적화된 CSV 파싱 (정규식 최소화 + 배치 처리)\n  private async parseCSVOptimized(csvText: string): Promise<MankaeLRecipeRaw[]> {\n    console.log('⚡ 고성능 파싱 시작...');\n    \n    const lines = csvText.split('\\n');\n    const headerLine = lines[0];\n    \n    if (!headerLine) {\n      throw new Error('CSV 헤더가 없습니다');\n    }\n\n    // 헤더 파싱 (한 번만)\n    const headers = this.parseCSVLine(headerLine);\n    const recipes: MankaeLRecipeRaw[] = [];\n    \n    // 배치 처리로 성능 최적화\n    for (let i = 1; i < lines.length; i += this.CHUNK_SIZE) {\n      const endIndex = Math.min(i + this.CHUNK_SIZE, lines.length);\n      const batch = lines.slice(i, endIndex);\n      \n      // 배치 단위 처리\n      for (const line of batch) {\n        if (!line.trim()) continue;\n        \n        try {\n          const values = this.parseCSVLine(line);\n          if (values.length < headers.length) continue;\n          \n          const recipe = this.createRecipeObject(headers, values);\n          if (recipe && this.isValidRecipe(recipe)) {\n            recipes.push(recipe);\n          }\n        } catch (error) {\n          // 개별 라인 파싱 실패는 스킵\n          continue;\n        }\n      }\n      \n      // UI 블로킹 방지 (매 청크마다 양보)\n      if (i % (this.CHUNK_SIZE * 5) === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n        console.log(`⚡ 파싱 진행: ${Math.round(i / lines.length * 100)}%`);\n      }\n    }\n    \n          console.log(`✅ 파싱 완료: ${recipes.length}/${lines.length - 1}개 성공`);\n    \n    // 🔍 디버깅: 첫 3개 레시피 샘플 출력\n    if (recipes.length > 0) {\n      console.log('📋 파싱된 레시피 샘플:');\n      recipes.slice(0, 3).forEach((recipe, index) => {\n        console.log(`  ${index + 1}. ${recipe.RCP_TTL || recipe.CKG_NM}`);\n        console.log(`     - 재료: ${recipe.CKG_MTRL_CN?.substring(0, 100)}...`);\n        console.log(`     - 조리법: ${recipe.CKG_MTH_ACTO_NM}`);\n        console.log(`     - 상황: ${recipe.CKG_STA_ACTO_NM}`);\n      });\n    }\n    \n    return recipes;\n  }\n\n  // 🎯 목표별 고성능 레시피 조회\n  async getRecipesByGoal(goal: 'weight_loss' | 'muscle_gain' | 'maintenance', limit: number = 200): Promise<MankaeLRecipeRaw[]> {\n    const cacheKey = `goal_${goal}_${limit}`;\n    \n    // 캐시 확인\n    const cached = this.getValidCache(cacheKey);\n    if (cached) {\n      console.log(`⚡ ${goal} 캐시 히트!`);\n      return cached.data;\n    }\n\n    console.log(`🎯 ${goal} 고성능 검색 시작...`);\n    const startTime = performance.now();\n\n    // 전체 데이터 로드\n    const allRecipes = await this.loadCSVOptimized();\n    \n    // 🔥 목표별 키워드 대폭 확대 (실제 데이터에 맞춰서)\n    const goalKeywords = {\n      weight_loss: [\n        '다이어트', '저칼로리', '살빼기', '체중감량', '샐러드', '야채', '채소', '저지방', '헬시', '칼로리', '무침', '삶기', '찌기', '국', '탕',\n        '배추', '브로콜리', '양배추', '콩나물', '시금치', '무', '당근', '버섯', '양파', '대파', '쪽파', '깻잎', '상추', '쌈채소', '청경채',\n        '부추', '미나리', '김', '미역', '파래', '김치', '콩', '두부', '연두부', '순두부', '된장', '간장', '참기름', '들기름', '올리브오일',\n        '샐러드드레싱', '요거트', '과일', '사과', '바나나', '오렌지', '키위', '레몬', '토마토', '오이', '파프리카', '피망', '가지', '호박',\n        '감자', '고구마', '옥수수', '완두콩', '병아리콩', '렌틸콩', '현미', '귀리', '보리', '퀴노아', '통곡물', '통밀빵', '현미밥', '잡곡밥',\n        '닭가슴살', '생선', '연어', '참치', '고등어', '갈치', '멸치', '김', '미역', '다시마', '조개', '새우', '문어', '오징어',\n        '닭', '오리고기', '소고기', '돼지고기', '양고기', '계란', '달걀', '메추리알', '삶은계란', '찐계란', '계란찜', '스크램블',\n        '요구르트', '치즈', '저지방치즈', '코티지치즈', '리코타치즈', '두유', '아몬드', '호두', '잣', '참깨', '들깨', '해바라기씨',\n        '슬림', '라이트', '제로', '무가당', '무설탕', '무염', '저염', '저나트륨', '저콜레스테롤', '저트랜스지방', '무트랜스지방',\n        '디톡스', '클린', '그린', '비건', '락토오보', '락토', '오보', '페스코', '플렉시테리언', '세미베지테리언'\n      ],\n      muscle_gain: ['단백질', '근육', '고단백', '닭가슴살', '소고기', '계란', '프로틴', '근력', '운동', '닭', '돼지', '새우', '연어', '참치', '두부', '굽기', '볶기', '구이', '튀기기', '찌기', '삶기', '고기', '육류', '생선', '해산물', '유제품', '치즈', '요거트', '우유', '단백질쉐이크', '프로틴파우더', '크레아틴', '글루타민', 'BCAA', '아미노산', '벌크', '벌킹', '머슬', '스트렝스', '웨이트', '피트니스', '바디빌딩', '보디빌딩', '헬스', '짐', '운동', 'PT', '크로스핏', '요가', '필라테스'],\n      maintenance: ['건강', '균형', '일상', '집밥', '영양', '웰빙', '가정식', '보양', '만들기', '레시피', '요리', '밥', '국', '찌개', '전골', '탕', '찌개', '볶음', '구이', '튀김', '무침', '비빔밥', '덮밥', '볶음밥', '김치찌개', '된장찌개', '순두부찌개', '부대찌개', '돼지고기', '소고기', '닭고기', '생선', '채소', '과일', '쌀', '밀가루', '빵', '파스타', '국수', '면', '떡', '죽', '스프', '수프', '샐러드', '샌드위치']\n    };\n\n    const keywords = goalKeywords[goal];\n    console.log(`🔍 ${goal} 키워드 개수: ${keywords.length}개`);\n    \n    // 고성능 필터링 (단일 패스)\n    const filteredRecipes: MankaeLRecipeRaw[] = [];\n    \n    for (const recipe of allRecipes) {\n      // 🔍 각 레시피별 상세 디버깅 (처음 5개만)\n      if (filteredRecipes.length < 5) {\n        console.log(`\\n🧪 레시피 검사: \"${recipe.RCP_TTL || recipe.CKG_NM}\"`);\n        console.log(`   - 제목: ${recipe.RCP_TTL}`);\n        console.log(`   - 요리명: ${recipe.CKG_NM}`);\n        console.log(`   - 소개: ${recipe.CKG_IPDC?.substring(0, 50)}...`);\n        console.log(`   - 재료: ${recipe.CKG_MTRL_CN?.substring(0, 50)}...`);\n        console.log(`   - 주재료: ${recipe.CKG_MTRL_ACTO_NM}`);\n        console.log(`   - 상황: ${recipe.CKG_STA_ACTO_NM}`);\n      }\n      \n      // 빠른 키워드 매칭 (정규식 대신 includes 사용) - 재료 필드 추가!\n      const hasKeyword = keywords.some(keyword =>\n        recipe.RCP_TTL?.includes(keyword) ||\n        recipe.CKG_NM?.includes(keyword) ||\n        recipe.CKG_IPDC?.includes(keyword) ||\n        recipe.CKG_STA_ACTO_NM?.includes(keyword) ||\n        recipe.CKG_MTRL_ACTO_NM?.includes(keyword) ||\n        recipe.CKG_MTRL_CN?.includes(keyword)  // 🔥 재료 필드도 검색!\n      );\n      \n      if (hasKeyword) {\n        filteredRecipes.push(recipe);\n        \n        // 🔥 상세 디버깅: 키워드 매칭 세부 정보 출력\n        if (goal === 'weight_loss') {\n          const matchedKeywords = keywords.filter(keyword =>\n            recipe.RCP_TTL?.includes(keyword) ||\n            recipe.CKG_NM?.includes(keyword) ||\n            recipe.CKG_IPDC?.includes(keyword) ||\n            recipe.CKG_STA_ACTO_NM?.includes(keyword) ||\n            recipe.CKG_MTRL_ACTO_NM?.includes(keyword) ||\n            recipe.CKG_MTRL_CN?.includes(keyword)\n          );\n\n          if (matchedKeywords.length > 0) {\n            console.log(`🔍 ${goal} 키워드 매칭: \"${recipe.RCP_TTL}\"`);\n            console.log(`   - 매칭 키워드: [${matchedKeywords.join(', ')}]`);\n            console.log(`   - 재료 샘플: ${recipe.CKG_MTRL_CN?.substring(0, 100)}...`);\n            console.log(`   - 총 매칭 레시피: ${filteredRecipes.length}개`);\n          }\n        }\n      }\n      \n      // 조기 종료 (충분한 결과) - 더 많은 레시피 확보를 위해 완화\n      if (filteredRecipes.length >= limit * 3) {\n        console.log(`🎯 충분한 레시피 확보: ${filteredRecipes.length}개 → 조기 종료`);\n        break;\n      }\n    }\n\n    // 품질 기반 정렬 (조회수 + 스크랩수)\n    const sortedRecipes = filteredRecipes\n      .sort((a, b) => {\n        const scoreA = (a.INQ_CNT || 0) * 0.7 + (a.SRAP_CNT || 0) * 0.3;\n        const scoreB = (b.INQ_CNT || 0) * 0.7 + (b.SRAP_CNT || 0) * 0.3;\n        return scoreB - scoreA;\n      })\n      .slice(0, limit);\n\n    // 결과 캐싱\n    this.setCache(cacheKey, sortedRecipes);\n    \n    const endTime = performance.now();\n    console.log(`✅ ${goal} 고성능 검색 완료: ${sortedRecipes.length}개 (${Math.round(endTime - startTime)}ms)`);\n    console.log(`🔍 ${goal} 필터링 결과: 전체 ${allRecipes.length}개 중 ${filteredRecipes.length}개 키워드 매칭, 최종 ${sortedRecipes.length}개 선택`);\n    \n    return sortedRecipes;\n  }\n\n  // 🔧 유틸리티 메소드들\n  private parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    result.push(current.trim());\n    return result;\n  }\n\n  private createRecipeObject(headers: string[], values: string[]): MankaeLRecipeRaw | null {\n    try {\n      const recipe: any = {};\n      \n      // 필수 필드만 매핑 (성능 최적화)\n      const essentialFields = [\n        'RCP_SNO', 'RCP_TTL', 'CKG_NM', 'RGTR_NM', \n        'INQ_CNT', 'SRAP_CNT', 'CKG_MTH_ACTO_NM', \n        'CKG_STA_ACTO_NM', 'CKG_IPDC', 'CKG_MTRL_CN'\n      ];\n      \n      for (let i = 0; i < headers.length && i < values.length; i++) {\n        const header = headers[i].trim();\n        if (essentialFields.includes(header)) {\n          recipe[header] = values[i];\n        }\n      }\n      \n      // 숫자 필드 변환\n      recipe.INQ_CNT = parseInt(recipe.INQ_CNT) || 0;\n      recipe.SRAP_CNT = parseInt(recipe.SRAP_CNT) || 0;\n      recipe.RCMM_CNT = parseInt(recipe.RCMM_CNT) || 0;\n      \n      return recipe as MankaeLRecipeRaw;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private isValidRecipe(recipe: MankaeLRecipeRaw): boolean {\n    return !!(recipe.RCP_SNO && recipe.RCP_TTL && recipe.CKG_NM);\n  }\n\n  // 캐시 관리\n  private getValidCache(key: string): ProcessedCache | null {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n    \n    if (Date.now() - cached.timestamp > this.CACHE_TTL) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return cached;\n  }\n\n  private setCache(key: string, data: MankaeLRecipeRaw[]): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      version: '1.0'\n    });\n  }\n\n  // 🧹 메모리 정리\n  clearCache(): void {\n    this.cache.clear();\n    console.log('🧹 캐시 클리어 완료');\n  }\n\n  // 📊 성능 통계\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// 싱글톤 인스턴스\nexport const optimizedCSVProcessor = OptimizedCSVProcessor.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/components/InputScreen.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, VStack, Button, HStack, useToast, Spinner } from '@chakra-ui/react';\nimport { useAppContext } from '../context/AppContext';\nimport { getRecommendationMessage } from '../data/mockProducts';\nimport { fastRecommendationEngine } from '../utils/fastRecommendationEngine';\nimport { recipeLoader } from '../data/recipeData'; // 캐시 클리어용\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor'; // CSV 캐시 클리어용\n\nimport { calculateCompleteNutrition } from '../utils/calorieCalculator';\nimport Layout from './Layout/Layout';\n\n// 온보딩 컴포넌트들 (간소화)\nimport ProgressIndicator from './Onboarding/ProgressIndicator';\nimport GoalSelection from './Onboarding/GoalSelection';\nimport BudgetSelection from './Onboarding/BudgetSelection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 🎯 목표 진행도 계산 헬퍼 함수\nconst calculateGoalProgress = (userProfile, targets) => {\n  const {\n    goal,\n    weight\n  } = userProfile;\n  const progressMessages = {\n    weight_loss: {\n      message: `${targets.targetCalories}kcal 식단으로 건강한 체중감량 진행중!`,\n      percentage: 0,\n      // 실제로는 시작 체중 대비 현재 진행률\n      nextMilestone: '첫 1kg 감량까지 약 2주 예상'\n    },\n    muscle_gain: {\n      message: `일일 단백질 ${Math.round(targets.dailyProteinNeeds)}g로 근성장 최적화!`,\n      percentage: 0,\n      nextMilestone: '첫 근력 향상까지 약 4주 예상'\n    },\n    maintenance: {\n      message: `${weight}kg 건강 체중 유지를 위한 균형 식단!`,\n      percentage: 100,\n      // 유지 목표는 100%\n      nextMilestone: '꾸준한 건강 관리가 목표!'\n    }\n  };\n  return progressMessages[goal || 'maintenance'];\n};\nconst InputScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const {\n    // 기존 상태\n    setUserInput,\n    setRecommendationResult,\n    isLoading,\n    setIsLoading,\n    // 새로운 온보딩 상태\n    userProfile,\n    updateUserProfile,\n    currentStep,\n    setCurrentStep,\n    completedSteps,\n    setCompletedSteps,\n    calorieCalculation,\n    setCalorieCalculation,\n    setIsOnboardingComplete\n  } = useAppContext();\n\n  // 단계별 필수 조건 체크 (간소화)\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 'goal':\n        return userProfile.goal !== undefined;\n      case 'budget':\n        return userProfile.budget && userProfile.budget > 0;\n      case 'basic_info':\n        return userProfile.gender && userProfile.height && userProfile.weight && userProfile.age && userProfile.activityLevel;\n      default:\n        return false;\n    }\n  };\n\n  // 다음 단계로 이동\n  const handleNext = () => {\n    if (!isStepValid()) {\n      toast({\n        title: '정보를 입력해주세요',\n        description: '다음 단계로 진행하기 위해 필요한 정보를 모두 입력해주세요.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n\n    // 현재 단계를 완료된 단계에 추가\n    if (!completedSteps.includes(currentStep)) {\n      setCompletedSteps([...completedSteps, currentStep]);\n    }\n\n    // 다음 단계로 이동\n    const stepOrder = ['gender', 'body_metrics', 'goal', 'activity', 'calories', 'budget'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    if (currentIndex < stepOrder.length - 1) {\n      setCurrentStep(stepOrder[currentIndex + 1]);\n    }\n  };\n\n  // 이전 단계로 이동\n  const handlePrevious = () => {\n    const stepOrder = ['gender', 'body_metrics', 'goal', 'activity', 'calories', 'budget'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    if (currentIndex > 0) {\n      setCurrentStep(stepOrder[currentIndex - 1]);\n    }\n  };\n\n  // 칼로리 계산\n  useEffect(() => {\n    if (userProfile.gender && userProfile.height && userProfile.weight && userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      const calculation = calculateCompleteNutrition(userProfile);\n      setCalorieCalculation(calculation);\n    }\n  }, [userProfile, setCalorieCalculation]);\n\n  // 온보딩 완료 및 식단 추천\n  const handleComplete = async () => {\n    if (!calorieCalculation) {\n      toast({\n        title: '계산 오류',\n        description: '칼로리 계산에 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // 온보딩 완료 표시\n      setIsOnboardingComplete(true);\n\n      // 기존 UserInput 형식으로 변환하여 저장\n      const inputData = {\n        budget: userProfile.budget,\n        // 사용자가 설정한 예산 사용\n        nutrients: calorieCalculation.macros\n      };\n      setUserInput(inputData);\n\n      // 🚀 초고속 로딩 (더미 지연 제거)\n      // await new Promise(resolve => setTimeout(resolve, 500)); // 제거\n\n      // 사용자 선호도와 히스토리 시뮬레이션 (실제로는 localStorage나 DB에서 가져옴)\n      const preferences = {\n        cookingTime: userProfile.goal === 'weight_loss' ? 'quick' : 'normal',\n        difficulty: 'easy',\n        priceRange: inputData.budget > 400000 ? 'premium' : inputData.budget > 250000 ? 'standard' : 'budget'\n      };\n      const history = {\n        purchasedProducts: [],\n        // 실제로는 구매 이력\n        cookedRecipes: [],\n        // 실제로는 조리 이력\n        favoriteIngredients: [] // 실제로는 선호 재료\n      };\n\n      // 🚀 초고속 개인맞춤 추천 실행!\n      console.log('⚡ 초고속 추천 엔진 사용');\n\n      // 🔥 모든 캐시 클리어 (문제 해결용)\n      fastRecommendationEngine.clearCache();\n      recipeLoader.clearCache(); // 레시피 캐시도 클리어!\n      optimizedCSVProcessor.clearCache(); // CSV 캐시도 클리어!\n      console.log('🧹 모든 캐시 클리어 완료');\n\n      // 🔍 시스템 진단 실행\n      await recipeLoader.diagnoseCacheStatus();\n      const fastResult = await fastRecommendationEngine.generateFastRecommendations(userProfile, calorieCalculation, inputData.budget);\n\n      // 💰 호환성을 위해 기존 형식으로 변환\n      const personalizedResult = {\n        recommendedRecipes: fastResult.recommendedRecipes,\n        budgetAnalysis: fastResult.budgetAnalysis,\n        personalizedMessage: `🎯 ${userProfile.goal === 'weight_loss' ? '체중 감량' : userProfile.goal === 'muscle_gain' ? '근육 증가' : '체중 유지'} 목표에 맞는 맞춤 레시피를 추천드립니다!`,\n        nutritionTargets: {\n          targetCalories: calorieCalculation.tdee,\n          macroGrams: calorieCalculation.macros,\n          dailyTargets: {\n            calories: calorieCalculation.tdee,\n            protein: calorieCalculation.macros.protein,\n            carb: calorieCalculation.macros.carb,\n            fat: calorieCalculation.macros.fat\n          },\n          dailyProteinNeeds: calorieCalculation.macros.protein,\n          macroPercentages: {\n            protein: 25,\n            carb: 50,\n            fat: 25\n          }\n        },\n        recommendedProducts: [],\n        // 빠른 로딩을 위해 일단 빈 배열\n        context: {\n          userProfile: userProfile,\n          calorieCalculation,\n          currentTime: new Date(),\n          preferences,\n          history\n        }\n      };\n\n      // 🍳 레시피 기반 정확한 예산 계산!\n      const recommendedRecipeList = personalizedResult.recommendedRecipes || [];\n\n      // 🚀 초고속 레시피 처리 (복잡한 계산 최소화)\n      const meals = recommendedRecipeList.slice(0, 3).map((recipe, index) => {\n        var _personalizedResult$b;\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[index] || 'breakfast';\n\n        // 빠른 추정치 사용 (실제 재료 계산 생략)\n        const estimatedCost = ((_personalizedResult$b = personalizedResult.budgetAnalysis.costBreakdown[index]) === null || _personalizedResult$b === void 0 ? void 0 : _personalizedResult$b.monthlyCost) || 45000;\n        const estimatedNutrition = {\n          calories: 400 + index * 50,\n          protein: 25 + index * 5,\n          carb: 45 + index * 10,\n          fat: 15 + index * 3\n        };\n        return {\n          id: mealType,\n          recipe: recipe,\n          products: [{\n            // 간단한 더미 데이터\n            name: recipe.name + ' 재료 세트',\n            price: estimatedCost,\n            usedQuantity: 1,\n            costPerRecipe: estimatedCost / 30,\n            monthlyNeeded: 1\n          }],\n          totalPrice: estimatedCost,\n          totalNutrition: estimatedNutrition,\n          mealType: mealType,\n          servings: 30\n        };\n      });\n\n      // 🚀 빈 슬롯을 간단히 채우기 (복잡한 처리 생략)\n      while (meals.length < 3) {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[meals.length];\n\n        // 기본 더미 레시피 (빠른 로딩)\n        meals.push({\n          id: mealType,\n          recipe: {\n            id: `default-${mealType}`,\n            name: `추천 ${mealType === 'breakfast' ? '아침' : mealType === 'lunch' ? '점심' : '저녁'} 레시피`,\n            description: '개인 맞춤 레시피를 준비 중입니다.',\n            image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400'\n          },\n          products: [],\n          totalPrice: 45000,\n          totalNutrition: {\n            calories: 400,\n            protein: 25,\n            carb: 45,\n            fat: 15\n          },\n          mealType: mealType,\n          servings: 30\n        });\n      }\n\n      // 💰 예산 분석 결과 활용 (정확한 예산 계산)\n      const totalBudgetUsed = personalizedResult.budgetAnalysis.totalEstimatedCost;\n      const budgetRemaining = inputData.budget - totalBudgetUsed;\n\n      // 🎯 개인맞춤 RecommendationResult 생성\n      const result = {\n        meals,\n        totalBudgetUsed,\n        budgetRemaining,\n        nutritionBalance: calorieCalculation.macros,\n        message: personalizedResult.personalizedMessage,\n        // 🌟 개인맞춤 메시지!\n        nutritionTargets: personalizedResult.nutritionTargets,\n        // 🎯 개인 영양 목표\n        recommendedRecipes: personalizedResult.recommendedRecipes,\n        // 🍳 맞춤 레시피\n        userInsights: {\n          dailyCalorieGoal: personalizedResult.nutritionTargets.targetCalories,\n          proteinNeeds: personalizedResult.nutritionTargets.dailyProteinNeeds,\n          budgetPerMeal: Math.round(inputData.budget / 30 / 3),\n          // 끼니당 예산\n          goalProgress: calculateGoalProgress(userProfile, personalizedResult.nutritionTargets)\n        }\n      };\n      setRecommendationResult(result);\n      toast({\n        title: '맞춤 식단 완성! 🎉',\n        description: getRecommendationMessage(userProfile.goal),\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n\n      // 추천 결과 페이지로 이동\n      navigate('/recommendations');\n    } catch (error) {\n      toast({\n        title: '오류 발생',\n        description: '식단 추천 중 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 현재 단계에 맞는 컴포넌트 렌더링\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'gender':\n        return /*#__PURE__*/_jsxDEV(GenderSelection, {\n          selectedGender: userProfile.gender,\n          onGenderSelect: gender => updateUserProfile({\n            gender\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this);\n      case 'body_metrics':\n        return /*#__PURE__*/_jsxDEV(BodyMetrics, {\n          height: userProfile.height || 170,\n          weight: userProfile.weight || 70,\n          age: userProfile.age || 25,\n          onMetricsChange: metrics => updateUserProfile(metrics)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this);\n      case 'goal':\n        return /*#__PURE__*/_jsxDEV(GoalSelection, {\n          selectedGoal: userProfile.goal,\n          onGoalSelect: goal => updateUserProfile({\n            goal\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this);\n      case 'activity':\n        return /*#__PURE__*/_jsxDEV(ActivityLevel, {\n          selectedActivity: userProfile.activityLevel,\n          onActivitySelect: activityLevel => updateUserProfile({\n            activityLevel\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this);\n      case 'calories':\n        return calorieCalculation ? /*#__PURE__*/_jsxDEV(CalorieReview, {\n          calculation: calorieCalculation,\n          userGoal: userProfile.goal,\n          onCaloriesChange: (calories, useCustom) => {\n            if (useCustom) {\n              // 커스텀 칼로리 사용 시 영양소 비율 재계산\n              const updatedCalculation = {\n                ...calorieCalculation,\n                targetCalories: calories\n              };\n              setCalorieCalculation(updatedCalculation);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this) : null;\n      case 'budget':\n        return /*#__PURE__*/_jsxDEV(BudgetSelection, {\n          selectedBudget: userProfile.budget || 300000,\n          onBudgetSelect: budget => updateUserProfile({\n            budget\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this);\n      default:\n        return null;\n    }\n  };\n  const stepOrder = ['gender', 'body_metrics', 'goal', 'activity', 'calories', 'budget'];\n  const currentIndex = stepOrder.indexOf(currentStep);\n  const isFirstStep = currentIndex === 0;\n  const isLastStep = currentIndex === stepOrder.length - 1;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxW: \"4xl\",\n      py: 8,\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        spacing: 8,\n        align: \"stretch\",\n        children: [/*#__PURE__*/_jsxDEV(ProgressIndicator, {\n          currentStep: currentStep,\n          completedSteps: completedSteps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this), renderCurrentStep(), /*#__PURE__*/_jsxDEV(HStack, {\n          justify: \"space-between\",\n          pt: 4,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline\",\n            onClick: handlePrevious,\n            isDisabled: isFirstStep,\n            leftIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2190\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 25\n            }, this),\n            children: \"\\uC774\\uC804\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), isLastStep ? /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"teal\",\n            size: \"lg\",\n            onClick: handleComplete,\n            isLoading: isLoading,\n            loadingText: \"\\uC2DD\\uB2E8 \\uC0DD\\uC131 \\uC911...\",\n            isDisabled: !isStepValid(),\n            rightIcon: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n              size: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83C\\uDF89\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 64\n            }, this),\n            px: 8,\n            children: isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"teal\",\n            onClick: handleNext,\n            isDisabled: !isStepValid(),\n            rightIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 28\n            }, this),\n            children: \"\\uB2E4\\uC74C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }, this);\n};\n_s(InputScreen, \"M6R6IQxYXmL13ANiMmqd4BVt3d8=\", false, function () {\n  return [useNavigate, useToast, useAppContext];\n});\n_c = InputScreen;\nexport default InputScreen;\nvar _c;\n$RefreshReg$(_c, \"InputScreen\");","map":{"version":3,"names":["React","useEffect","useNavigate","Container","VStack","Button","HStack","useToast","Spinner","useAppContext","getRecommendationMessage","fastRecommendationEngine","recipeLoader","optimizedCSVProcessor","calculateCompleteNutrition","Layout","ProgressIndicator","GoalSelection","BudgetSelection","jsxDEV","_jsxDEV","calculateGoalProgress","userProfile","targets","goal","weight","progressMessages","weight_loss","message","targetCalories","percentage","nextMilestone","muscle_gain","Math","round","dailyProteinNeeds","maintenance","InputScreen","_s","navigate","toast","setUserInput","setRecommendationResult","isLoading","setIsLoading","updateUserProfile","currentStep","setCurrentStep","completedSteps","setCompletedSteps","calorieCalculation","setCalorieCalculation","setIsOnboardingComplete","isStepValid","undefined","budget","gender","height","age","activityLevel","handleNext","title","description","status","duration","isClosable","includes","stepOrder","currentIndex","indexOf","length","handlePrevious","calculation","handleComplete","inputData","nutrients","macros","preferences","cookingTime","difficulty","priceRange","history","purchasedProducts","cookedRecipes","favoriteIngredients","console","log","clearCache","diagnoseCacheStatus","fastResult","generateFastRecommendations","personalizedResult","recommendedRecipes","budgetAnalysis","personalizedMessage","nutritionTargets","tdee","macroGrams","dailyTargets","calories","protein","carb","fat","macroPercentages","recommendedProducts","context","currentTime","Date","recommendedRecipeList","meals","slice","map","recipe","index","_personalizedResult$b","mealTypes","mealType","estimatedCost","costBreakdown","monthlyCost","estimatedNutrition","id","products","name","price","usedQuantity","costPerRecipe","monthlyNeeded","totalPrice","totalNutrition","servings","push","image","totalBudgetUsed","totalEstimatedCost","budgetRemaining","result","nutritionBalance","userInsights","dailyCalorieGoal","proteinNeeds","budgetPerMeal","goalProgress","error","renderCurrentStep","GenderSelection","selectedGender","onGenderSelect","fileName","_jsxFileName","lineNumber","columnNumber","BodyMetrics","onMetricsChange","metrics","selectedGoal","onGoalSelect","ActivityLevel","selectedActivity","onActivitySelect","CalorieReview","userGoal","onCaloriesChange","useCustom","updatedCalculation","selectedBudget","onBudgetSelect","isFirstStep","isLastStep","children","maxW","py","spacing","align","justify","pt","variant","onClick","isDisabled","leftIcon","colorScheme","size","loadingText","rightIcon","px","_c","$RefreshReg$"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/components/InputScreen.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  VStack,\n  Button,\n  HStack,\n  useToast,\n  Spinner,\n} from '@chakra-ui/react';\nimport { useAppContext } from '../context/AppContext';\nimport { getRecommendationMessage } from '../data/mockProducts';\nimport { fastRecommendationEngine } from '../utils/fastRecommendationEngine';\nimport { recipeLoader } from '../data/recipeData'; // 캐시 클리어용\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor'; // CSV 캐시 클리어용\nimport { RecommendationResult, UserProfile, PersonalizedNutritionTargets } from '../types';\nimport { calculateCompleteNutrition } from '../utils/calorieCalculator';\nimport Layout from './Layout/Layout';\n\n// 온보딩 컴포넌트들 (간소화)\nimport ProgressIndicator from './Onboarding/ProgressIndicator';\nimport GoalSelection from './Onboarding/GoalSelection';\nimport BudgetSelection from './Onboarding/BudgetSelection';\nimport BasicInfo from './Onboarding/BasicInfo';\n\n\n\n// 🎯 목표 진행도 계산 헬퍼 함수\nconst calculateGoalProgress = (userProfile: Partial<UserProfile>, targets: PersonalizedNutritionTargets) => {\n  const { goal, weight } = userProfile;\n  \n  const progressMessages = {\n    weight_loss: {\n      message: `${targets.targetCalories}kcal 식단으로 건강한 체중감량 진행중!`,\n      percentage: 0, // 실제로는 시작 체중 대비 현재 진행률\n      nextMilestone: '첫 1kg 감량까지 약 2주 예상'\n    },\n    muscle_gain: {\n      message: `일일 단백질 ${Math.round(targets.dailyProteinNeeds)}g로 근성장 최적화!`,\n      percentage: 0,\n      nextMilestone: '첫 근력 향상까지 약 4주 예상'\n    },\n    maintenance: {\n      message: `${weight}kg 건강 체중 유지를 위한 균형 식단!`,\n      percentage: 100, // 유지 목표는 100%\n      nextMilestone: '꾸준한 건강 관리가 목표!'\n    }\n  };\n\n  return progressMessages[goal || 'maintenance'];\n};\n\nconst InputScreen: React.FC = () => {\n  const navigate = useNavigate();\n  const toast = useToast();\n  \n  const {\n    // 기존 상태\n    setUserInput,\n    setRecommendationResult,\n    isLoading,\n    setIsLoading,\n    // 새로운 온보딩 상태\n    userProfile,\n    updateUserProfile,\n    currentStep,\n    setCurrentStep,\n    completedSteps,\n    setCompletedSteps,\n    calorieCalculation,\n    setCalorieCalculation,\n\n    setIsOnboardingComplete,\n  } = useAppContext();\n\n  // 단계별 필수 조건 체크 (간소화)\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 'goal':\n        return userProfile.goal !== undefined;\n      case 'budget':\n        return userProfile.budget && userProfile.budget > 0;\n      case 'basic_info':\n        return userProfile.gender && userProfile.height && userProfile.weight && \n               userProfile.age && userProfile.activityLevel;\n      default:\n        return false;\n    }\n  };\n\n  // 다음 단계로 이동\n  const handleNext = () => {\n    if (!isStepValid()) {\n      toast({\n        title: '정보를 입력해주세요',\n        description: '다음 단계로 진행하기 위해 필요한 정보를 모두 입력해주세요.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // 현재 단계를 완료된 단계에 추가\n    if (!completedSteps.includes(currentStep)) {\n      setCompletedSteps([...completedSteps, currentStep]);\n    }\n\n    // 다음 단계로 이동\n    const stepOrder: (typeof currentStep)[] = ['gender', 'body_metrics', 'goal', 'activity', 'calories', 'budget'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    \n    if (currentIndex < stepOrder.length - 1) {\n      setCurrentStep(stepOrder[currentIndex + 1]);\n    }\n  };\n\n  // 이전 단계로 이동\n  const handlePrevious = () => {\n    const stepOrder: (typeof currentStep)[] = ['gender', 'body_metrics', 'goal', 'activity', 'calories', 'budget'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    \n    if (currentIndex > 0) {\n      setCurrentStep(stepOrder[currentIndex - 1]);\n    }\n  };\n\n  // 칼로리 계산\n  useEffect(() => {\n    if (userProfile.gender && userProfile.height && userProfile.weight && \n        userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      const calculation = calculateCompleteNutrition(userProfile as UserProfile);\n      setCalorieCalculation(calculation);\n    }\n  }, [userProfile, setCalorieCalculation]);\n\n  // 온보딩 완료 및 식단 추천\n  const handleComplete = async () => {\n    if (!calorieCalculation) {\n      toast({\n        title: '계산 오류',\n        description: '칼로리 계산에 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // 온보딩 완료 표시\n      setIsOnboardingComplete(true);\n      \n      // 기존 UserInput 형식으로 변환하여 저장\n      const inputData = {\n        budget: userProfile.budget!, // 사용자가 설정한 예산 사용\n        nutrients: calorieCalculation.macros,\n      };\n      setUserInput(inputData);\n\n      // 🚀 초고속 로딩 (더미 지연 제거)\n      // await new Promise(resolve => setTimeout(resolve, 500)); // 제거\n\n      // 사용자 선호도와 히스토리 시뮬레이션 (실제로는 localStorage나 DB에서 가져옴)\n      const preferences = {\n        cookingTime: userProfile.goal === 'weight_loss' ? 'quick' as const : 'normal' as const,\n        difficulty: 'easy' as const,\n        priceRange: inputData.budget > 400000 ? 'premium' as const : \n                   inputData.budget > 250000 ? 'standard' as const : 'budget' as const\n      };\n\n      const history = {\n        purchasedProducts: [], // 실제로는 구매 이력\n        cookedRecipes: [],     // 실제로는 조리 이력\n        favoriteIngredients: [] // 실제로는 선호 재료\n      };\n\n      // 🚀 초고속 개인맞춤 추천 실행!\n      console.log('⚡ 초고속 추천 엔진 사용');\n      \n      // 🔥 모든 캐시 클리어 (문제 해결용)\n      fastRecommendationEngine.clearCache();\n      recipeLoader.clearCache(); // 레시피 캐시도 클리어!\n      optimizedCSVProcessor.clearCache(); // CSV 캐시도 클리어!\n      console.log('🧹 모든 캐시 클리어 완료');\n\n      // 🔍 시스템 진단 실행\n      await recipeLoader.diagnoseCacheStatus();\n      \n      const fastResult = await fastRecommendationEngine.generateFastRecommendations(\n        userProfile as UserProfile,\n        calorieCalculation,\n        inputData.budget\n      );\n      \n      // 💰 호환성을 위해 기존 형식으로 변환\n      const personalizedResult = {\n        recommendedRecipes: fastResult.recommendedRecipes,\n        budgetAnalysis: fastResult.budgetAnalysis,\n        personalizedMessage: `🎯 ${userProfile.goal === 'weight_loss' ? '체중 감량' : \n                                 userProfile.goal === 'muscle_gain' ? '근육 증가' : '체중 유지'} 목표에 맞는 맞춤 레시피를 추천드립니다!`,\n        nutritionTargets: {\n          targetCalories: calorieCalculation.tdee,\n          macroGrams: calorieCalculation.macros,\n          dailyTargets: {\n            calories: calorieCalculation.tdee,\n            protein: calorieCalculation.macros.protein,\n            carb: calorieCalculation.macros.carb,\n            fat: calorieCalculation.macros.fat\n          },\n          dailyProteinNeeds: calorieCalculation.macros.protein,\n          macroPercentages: {\n            protein: 25,\n            carb: 50,\n            fat: 25\n          }\n        },\n        recommendedProducts: [], // 빠른 로딩을 위해 일단 빈 배열\n        context: {\n          userProfile: userProfile as UserProfile,\n          calorieCalculation,\n          currentTime: new Date(),\n          preferences,\n          history\n        }\n      };\n\n\n\n      // 🍳 레시피 기반 정확한 예산 계산!\n      const recommendedRecipeList = personalizedResult.recommendedRecipes || [];\n      \n      // 🚀 초고속 레시피 처리 (복잡한 계산 최소화)\n      const meals: any[] = recommendedRecipeList.slice(0, 3).map((recipe, index) => {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[index] || 'breakfast';\n        \n        // 빠른 추정치 사용 (실제 재료 계산 생략)\n        const estimatedCost = personalizedResult.budgetAnalysis.costBreakdown[index]?.monthlyCost || 45000;\n        const estimatedNutrition = {\n          calories: 400 + index * 50,\n          protein: 25 + index * 5,\n          carb: 45 + index * 10,\n          fat: 15 + index * 3\n        };\n\n        return {\n          id: mealType,\n          recipe: recipe,\n          products: [{ // 간단한 더미 데이터\n            name: recipe.name + ' 재료 세트',\n            price: estimatedCost,\n            usedQuantity: 1,\n            costPerRecipe: estimatedCost / 30,\n            monthlyNeeded: 1\n          }],\n          totalPrice: estimatedCost,\n          totalNutrition: estimatedNutrition,\n          mealType: mealType,\n          servings: 30,\n        };\n      });\n\n      // 🚀 빈 슬롯을 간단히 채우기 (복잡한 처리 생략)\n      while (meals.length < 3) {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[meals.length];\n        \n        // 기본 더미 레시피 (빠른 로딩)\n        meals.push({\n          id: mealType,\n          recipe: {\n            id: `default-${mealType}`,\n            name: `추천 ${mealType === 'breakfast' ? '아침' : mealType === 'lunch' ? '점심' : '저녁'} 레시피`,\n            description: '개인 맞춤 레시피를 준비 중입니다.',\n            image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400'\n          },\n          products: [],\n          totalPrice: 45000,\n          totalNutrition: { calories: 400, protein: 25, carb: 45, fat: 15 },\n          mealType: mealType,\n          servings: 30,\n        });\n      }\n\n      // 💰 예산 분석 결과 활용 (정확한 예산 계산)\n      const totalBudgetUsed = personalizedResult.budgetAnalysis.totalEstimatedCost;\n      const budgetRemaining = inputData.budget - totalBudgetUsed;\n\n      // 🎯 개인맞춤 RecommendationResult 생성\n      const result: RecommendationResult = {\n        meals,\n        totalBudgetUsed,\n        budgetRemaining,\n        nutritionBalance: calorieCalculation.macros,\n        message: personalizedResult.personalizedMessage, // 🌟 개인맞춤 메시지!\n        nutritionTargets: personalizedResult.nutritionTargets, // 🎯 개인 영양 목표\n        recommendedRecipes: personalizedResult.recommendedRecipes, // 🍳 맞춤 레시피\n        userInsights: {\n          dailyCalorieGoal: personalizedResult.nutritionTargets.targetCalories,\n          proteinNeeds: personalizedResult.nutritionTargets.dailyProteinNeeds,\n          budgetPerMeal: Math.round(inputData.budget / 30 / 3), // 끼니당 예산\n          goalProgress: calculateGoalProgress(userProfile, personalizedResult.nutritionTargets as any)\n        }\n      };\n\n      setRecommendationResult(result);\n\n      toast({\n        title: '맞춤 식단 완성! 🎉',\n        description: getRecommendationMessage(userProfile.goal!),\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // 추천 결과 페이지로 이동\n      navigate('/recommendations');\n\n    } catch (error) {\n      toast({\n        title: '오류 발생',\n        description: '식단 추천 중 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 현재 단계에 맞는 컴포넌트 렌더링\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'gender':\n        return (\n          <GenderSelection\n            selectedGender={userProfile.gender}\n            onGenderSelect={(gender) => updateUserProfile({ gender })}\n          />\n        );\n      case 'body_metrics':\n        return (\n          <BodyMetrics\n            height={userProfile.height || 170}\n            weight={userProfile.weight || 70}\n            age={userProfile.age || 25}\n            onMetricsChange={(metrics) => updateUserProfile(metrics)}\n          />\n        );\n      case 'goal':\n        return (\n          <GoalSelection\n            selectedGoal={userProfile.goal}\n            onGoalSelect={(goal) => updateUserProfile({ goal })}\n          />\n        );\n      case 'activity':\n        return (\n          <ActivityLevel\n            selectedActivity={userProfile.activityLevel}\n            onActivitySelect={(activityLevel) => updateUserProfile({ activityLevel })}\n          />\n        );\n      case 'calories':\n        return calorieCalculation ? (\n          <CalorieReview\n            calculation={calorieCalculation}\n            userGoal={userProfile.goal!}\n            onCaloriesChange={(calories, useCustom) => {\n              if (useCustom) {\n                // 커스텀 칼로리 사용 시 영양소 비율 재계산\n                const updatedCalculation = {\n                  ...calorieCalculation,\n                  targetCalories: calories,\n                };\n                setCalorieCalculation(updatedCalculation);\n              }\n            }}\n          />\n        ) : null;\n      case 'budget':\n        return (\n          <BudgetSelection\n            selectedBudget={userProfile.budget || 300000}\n            onBudgetSelect={(budget) => updateUserProfile({ budget })}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  const stepOrder: (typeof currentStep)[] = ['gender', 'body_metrics', 'goal', 'activity', 'calories', 'budget'];\n  const currentIndex = stepOrder.indexOf(currentStep);\n  const isFirstStep = currentIndex === 0;\n  const isLastStep = currentIndex === stepOrder.length - 1;\n\n  return (\n    <Layout>\n      <Container maxW=\"4xl\" py={8}>\n        <VStack spacing={8} align=\"stretch\">\n          {/* 진행 상황 표시 */}\n          <ProgressIndicator\n            currentStep={currentStep}\n            completedSteps={completedSteps}\n          />\n\n          {/* 현재 단계 컴포넌트 */}\n          {renderCurrentStep()}\n\n          {/* 네비게이션 버튼 */}\n          <HStack justify=\"space-between\" pt={4}>\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevious}\n              isDisabled={isFirstStep}\n              leftIcon={<span>←</span>}\n            >\n              이전\n            </Button>\n\n            {isLastStep ? (\n              <Button\n                colorScheme=\"teal\"\n                size=\"lg\"\n                onClick={handleComplete}\n                isLoading={isLoading}\n                loadingText=\"식단 생성 중...\"\n                isDisabled={!isStepValid()}\n                rightIcon={isLoading ? <Spinner size=\"sm\" /> : <span>🎉</span>}\n                px={8}\n              >\n                {isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'}\n              </Button>\n            ) : (\n              <Button\n                colorScheme=\"teal\"\n                onClick={handleNext}\n                isDisabled={!isStepValid()}\n                rightIcon={<span>→</span>}\n              >\n                다음\n              </Button>\n            )}\n          </HStack>\n        </VStack>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default InputScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,SAAS,EACTC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,QAAQ,EACRC,OAAO,QACF,kBAAkB;AACzB,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,wBAAwB,QAAQ,mCAAmC;AAC5E,SAASC,YAAY,QAAQ,oBAAoB,CAAC,CAAC;AACnD,SAASC,qBAAqB,QAAQ,gCAAgC,CAAC,CAAC;;AAExE,SAASC,0BAA0B,QAAQ,4BAA4B;AACvE,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AACA,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,eAAe,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAK3D;AACA,MAAMC,qBAAqB,GAAGA,CAACC,WAAiC,EAAEC,OAAqC,KAAK;EAC1G,MAAM;IAAEC,IAAI;IAAEC;EAAO,CAAC,GAAGH,WAAW;EAEpC,MAAMI,gBAAgB,GAAG;IACvBC,WAAW,EAAE;MACXC,OAAO,EAAE,GAAGL,OAAO,CAACM,cAAc,yBAAyB;MAC3DC,UAAU,EAAE,CAAC;MAAE;MACfC,aAAa,EAAE;IACjB,CAAC;IACDC,WAAW,EAAE;MACXJ,OAAO,EAAE,UAAUK,IAAI,CAACC,KAAK,CAACX,OAAO,CAACY,iBAAiB,CAAC,aAAa;MACrEL,UAAU,EAAE,CAAC;MACbC,aAAa,EAAE;IACjB,CAAC;IACDK,WAAW,EAAE;MACXR,OAAO,EAAE,GAAGH,MAAM,wBAAwB;MAC1CK,UAAU,EAAE,GAAG;MAAE;MACjBC,aAAa,EAAE;IACjB;EACF,CAAC;EAED,OAAOL,gBAAgB,CAACF,IAAI,IAAI,aAAa,CAAC;AAChD,CAAC;AAED,MAAMa,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGrC,WAAW,CAAC,CAAC;EAC9B,MAAMsC,KAAK,GAAGjC,QAAQ,CAAC,CAAC;EAExB,MAAM;IACJ;IACAkC,YAAY;IACZC,uBAAuB;IACvBC,SAAS;IACTC,YAAY;IACZ;IACAtB,WAAW;IACXuB,iBAAiB;IACjBC,WAAW;IACXC,cAAc;IACdC,cAAc;IACdC,iBAAiB;IACjBC,kBAAkB;IAClBC,qBAAqB;IAErBC;EACF,CAAC,GAAG3C,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM4C,WAAW,GAAGA,CAAA,KAAM;IACxB,QAAQP,WAAW;MACjB,KAAK,MAAM;QACT,OAAOxB,WAAW,CAACE,IAAI,KAAK8B,SAAS;MACvC,KAAK,QAAQ;QACX,OAAOhC,WAAW,CAACiC,MAAM,IAAIjC,WAAW,CAACiC,MAAM,GAAG,CAAC;MACrD,KAAK,YAAY;QACf,OAAOjC,WAAW,CAACkC,MAAM,IAAIlC,WAAW,CAACmC,MAAM,IAAInC,WAAW,CAACG,MAAM,IAC9DH,WAAW,CAACoC,GAAG,IAAIpC,WAAW,CAACqC,aAAa;MACrD;QACE,OAAO,KAAK;IAChB;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACP,WAAW,CAAC,CAAC,EAAE;MAClBb,KAAK,CAAC;QACJqB,KAAK,EAAE,YAAY;QACnBC,WAAW,EAAE,mCAAmC;QAChDC,MAAM,EAAE,SAAS;QACjBC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACF;IACF;;IAEA;IACA,IAAI,CAACjB,cAAc,CAACkB,QAAQ,CAACpB,WAAW,CAAC,EAAE;MACzCG,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAEF,WAAW,CAAC,CAAC;IACrD;;IAEA;IACA,MAAMqB,SAAiC,GAAG,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC;IAC9G,MAAMC,YAAY,GAAGD,SAAS,CAACE,OAAO,CAACvB,WAAW,CAAC;IAEnD,IAAIsB,YAAY,GAAGD,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACvCvB,cAAc,CAACoB,SAAS,CAACC,YAAY,GAAG,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC;;EAED;EACA,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMJ,SAAiC,GAAG,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC;IAC9G,MAAMC,YAAY,GAAGD,SAAS,CAACE,OAAO,CAACvB,WAAW,CAAC;IAEnD,IAAIsB,YAAY,GAAG,CAAC,EAAE;MACpBrB,cAAc,CAACoB,SAAS,CAACC,YAAY,GAAG,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC;;EAED;EACAnE,SAAS,CAAC,MAAM;IACd,IAAIqB,WAAW,CAACkC,MAAM,IAAIlC,WAAW,CAACmC,MAAM,IAAInC,WAAW,CAACG,MAAM,IAC9DH,WAAW,CAACoC,GAAG,IAAIpC,WAAW,CAACE,IAAI,IAAIF,WAAW,CAACqC,aAAa,EAAE;MACpE,MAAMa,WAAW,GAAG1D,0BAA0B,CAACQ,WAA0B,CAAC;MAC1E6B,qBAAqB,CAACqB,WAAW,CAAC;IACpC;EACF,CAAC,EAAE,CAAClD,WAAW,EAAE6B,qBAAqB,CAAC,CAAC;;EAExC;EACA,MAAMsB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACvB,kBAAkB,EAAE;MACvBV,KAAK,CAAC;QACJqB,KAAK,EAAE,OAAO;QACdC,WAAW,EAAE,gCAAgC;QAC7CC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACF;IACF;IAEArB,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACAQ,uBAAuB,CAAC,IAAI,CAAC;;MAE7B;MACA,MAAMsB,SAAS,GAAG;QAChBnB,MAAM,EAAEjC,WAAW,CAACiC,MAAO;QAAE;QAC7BoB,SAAS,EAAEzB,kBAAkB,CAAC0B;MAChC,CAAC;MACDnC,YAAY,CAACiC,SAAS,CAAC;;MAEvB;MACA;;MAEA;MACA,MAAMG,WAAW,GAAG;QAClBC,WAAW,EAAExD,WAAW,CAACE,IAAI,KAAK,aAAa,GAAG,OAAO,GAAY,QAAiB;QACtFuD,UAAU,EAAE,MAAe;QAC3BC,UAAU,EAAEN,SAAS,CAACnB,MAAM,GAAG,MAAM,GAAG,SAAS,GACtCmB,SAAS,CAACnB,MAAM,GAAG,MAAM,GAAG,UAAU,GAAY;MAC/D,CAAC;MAED,MAAM0B,OAAO,GAAG;QACdC,iBAAiB,EAAE,EAAE;QAAE;QACvBC,aAAa,EAAE,EAAE;QAAM;QACvBC,mBAAmB,EAAE,EAAE,CAAC;MAC1B,CAAC;;MAED;MACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;MAE7B;MACA3E,wBAAwB,CAAC4E,UAAU,CAAC,CAAC;MACrC3E,YAAY,CAAC2E,UAAU,CAAC,CAAC,CAAC,CAAC;MAC3B1E,qBAAqB,CAAC0E,UAAU,CAAC,CAAC,CAAC,CAAC;MACpCF,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;MAE9B;MACA,MAAM1E,YAAY,CAAC4E,mBAAmB,CAAC,CAAC;MAExC,MAAMC,UAAU,GAAG,MAAM9E,wBAAwB,CAAC+E,2BAA2B,CAC3EpE,WAAW,EACX4B,kBAAkB,EAClBwB,SAAS,CAACnB,MACZ,CAAC;;MAED;MACA,MAAMoC,kBAAkB,GAAG;QACzBC,kBAAkB,EAAEH,UAAU,CAACG,kBAAkB;QACjDC,cAAc,EAAEJ,UAAU,CAACI,cAAc;QACzCC,mBAAmB,EAAE,MAAMxE,WAAW,CAACE,IAAI,KAAK,aAAa,GAAG,OAAO,GAC9CF,WAAW,CAACE,IAAI,KAAK,aAAa,GAAG,OAAO,GAAG,OAAO,yBAAyB;QACxGuE,gBAAgB,EAAE;UAChBlE,cAAc,EAAEqB,kBAAkB,CAAC8C,IAAI;UACvCC,UAAU,EAAE/C,kBAAkB,CAAC0B,MAAM;UACrCsB,YAAY,EAAE;YACZC,QAAQ,EAAEjD,kBAAkB,CAAC8C,IAAI;YACjCI,OAAO,EAAElD,kBAAkB,CAAC0B,MAAM,CAACwB,OAAO;YAC1CC,IAAI,EAAEnD,kBAAkB,CAAC0B,MAAM,CAACyB,IAAI;YACpCC,GAAG,EAAEpD,kBAAkB,CAAC0B,MAAM,CAAC0B;UACjC,CAAC;UACDnE,iBAAiB,EAAEe,kBAAkB,CAAC0B,MAAM,CAACwB,OAAO;UACpDG,gBAAgB,EAAE;YAChBH,OAAO,EAAE,EAAE;YACXC,IAAI,EAAE,EAAE;YACRC,GAAG,EAAE;UACP;QACF,CAAC;QACDE,mBAAmB,EAAE,EAAE;QAAE;QACzBC,OAAO,EAAE;UACPnF,WAAW,EAAEA,WAA0B;UACvC4B,kBAAkB;UAClBwD,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC;UACvB9B,WAAW;UACXI;QACF;MACF,CAAC;;MAID;MACA,MAAM2B,qBAAqB,GAAGjB,kBAAkB,CAACC,kBAAkB,IAAI,EAAE;;MAEzE;MACA,MAAMiB,KAAY,GAAGD,qBAAqB,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QAAA,IAAAC,qBAAA;QAC5E,MAAMC,SAAS,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC;QAClD,MAAMC,QAAQ,GAAGD,SAAS,CAACF,KAAK,CAAC,IAAI,WAAW;;QAEhD;QACA,MAAMI,aAAa,GAAG,EAAAH,qBAAA,GAAAvB,kBAAkB,CAACE,cAAc,CAACyB,aAAa,CAACL,KAAK,CAAC,cAAAC,qBAAA,uBAAtDA,qBAAA,CAAwDK,WAAW,KAAI,KAAK;QAClG,MAAMC,kBAAkB,GAAG;UACzBrB,QAAQ,EAAE,GAAG,GAAGc,KAAK,GAAG,EAAE;UAC1Bb,OAAO,EAAE,EAAE,GAAGa,KAAK,GAAG,CAAC;UACvBZ,IAAI,EAAE,EAAE,GAAGY,KAAK,GAAG,EAAE;UACrBX,GAAG,EAAE,EAAE,GAAGW,KAAK,GAAG;QACpB,CAAC;QAED,OAAO;UACLQ,EAAE,EAAEL,QAAQ;UACZJ,MAAM,EAAEA,MAAM;UACdU,QAAQ,EAAE,CAAC;YAAE;YACXC,IAAI,EAAEX,MAAM,CAACW,IAAI,GAAG,QAAQ;YAC5BC,KAAK,EAAEP,aAAa;YACpBQ,YAAY,EAAE,CAAC;YACfC,aAAa,EAAET,aAAa,GAAG,EAAE;YACjCU,aAAa,EAAE;UACjB,CAAC,CAAC;UACFC,UAAU,EAAEX,aAAa;UACzBY,cAAc,EAAET,kBAAkB;UAClCJ,QAAQ,EAAEA,QAAQ;UAClBc,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,OAAOrB,KAAK,CAACvC,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM6C,SAAS,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC;QAClD,MAAMC,QAAQ,GAAGD,SAAS,CAACN,KAAK,CAACvC,MAAM,CAAC;;QAExC;QACAuC,KAAK,CAACsB,IAAI,CAAC;UACTV,EAAE,EAAEL,QAAQ;UACZJ,MAAM,EAAE;YACNS,EAAE,EAAE,WAAWL,QAAQ,EAAE;YACzBO,IAAI,EAAE,MAAMP,QAAQ,KAAK,WAAW,GAAG,IAAI,GAAGA,QAAQ,KAAK,OAAO,GAAG,IAAI,GAAG,IAAI,MAAM;YACtFtD,WAAW,EAAE,qBAAqB;YAClCsE,KAAK,EAAE;UACT,CAAC;UACDV,QAAQ,EAAE,EAAE;UACZM,UAAU,EAAE,KAAK;UACjBC,cAAc,EAAE;YAAE9B,QAAQ,EAAE,GAAG;YAAEC,OAAO,EAAE,EAAE;YAAEC,IAAI,EAAE,EAAE;YAAEC,GAAG,EAAE;UAAG,CAAC;UACjEc,QAAQ,EAAEA,QAAQ;UAClBc,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMG,eAAe,GAAG1C,kBAAkB,CAACE,cAAc,CAACyC,kBAAkB;MAC5E,MAAMC,eAAe,GAAG7D,SAAS,CAACnB,MAAM,GAAG8E,eAAe;;MAE1D;MACA,MAAMG,MAA4B,GAAG;QACnC3B,KAAK;QACLwB,eAAe;QACfE,eAAe;QACfE,gBAAgB,EAAEvF,kBAAkB,CAAC0B,MAAM;QAC3ChD,OAAO,EAAE+D,kBAAkB,CAACG,mBAAmB;QAAE;QACjDC,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAAgB;QAAE;QACvDH,kBAAkB,EAAED,kBAAkB,CAACC,kBAAkB;QAAE;QAC3D8C,YAAY,EAAE;UACZC,gBAAgB,EAAEhD,kBAAkB,CAACI,gBAAgB,CAAClE,cAAc;UACpE+G,YAAY,EAAEjD,kBAAkB,CAACI,gBAAgB,CAAC5D,iBAAiB;UACnE0G,aAAa,EAAE5G,IAAI,CAACC,KAAK,CAACwC,SAAS,CAACnB,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC;UAAE;UACtDuF,YAAY,EAAEzH,qBAAqB,CAACC,WAAW,EAAEqE,kBAAkB,CAACI,gBAAuB;QAC7F;MACF,CAAC;MAEDrD,uBAAuB,CAAC8F,MAAM,CAAC;MAE/BhG,KAAK,CAAC;QACJqB,KAAK,EAAE,cAAc;QACrBC,WAAW,EAAEpD,wBAAwB,CAACY,WAAW,CAACE,IAAK,CAAC;QACxDuC,MAAM,EAAE,SAAS;QACjBC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;;MAEF;MACA1B,QAAQ,CAAC,kBAAkB,CAAC;IAE9B,CAAC,CAAC,OAAOwG,KAAK,EAAE;MACdvG,KAAK,CAAC;QACJqB,KAAK,EAAE,OAAO;QACdC,WAAW,EAAE,gCAAgC;QAC7CC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,SAAS;MACRrB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMoG,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,QAAQlG,WAAW;MACjB,KAAK,QAAQ;QACX,oBACE1B,OAAA,CAAC6H,eAAe;UACdC,cAAc,EAAE5H,WAAW,CAACkC,MAAO;UACnC2F,cAAc,EAAG3F,MAAM,IAAKX,iBAAiB,CAAC;YAAEW;UAAO,CAAC;QAAE;UAAA4F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CAAC;MAEN,KAAK,cAAc;QACjB,oBACEnI,OAAA,CAACoI,WAAW;UACV/F,MAAM,EAAEnC,WAAW,CAACmC,MAAM,IAAI,GAAI;UAClChC,MAAM,EAAEH,WAAW,CAACG,MAAM,IAAI,EAAG;UACjCiC,GAAG,EAAEpC,WAAW,CAACoC,GAAG,IAAI,EAAG;UAC3B+F,eAAe,EAAGC,OAAO,IAAK7G,iBAAiB,CAAC6G,OAAO;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC;MAEN,KAAK,MAAM;QACT,oBACEnI,OAAA,CAACH,aAAa;UACZ0I,YAAY,EAAErI,WAAW,CAACE,IAAK;UAC/BoI,YAAY,EAAGpI,IAAI,IAAKqB,iBAAiB,CAAC;YAAErB;UAAK,CAAC;QAAE;UAAA4H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC;MAEN,KAAK,UAAU;QACb,oBACEnI,OAAA,CAACyI,aAAa;UACZC,gBAAgB,EAAExI,WAAW,CAACqC,aAAc;UAC5CoG,gBAAgB,EAAGpG,aAAa,IAAKd,iBAAiB,CAAC;YAAEc;UAAc,CAAC;QAAE;UAAAyF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3E,CAAC;MAEN,KAAK,UAAU;QACb,OAAOrG,kBAAkB,gBACvB9B,OAAA,CAAC4I,aAAa;UACZxF,WAAW,EAAEtB,kBAAmB;UAChC+G,QAAQ,EAAE3I,WAAW,CAACE,IAAM;UAC5B0I,gBAAgB,EAAEA,CAAC/D,QAAQ,EAAEgE,SAAS,KAAK;YACzC,IAAIA,SAAS,EAAE;cACb;cACA,MAAMC,kBAAkB,GAAG;gBACzB,GAAGlH,kBAAkB;gBACrBrB,cAAc,EAAEsE;cAClB,CAAC;cACDhD,qBAAqB,CAACiH,kBAAkB,CAAC;YAC3C;UACF;QAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,GACA,IAAI;MACV,KAAK,QAAQ;QACX,oBACEnI,OAAA,CAACF,eAAe;UACdmJ,cAAc,EAAE/I,WAAW,CAACiC,MAAM,IAAI,MAAO;UAC7C+G,cAAc,EAAG/G,MAAM,IAAKV,iBAAiB,CAAC;YAAEU;UAAO,CAAC;QAAE;UAAA6F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CAAC;MAEN;QACE,OAAO,IAAI;IACf;EACF,CAAC;EAED,MAAMpF,SAAiC,GAAG,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC;EAC9G,MAAMC,YAAY,GAAGD,SAAS,CAACE,OAAO,CAACvB,WAAW,CAAC;EACnD,MAAMyH,WAAW,GAAGnG,YAAY,KAAK,CAAC;EACtC,MAAMoG,UAAU,GAAGpG,YAAY,KAAKD,SAAS,CAACG,MAAM,GAAG,CAAC;EAExD,oBACElD,OAAA,CAACL,MAAM;IAAA0J,QAAA,eACLrJ,OAAA,CAACjB,SAAS;MAACuK,IAAI,EAAC,KAAK;MAACC,EAAE,EAAE,CAAE;MAAAF,QAAA,eAC1BrJ,OAAA,CAAChB,MAAM;QAACwK,OAAO,EAAE,CAAE;QAACC,KAAK,EAAC,SAAS;QAAAJ,QAAA,gBAEjCrJ,OAAA,CAACJ,iBAAiB;UAChB8B,WAAW,EAAEA,WAAY;UACzBE,cAAc,EAAEA;QAAe;UAAAoG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,EAGDP,iBAAiB,CAAC,CAAC,eAGpB5H,OAAA,CAACd,MAAM;UAACwK,OAAO,EAAC,eAAe;UAACC,EAAE,EAAE,CAAE;UAAAN,QAAA,gBACpCrJ,OAAA,CAACf,MAAM;YACL2K,OAAO,EAAC,SAAS;YACjBC,OAAO,EAAE1G,cAAe;YACxB2G,UAAU,EAAEX,WAAY;YACxBY,QAAQ,eAAE/J,OAAA;cAAAqJ,QAAA,EAAM;YAAC;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAE;YAAAkB,QAAA,EAC1B;UAED;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAERiB,UAAU,gBACTpJ,OAAA,CAACf,MAAM;YACL+K,WAAW,EAAC,MAAM;YAClBC,IAAI,EAAC,IAAI;YACTJ,OAAO,EAAExG,cAAe;YACxB9B,SAAS,EAAEA,SAAU;YACrB2I,WAAW,EAAC,qCAAY;YACxBJ,UAAU,EAAE,CAAC7H,WAAW,CAAC,CAAE;YAC3BkI,SAAS,EAAE5I,SAAS,gBAAGvB,OAAA,CAACZ,OAAO;cAAC6K,IAAI,EAAC;YAAI;cAAAjC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,gBAAGnI,OAAA;cAAAqJ,QAAA,EAAM;YAAE;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAE;YAC/DiC,EAAE,EAAE,CAAE;YAAAf,QAAA,EAEL9H,SAAS,GAAG,eAAe,GAAG;UAAU;YAAAyG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnC,CAAC,gBAETnI,OAAA,CAACf,MAAM;YACL+K,WAAW,EAAC,MAAM;YAClBH,OAAO,EAAErH,UAAW;YACpBsH,UAAU,EAAE,CAAC7H,WAAW,CAAC,CAAE;YAC3BkI,SAAS,eAAEnK,OAAA;cAAAqJ,QAAA,EAAM;YAAC;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAE;YAAAkB,QAAA,EAC3B;UAED;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEb,CAAC;AAACjH,EAAA,CAjZID,WAAqB;EAAA,QACRnC,WAAW,EACdK,QAAQ,EAmBlBE,aAAa;AAAA;AAAAgL,EAAA,GArBbpJ,WAAqB;AAmZ3B,eAAeA,WAAW;AAAC,IAAAoJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
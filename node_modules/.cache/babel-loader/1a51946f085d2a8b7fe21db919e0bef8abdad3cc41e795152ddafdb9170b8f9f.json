{"ast":null,"code":"import{weightLossProducts,muscleGainProducts,maintenanceProducts}from'../data/mockProducts';import{getRecipesByGoal,calculateRecipeNutrition,getRecipeIngredients}from'../data/recipeData';// 🎯 개인화 추천 컨텍스트\n// 🧮 사용자별 맞춤 영양소 목표 계산\nexport const calculatePersonalizedNutritionTargets=(userProfile,calorieCalculation)=>{const{goal,weight,height,age,gender}=userProfile;const{targetCalories}=calorieCalculation;// 목표별 단백질 필요량 (체중 1kg당)\nconst proteinPerKg={weight_loss:1.6,// 다이어트: 근손실 방지를 위해 높은 단백질\nmaintenance:1.2,// 유지: 일반 권장량\nmuscle_gain:1.8// 근성장: 높은 단백질 필요\n};// 개인별 단백질 필요량 계산\nconst dailyProteinNeeds=weight*proteinPerKg[goal];const proteinCalories=dailyProteinNeeds*4;const proteinPercentage=proteinCalories/targetCalories*100;// 목표별 지방 비율 조정\nconst fatPercentage={weight_loss:20,// 다이어트: 낮은 지방\nmaintenance:30,// 유지: 균형\nmuscle_gain:25// 근성장: 중간 지방\n}[goal];// 나머지는 탄수화물\nconst carbPercentage=100-proteinPercentage-fatPercentage;return{targetCalories,dailyProteinNeeds,macroPercentages:{protein:Math.max(15,Math.min(35,proteinPercentage)),// 15-35% 범위\nfat:fatPercentage,carb:Math.max(30,carbPercentage)// 최소 30%\n},macroGrams:{protein:dailyProteinNeeds,fat:targetCalories*fatPercentage/100/9,carb:targetCalories*carbPercentage/100/4}};};// 🎯 스마트 제품 추천 엔진\nexport const getPersonalizedProductRecommendations=context=>{const{userProfile,calorieCalculation}=context;const nutritionTargets=calculatePersonalizedNutritionTargets(userProfile,calorieCalculation);// 목표별 기본 제품군 선택\nlet candidateProducts=[];switch(userProfile.goal){case'weight_loss':candidateProducts=[...weightLossProducts,...maintenanceProducts.filter(p=>p.nutrition.calories<150)];break;case'muscle_gain':candidateProducts=[...muscleGainProducts,...maintenanceProducts.filter(p=>p.nutrition.protein>15)];break;case'maintenance':default:candidateProducts=[...maintenanceProducts,...weightLossProducts.slice(0,2)];break;}// 예산 필터링 (더 현실적인 접근)\nconst dailyBudget=userProfile.budget/30;// 일일 예산\nconst mealBudget=dailyBudget/3;// 끼니당 예산\nconst affordableProducts=candidateProducts.filter(product=>{// 1주일치 구매 시 끼니당 비용 계산\nconst productDuration=getProductDuration(product);const costPerMeal=product.price/productDuration/3;return costPerMeal<=mealBudget*2;// 예산의 200%까지 허용\n});// 영양소 적합성 점수 계산\nconst scoredProducts=affordableProducts.map(product=>({product,score:calculateAdvancedNutrientScore(product,nutritionTargets,context)}));// 점수순 정렬 및 다양성 보장\nconst sortedProducts=scoredProducts.sort((a,b)=>b.score-a.score).slice(0,20);// 상위 20개 선별\n// 카테고리별 다양성 보장\nconst diverseProducts=ensureProductDiversity(sortedProducts.map(sp=>sp.product));return diverseProducts.slice(0,12);};// 🍳 스마트 레시피 추천 엔진\nexport const getPersonalizedRecipeRecommendations=async context=>{const{userProfile}=context;const baseRecipes=await getRecipesByGoal(userProfile.goal);// 시간대별 필터링\nconst currentHour=context.currentTime.getHours();let mealType;if(currentHour<11)mealType='breakfast';else if(currentHour<17)mealType='lunch';else mealType='dinner';// 사용자 선호도 반영\nlet filteredRecipes=baseRecipes.filter(recipe=>{var _context$preferences,_context$preferences2,_context$preferences3;// 시간대 맞춤\nif(recipe.mealType!==mealType)return false;// 조리시간 선호도\nif(((_context$preferences=context.preferences)===null||_context$preferences===void 0?void 0:_context$preferences.cookingTime)==='quick'&&recipe.cookingTime>15)return false;if(((_context$preferences2=context.preferences)===null||_context$preferences2===void 0?void 0:_context$preferences2.cookingTime)==='slow'&&recipe.cookingTime<20)return false;// 난이도 선호도\nif((_context$preferences3=context.preferences)!==null&&_context$preferences3!==void 0&&_context$preferences3.difficulty&&recipe.difficulty!==context.preferences.difficulty){return false;}return true;});// 영양 목표에 맞는 레시피 점수 계산\nconst nutritionTargets=calculatePersonalizedNutritionTargets(userProfile,context.calorieCalculation);const scoredRecipes=filteredRecipes.map(recipe=>({recipe,score:calculateRecipePersonalizationScore(recipe,nutritionTargets,context)}));// 점수순 정렬\nreturn scoredRecipes.sort((a,b)=>b.score-a.score).map(sr=>sr.recipe).slice(0,6);};// 🎯 고급 영양소 점수 계산\nconst calculateAdvancedNutrientScore=(product,targets,context)=>{let score=0;const nutrition=product.nutrition;// 목표 칼로리 대비 적합성 (30%)\nconst calorieRatio=nutrition.calories/targets.targetCalories*100;if(calorieRatio>5&&calorieRatio<25)score+=30;else if(calorieRatio<=5)score+=20;// 단백질 함량 평가 (25%)\nif(context.userProfile.goal==='weight_loss'||context.userProfile.goal==='muscle_gain'){if(nutrition.protein>20)score+=25;else if(nutrition.protein>15)score+=20;else if(nutrition.protein>10)score+=10;}else{if(nutrition.protein>5)score+=25;}// 지방 함량 평가 (20%)\nconst fatRatio=nutrition.fat*9/nutrition.calories*100;if(context.userProfile.goal==='weight_loss'&&fatRatio<30)score+=20;else if(context.userProfile.goal==='muscle_gain'&&fatRatio>20&&fatRatio<40)score+=20;else if(context.userProfile.goal==='maintenance'&&fatRatio>25&&fatRatio<35)score+=20;// 나트륨 함량 평가 (15%)\nif(nutrition.sodium<300)score+=15;else if(nutrition.sodium<500)score+=10;else if(nutrition.sodium<800)score+=5;// 가격 대비 영양가 (10%)\nconst nutritionValue=nutrition.protein*4+nutrition.carb*4+nutrition.fat*9;const pricePerNutrition=product.price/nutritionValue;if(pricePerNutrition<50)score+=10;else if(pricePerNutrition<100)score+=5;return Math.min(100,score);};// 🍳 레시피 개인화 점수 계산\nconst calculateRecipePersonalizationScore=(recipe,targets,context)=>{var _context$preferences4,_context$preferences5,_context$preferences6,_context$preferences7,_context$history;let score=0;// 목표 적합성 (40%)\nif(recipe.goalFit.includes(context.userProfile.goal))score+=40;// 조리시간 적합성 (20%)\nif(((_context$preferences4=context.preferences)===null||_context$preferences4===void 0?void 0:_context$preferences4.cookingTime)==='quick'&&recipe.cookingTime<=15)score+=20;else if(((_context$preferences5=context.preferences)===null||_context$preferences5===void 0?void 0:_context$preferences5.cookingTime)==='normal'&&recipe.cookingTime<=30)score+=20;else if(((_context$preferences6=context.preferences)===null||_context$preferences6===void 0?void 0:_context$preferences6.cookingTime)==='slow'&&recipe.cookingTime>30)score+=20;else score+=10;// 난이도 적합성 (15%)\nif(((_context$preferences7=context.preferences)===null||_context$preferences7===void 0?void 0:_context$preferences7.difficulty)===recipe.difficulty)score+=15;else score+=5;// 영양소 균형 (15%)\nconst recipeNutrition=calculateRecipeNutrition(recipe.id);if(recipeNutrition.calories>0){const proteinRatio=recipeNutrition.protein*4/recipeNutrition.calories*100;const targetProteinRatio=targets.macroPercentages.protein;if(Math.abs(proteinRatio-targetProteinRatio)<10)score+=15;else if(Math.abs(proteinRatio-targetProteinRatio)<20)score+=10;}// 최근 조리 이력 (10%) - 다양성 보장\nif((_context$history=context.history)!==null&&_context$history!==void 0&&_context$history.cookedRecipes&&!context.history.cookedRecipes.includes(recipe.id)){score+=10;}else{score+=5;}return Math.min(100,score);};// 🛡️ 제품 다양성 보장\nconst ensureProductDiversity=products=>{const categorySet=new Set(products.map(p=>p.category));const categories=Array.from(categorySet);const diverseProducts=[];// 카테고리별로 최소 1개씩 선택\ncategories.forEach(category=>{const categoryProducts=products.filter(p=>p.category===category);if(categoryProducts.length>0){diverseProducts.push(categoryProducts[0]);}});// 나머지 자리는 점수 순으로 채우기\nconst remainingProducts=products.filter(p=>!diverseProducts.includes(p));diverseProducts.push(...remainingProducts.slice(0,12-diverseProducts.length));return diverseProducts;};// 📦 제품 지속 기간 추정 (일 단위)\nconst getProductDuration=product=>{// 제품명과 용량 정보로 지속 기간 추정\nif(product.weight.includes('30팩'))return 30;if(product.weight.includes('20개')||product.weight.includes('20팩'))return 20;if(product.weight.includes('15팩'))return 15;if(product.weight.includes('12개')||product.weight.includes('12팩'))return 12;if(product.weight.includes('10팩')||product.weight.includes('10개'))return 10;if(product.weight.includes('8팩')||product.weight.includes('8개'))return 8;if(product.weight.includes('6개')||product.weight.includes('6팩'))return 6;if(product.weight.includes('5kg'))return 20;// 5kg 제품은 약 20일\nif(product.weight.includes('3kg'))return 15;// 3kg 제품은 약 15일\nif(product.weight.includes('500g'))return 5;// 500g 제품은 약 5일\nreturn 7;// 기본값: 1주일\n};// 💰 레시피별 월간 비용 계산 (정확한 계산)\nconst calculateRecipeMonthlyCost=function(recipeId){let monthlyFrequency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const ingredients=getRecipeIngredients(recipeId);let totalMonthlyCost=0;ingredients.forEach(ingredient=>{const product=ingredient.product;const productDuration=getProductDuration(product);// 제품 지속 기간 (일)\nconst recipesPerProduct=productDuration;// 한 제품으로 만들 수 있는 레시피 수\nconst costPerRecipe=product.price/recipesPerProduct;// 레시피 1회당 비용\nconst monthlyCost=costPerRecipe*monthlyFrequency;// 월간 해당 재료 비용\ntotalMonthlyCost+=monthlyCost;});return Math.round(totalMonthlyCost);};// 🍽️ 구매한 재료로 레시피를 몇 번 해먹을 수 있는지 계산\nexport const calculateRecipeFrequency=recipeId=>{const ingredients=getRecipeIngredients(recipeId);// recipes 배열이 없으므로 임시 레시피 정보 사용\nconst recipe={id:recipeId,name:\"\\uB808\\uC2DC\\uD53C \".concat(recipeId)};const ingredientAnalysis=ingredients.map(ingredient=>{const product=ingredient.product;// 📦 정확한 제품 패키지 분석 (실제 mock 데이터 기준)\nconst analyzePackage=packageInfo=>{console.log(\"\\uD83D\\uDD0D \\uD328\\uD0A4\\uC9C0 \\uBD84\\uC11D \\uC911: \\\"\".concat(packageInfo,\"\\\"\"));// 디버그용\n// 패턴: \"단위 x 개수\" 형태 분석\n// 1️⃣ \"100g x 30팩\" 형태\nconst gramPackPattern=/(\\d+)g\\s*x\\s*(\\d+)/i;const gramPackMatch=packageInfo.match(gramPackPattern);if(gramPackMatch){const perPack=parseInt(gramPackMatch[1]);const packCount=parseInt(gramPackMatch[2]);console.log(\"\\uD83D\\uDCE6 \\uADF8\\uB7A8\\uD329: \".concat(perPack,\"g x \").concat(packCount,\"\\uD329 = \").concat(perPack*packCount,\"g\"));return{totalAmount:perPack*packCount,unitType:'g'};}// 2️⃣ \"150g x 12개\" 형태  \nconst gramItemPattern=/(\\d+)g\\s*x\\s*(\\d+)개/i;const gramItemMatch=packageInfo.match(gramItemPattern);if(gramItemMatch){const perItem=parseInt(gramItemMatch[1]);const itemCount=parseInt(gramItemMatch[2]);console.log(\"\\uD83D\\uDCE6 \\uADF8\\uB7A8\\uAC1C\\uC218: \".concat(perItem,\"g x \").concat(itemCount,\"\\uAC1C = \").concat(perItem*itemCount,\"g\"));return{totalAmount:perItem*itemCount,unitType:'g'};}// 3️⃣ \"5kg\" 단일 형태\nconst singleKgPattern=/(\\d+)kg/i;const singleKgMatch=packageInfo.match(singleKgPattern);if(singleKgMatch){const kg=parseInt(singleKgMatch[1]);console.log(\"\\uD83D\\uDCE6 \\uD0AC\\uB85C\\uADF8\\uB7A8: \".concat(kg,\"kg = \").concat(kg*1000,\"g\"));return{totalAmount:kg*1000,unitType:'g'};}// 4️⃣ \"500g\" 단일 형태\nconst singleGramPattern=/(\\d+)g(?!\\s*x)/i;const singleGramMatch=packageInfo.match(singleGramPattern);if(singleGramMatch){const grams=parseInt(singleGramMatch[1]);console.log(\"\\uD83D\\uDCE6 \\uADF8\\uB7A8: \".concat(grams,\"g\"));return{totalAmount:grams,unitType:'g'};}// 5️⃣ \"12개\" 단일 개수 형태\nconst singleCountPattern=/(\\d+)개(?!\\s*[×x])/i;const singleCountMatch=packageInfo.match(singleCountPattern);if(singleCountMatch){const count=parseInt(singleCountMatch[1]);console.log(\"\\uD83D\\uDCE6 \\uAC1C\\uC218: \".concat(count,\"\\uAC1C\"));return{totalAmount:count,unitType:'개'};}// 6️⃣ \"2L\" 리터 형태\nconst literPattern=/(\\d+(?:\\.\\d+)?)L/i;const literMatch=packageInfo.match(literPattern);if(literMatch){const liters=parseFloat(literMatch[1]);console.log(\"\\uD83D\\uDCE6 \\uB9AC\\uD130: \".concat(liters,\"L = \").concat(liters*1000,\"ml\"));return{totalAmount:liters*1000,unitType:'ml'};}// 7️⃣ \"500ml\" 밀리리터 형태\nconst mlPattern=/(\\d+)ml/i;const mlMatch=packageInfo.match(mlPattern);if(mlMatch){const ml=parseInt(mlMatch[1]);console.log(\"\\uD83D\\uDCE6 \\uBC00\\uB9AC\\uB9AC\\uD130: \".concat(ml,\"ml\"));return{totalAmount:ml,unitType:'ml'};}console.warn(\"\\u26A0\\uFE0F \\uD328\\uD0A4\\uC9C0 \\uC815\\uBCF4 \\uBD84\\uC11D \\uC2E4\\uD328: \\\"\".concat(packageInfo,\"\\\" - \\uAE30\\uBCF8\\uAC12 \\uC0AC\\uC6A9\"));return{totalAmount:100,unitType:'g'};// 기본값\n};const packageAnalysis=analyzePackage(product.weight);const packageTotalAmount=packageAnalysis.totalAmount;const packageUnitType=packageAnalysis.unitType;const recipeUsage=ingredient.quantity;const recipeUnit=ingredient.unit;console.log(\"\\uD83E\\uDDEE \\uACC4\\uC0B0 \\uC911: \".concat(product.name));console.log(\"\\uD83D\\uDCE6 \\uD328\\uD0A4\\uC9C0: \".concat(packageTotalAmount).concat(packageUnitType));console.log(\"\\uD83E\\uDD44 \\uB808\\uC2DC\\uD53C \\uC0AC\\uC6A9\\uB7C9: \".concat(recipeUsage).concat(recipeUnit));// 🔢 단위 통일 후 계산\nlet maxRecipesFromThisIngredient;if(recipeUnit==='g'&&(packageUnitType==='g'||packageUnitType==='ml')){// 그램 단위: 직접 계산 가능\nmaxRecipesFromThisIngredient=Math.floor(packageTotalAmount/recipeUsage);}else if(recipeUnit==='ml'&&packageUnitType==='ml'){// 밀리리터 단위: 직접 계산 가능\nmaxRecipesFromThisIngredient=Math.floor(packageTotalAmount/recipeUsage);}else if(recipeUnit==='개'&&packageUnitType==='개'){// 개수 단위: 직접 계산 가능\nmaxRecipesFromThisIngredient=Math.floor(packageTotalAmount/recipeUsage);}else if(recipeUnit==='큰술'){// 큰술 = 약 15ml/15g\nconst recipeAmountInGrams=recipeUsage*15;maxRecipesFromThisIngredient=Math.floor(packageTotalAmount/recipeAmountInGrams);}else if(recipeUnit==='작은술'){// 작은술 = 약 5ml/5g\nconst recipeAmountInGrams=recipeUsage*5;maxRecipesFromThisIngredient=Math.floor(packageTotalAmount/recipeAmountInGrams);}else if(recipeUnit==='컵'){// 컵 = 약 200ml/200g\nconst recipeAmountInGrams=recipeUsage*200;maxRecipesFromThisIngredient=Math.floor(packageTotalAmount/recipeAmountInGrams);}else{// 기타 단위: 보수적 계산\nconsole.warn(\"\\u26A0\\uFE0F \\uB2E8\\uC704 \\uBCC0\\uD658 \\uBD88\\uAC00: \".concat(recipeUnit,\" \\u2194 \").concat(packageUnitType));maxRecipesFromThisIngredient=Math.floor(packageTotalAmount/(recipeUsage*10));}// 🛡️ 0으로 나누기 방지\nif(maxRecipesFromThisIngredient<=0){console.warn(\"\\u26A0\\uFE0F \\uACC4\\uC0B0 \\uACB0\\uACFC\\uAC00 0 \\uC774\\uD558: \".concat(product.name,\" - \\uCD5C\\uC18C\\uAC12 1\\uB85C \\uC124\\uC815\"));maxRecipesFromThisIngredient=1;}const costPerRecipe=Math.round(product.price/maxRecipesFromThisIngredient);console.log(\"\\u2705 \\uACB0\\uACFC: \".concat(maxRecipesFromThisIngredient,\"\\uBC88 \\uAC00\\uB2A5, 1\\uD68C\\uB2F9 \").concat(costPerRecipe,\"\\uC6D0\"));return{productName:product.name,productPackageSize:product.weight,usagePerRecipe:\"\".concat(recipeUsage).concat(recipeUnit),maxRecipesFromThisIngredient:maxRecipesFromThisIngredient,costPerRecipe:costPerRecipe,totalProductCost:product.price};});// 🎯 병목 재료 찾기 (가장 적게 만들 수 있는 횟수)\nconst minPossibleRecipes=Math.min(...ingredientAnalysis.map(analysis=>analysis.maxRecipesFromThisIngredient));// 📊 평균 제조 가능 횟수\nconst averageRecipesPerIngredient=Math.round(ingredientAnalysis.reduce((sum,analysis)=>sum+analysis.maxRecipesFromThisIngredient,0)/ingredientAnalysis.length);// 💰 레시피 1회당 총 비용\nconst totalCostPerRecipe=ingredientAnalysis.reduce((sum,analysis)=>sum+analysis.costPerRecipe,0);return{recipeId,recipeName:(recipe===null||recipe===void 0?void 0:recipe.name)||'알 수 없는 레시피',ingredientAnalysis,minPossibleRecipes,averageRecipesPerIngredient,totalCostPerRecipe:Math.round(totalCostPerRecipe)};};// 💰 예산 기반 레시피 필터링 및 조합 선택\nconst getBudgetAwareRecipeCombination=(goalRecipes,monthlyBudget,nutritionTargets)=>{// 각 레시피의 월간 비용과 영양가 계산\nconst recipeAnalysis=goalRecipes.map(recipe=>{const monthlyCost=calculateRecipeMonthlyCost(recipe.id,10);// 한 달에 10번 해당 레시피\nconst nutrition=calculateRecipeNutrition(recipe.id);const nutritionScore=(nutrition.protein*4+nutrition.carb*4+nutrition.fat*9)/monthlyCost;// 원당 영양가\nreturn{recipe,monthlyCost,nutrition,nutritionScore,costPerCalorie:monthlyCost/(nutrition.calories||1)};});// 예산 범위 내 레시피들만 필터링\nconst affordableRecipes=recipeAnalysis.filter(analysis=>analysis.monthlyCost<=monthlyBudget*0.4// 단일 레시피가 예산의 40%를 넘지 않도록\n);if(affordableRecipes.length===0){// 예산이 너무 적으면 가장 저렴한 레시피들 선택\nconst sortedByCost=recipeAnalysis.sort((a,b)=>a.monthlyCost-b.monthlyCost);return sortedByCost.slice(0,3).map(analysis=>analysis.recipe);}// 🎯 최적 조합 찾기 (예산 내에서 영양가 최대화) - 성능 최적화\nconst findOptimalCombination=()=>{const combinations=[];const maxCombinations=1000;// 조합 수 제한으로 성능 향상\n// 가격 기준 사전 정렬로 조기 종료 최적화\nconst sortedByPrice=affordableRecipes.sort((a,b)=>a.monthlyCost-b.monthlyCost);// 아침, 점심, 저녁용 레시피를 각각 선택 (최적화된 루프)\nouterLoop:for(let i=0;i<sortedByPrice.length&&combinations.length<maxCombinations;i++){const breakfast=sortedByPrice[i];for(let j=0;j<sortedByPrice.length&&combinations.length<maxCombinations;j++){const lunch=sortedByPrice[j];// 조기 종료 조건 (2개 합계가 이미 예산 초과)\nif(breakfast.monthlyCost+lunch.monthlyCost>monthlyBudget*0.9){continue;}for(let k=0;k<sortedByPrice.length&&combinations.length<maxCombinations;k++){const dinner=sortedByPrice[k];const totalCost=breakfast.monthlyCost+lunch.monthlyCost+dinner.monthlyCost;if(totalCost<=monthlyBudget){combinations.push([breakfast.recipe,lunch.recipe,dinner.recipe]);}else{// 가격순 정렬되어 있으므로 더 이상 확인 불필요\nbreak;}}}}if(combinations.length===0){// 3개 조합이 불가능하면 가장 저렴한 2개 선택\nconst sortedByCost=affordableRecipes.sort((a,b)=>a.monthlyCost-b.monthlyCost);return sortedByCost.slice(0,2).map(analysis=>analysis.recipe);}// 영양가 점수가 가장 높은 조합 선택\nlet bestCombination=combinations[0];let bestScore=0;combinations.forEach(combination=>{const totalNutrition=combination.reduce((sum,recipe)=>{const nutrition=calculateRecipeNutrition(recipe.id);return{calories:sum.calories+nutrition.calories,protein:sum.protein+nutrition.protein,carb:sum.carb+nutrition.carb,fat:sum.fat+nutrition.fat};},{calories:0,protein:0,carb:0,fat:0});// 목표 영양소와의 근사도 점수\nconst calorieScore=100-Math.abs(totalNutrition.calories-nutritionTargets.targetCalories)/nutritionTargets.targetCalories*100;const proteinScore=100-Math.abs(totalNutrition.protein-nutritionTargets.macroGrams.protein)/nutritionTargets.macroGrams.protein*100;const combinationScore=Math.max(0,calorieScore)+Math.max(0,proteinScore);if(combinationScore>bestScore){bestScore=combinationScore;bestCombination=combination;}});return bestCombination;};return findOptimalCombination();};// 🎯 전체 개인화 추천 통합 함수\nexport const generatePersonalizedRecommendations=(userProfile,calorieCalculation,preferences,history)=>{const context={userProfile,calorieCalculation,currentTime:new Date(),preferences,history};const nutritionTargets=calculatePersonalizedNutritionTargets(userProfile,calorieCalculation);const recommendedProducts=getPersonalizedProductRecommendations(context);const recommendedRecipes=getPersonalizedRecipeRecommendations(context);// 개인화 메시지 생성\nconst personalizedMessage=generatePersonalizedMessage(userProfile,nutritionTargets);return{nutritionTargets,recommendedProducts,recommendedRecipes,personalizedMessage,context};};// 💰 예산 고려 개인화 추천 함수 (메인)\nexport const generateBudgetAwareRecommendations=async(userProfile,calorieCalculation,monthlyBudget,preferences,history)=>{const context={userProfile,calorieCalculation,currentTime:new Date(),preferences,history};const nutritionTargets=calculatePersonalizedNutritionTargets(userProfile,calorieCalculation);// 🎯 목표에 맞는 모든 레시피 가져오기 (비동기)\nconst goalRecipes=await getRecipesByGoal(userProfile.goal||'maintenance');// 💰 예산 기반 최적 레시피 조합 선택\nconst budgetOptimizedRecipes=getBudgetAwareRecipeCombination(goalRecipes,monthlyBudget,nutritionTargets);// 📊 예산 분석\nconst costBreakdown=budgetOptimizedRecipes.map(recipe=>{const monthlyCost=calculateRecipeMonthlyCost(recipe.id,10);return{recipeId:recipe.id,recipeName:recipe.name,monthlyCost,costPercentage:monthlyCost/monthlyBudget*100};});const totalEstimatedCost=costBreakdown.reduce((sum,item)=>sum+item.monthlyCost,0);const budgetUsagePercentage=totalEstimatedCost/monthlyBudget*100;// 제품 추천은 기존 로직 활용\nconst recommendedProducts=getPersonalizedProductRecommendations(context);// 💬 예산 고려 메시지 생성\nconst personalizedMessage=generateBudgetAwareMessage(userProfile,nutritionTargets,monthlyBudget,totalEstimatedCost);return{personalizedMessage,nutritionTargets,recommendedProducts,recommendedRecipes:budgetOptimizedRecipes,budgetAnalysis:{totalEstimatedCost,budgetUsagePercentage,costBreakdown},context};};// 💬 개인화 메시지 생성\nconst generatePersonalizedMessage=(userProfile,targets)=>{const{goal,gender,age,weight}=userProfile;const{targetCalories,dailyProteinNeeds}=targets;const goalMessages={weight_loss:\"\".concat(gender==='male'?'형':'님',\"\\uC758 \\uB2E4\\uC774\\uC5B4\\uD2B8 \\uC131\\uACF5\\uC744 \\uC704\\uD574 \\uC77C\\uC77C \").concat(targetCalories,\"kcal, \\uB2E8\\uBC31\\uC9C8 \").concat(Math.round(dailyProteinNeeds),\"g \\uBAA9\\uD45C\\uB85C \\uB9DE\\uCDA4 \\uC2DD\\uB2E8\\uC744 \\uC900\\uBE44\\uD588\\uC5B4\\uC694! \\uD83D\\uDCAA\"),muscle_gain:\"\".concat(age,\"\\uC138 \").concat(gender==='male'?'형':'님',\"\\uC758 \\uADFC\\uC131\\uC7A5\\uC744 \\uC704\\uD574 \\uC77C\\uC77C \").concat(targetCalories,\"kcal, \\uACE0\\uB2E8\\uBC31 \").concat(Math.round(dailyProteinNeeds),\"g \\uC2DD\\uB2E8\\uC73C\\uB85C \\uAD6C\\uC131\\uD588\\uC5B4\\uC694! \\uD83D\\uDD25\"),maintenance:\"\".concat(weight,\"kg \\uAC74\\uAC15 \\uC720\\uC9C0\\uB97C \\uC704\\uD574 \\uC77C\\uC77C \").concat(targetCalories,\"kcal \\uADE0\\uD615 \\uC7A1\\uD78C \\uC2DD\\uB2E8\\uC744 \\uCD94\\uCC9C\\uB4DC\\uB824\\uC694! \\u2696\\uFE0F\")};return goalMessages[goal]||'맞춤형 식단을 준비했어요! 🎯';};// 💰 예산 고려 메시지 생성\nconst generateBudgetAwareMessage=(userProfile,targets,monthlyBudget,estimatedCost)=>{const{goal,gender}=userProfile;const{targetCalories,dailyProteinNeeds}=targets;const savings=monthlyBudget-estimatedCost;const usagePercentage=estimatedCost/monthlyBudget*100;const baseMessage=\"\".concat(gender==='male'?'형':'님',\"\\uC758 \").concat(goal==='weight_loss'?'다이어트':goal==='muscle_gain'?'근성장':'건강유지',\" \\uBAA9\\uD45C\\uC5D0 \\uB9DE\\uCDB0\");if(usagePercentage<=70){return\"\".concat(baseMessage,\" \\uC608\\uC0B0\\uC744 \\uC54C\\uB730\\uD558\\uAC8C \\uD65C\\uC6A9\\uD55C \\uC2DD\\uB2E8\\uC744 \\uC900\\uBE44\\uD588\\uC5B4\\uC694! \\uD83D\\uDCB0 \\uC6D4 \").concat(estimatedCost.toLocaleString(),\"\\uC6D0\\uC73C\\uB85C \\uBAA9\\uD45C \\uB2EC\\uC131\\uC774 \\uAC00\\uB2A5\\uD574\\uC694 (\").concat(savings.toLocaleString(),\"\\uC6D0 \\uC808\\uC57D!) \\uD83C\\uDFAF\");}else if(usagePercentage<=90){return\"\".concat(baseMessage,\" \\uC608\\uC0B0\\uC5D0 \\uB531 \\uB9DE\\uB294 \\uD6A8\\uC728\\uC801\\uC778 \\uC2DD\\uB2E8\\uC744 \\uAD6C\\uC131\\uD588\\uC5B4\\uC694! \\uD83D\\uDCAA \\uC6D4 \").concat(estimatedCost.toLocaleString(),\"\\uC6D0\\uC73C\\uB85C \\uBAA9\\uD45C \\uC601\\uC591\\uC18C\\uB97C \\uCDA9\\uC871\\uD560 \\uC218 \\uC788\\uC5B4\\uC694! \\uD83C\\uDFAF\");}else{return\"\".concat(baseMessage,\" \\uC608\\uC0B0\\uC744 \\uCD5C\\uB300\\uD55C \\uD65C\\uC6A9\\uD55C \\uAC00\\uC131\\uBE44 \\uCD5C\\uACE0\\uC758 \\uC2DD\\uB2E8\\uC774\\uC5D0\\uC694! \\uD83D\\uDCAF \\uC6D4 \").concat(estimatedCost.toLocaleString(),\"\\uC6D0\\uC73C\\uB85C \\uCD5C\\uACE0\\uC758 \\uC601\\uC591 \\uD6A8\\uACFC\\uB97C \\uC5BB\\uC73C\\uC138\\uC694! \\uD83D\\uDD25\");}};","map":{"version":3,"names":["weightLossProducts","muscleGainProducts","maintenanceProducts","getRecipesByGoal","calculateRecipeNutrition","getRecipeIngredients","calculatePersonalizedNutritionTargets","userProfile","calorieCalculation","goal","weight","height","age","gender","targetCalories","proteinPerKg","weight_loss","maintenance","muscle_gain","dailyProteinNeeds","proteinCalories","proteinPercentage","fatPercentage","carbPercentage","macroPercentages","protein","Math","max","min","fat","carb","macroGrams","getPersonalizedProductRecommendations","context","nutritionTargets","candidateProducts","filter","p","nutrition","calories","slice","dailyBudget","budget","mealBudget","affordableProducts","product","productDuration","getProductDuration","costPerMeal","price","scoredProducts","map","score","calculateAdvancedNutrientScore","sortedProducts","sort","a","b","diverseProducts","ensureProductDiversity","sp","getPersonalizedRecipeRecommendations","baseRecipes","currentHour","currentTime","getHours","mealType","filteredRecipes","recipe","_context$preferences","_context$preferences2","_context$preferences3","preferences","cookingTime","difficulty","scoredRecipes","calculateRecipePersonalizationScore","sr","targets","calorieRatio","fatRatio","sodium","nutritionValue","pricePerNutrition","_context$preferences4","_context$preferences5","_context$preferences6","_context$preferences7","_context$history","goalFit","includes","recipeNutrition","id","proteinRatio","targetProteinRatio","abs","history","cookedRecipes","products","categorySet","Set","category","categories","Array","from","forEach","categoryProducts","length","push","remainingProducts","calculateRecipeMonthlyCost","recipeId","monthlyFrequency","arguments","undefined","ingredients","totalMonthlyCost","ingredient","recipesPerProduct","costPerRecipe","monthlyCost","round","calculateRecipeFrequency","name","concat","ingredientAnalysis","analyzePackage","packageInfo","console","log","gramPackPattern","gramPackMatch","match","perPack","parseInt","packCount","totalAmount","unitType","gramItemPattern","gramItemMatch","perItem","itemCount","singleKgPattern","singleKgMatch","kg","singleGramPattern","singleGramMatch","grams","singleCountPattern","singleCountMatch","count","literPattern","literMatch","liters","parseFloat","mlPattern","mlMatch","ml","warn","packageAnalysis","packageTotalAmount","packageUnitType","recipeUsage","quantity","recipeUnit","unit","maxRecipesFromThisIngredient","floor","recipeAmountInGrams","productName","productPackageSize","usagePerRecipe","totalProductCost","minPossibleRecipes","analysis","averageRecipesPerIngredient","reduce","sum","totalCostPerRecipe","recipeName","getBudgetAwareRecipeCombination","goalRecipes","monthlyBudget","recipeAnalysis","nutritionScore","costPerCalorie","affordableRecipes","sortedByCost","findOptimalCombination","combinations","maxCombinations","sortedByPrice","outerLoop","i","breakfast","j","lunch","k","dinner","totalCost","bestCombination","bestScore","combination","totalNutrition","calorieScore","proteinScore","combinationScore","generatePersonalizedRecommendations","Date","recommendedProducts","recommendedRecipes","personalizedMessage","generatePersonalizedMessage","generateBudgetAwareRecommendations","budgetOptimizedRecipes","costBreakdown","costPercentage","totalEstimatedCost","item","budgetUsagePercentage","generateBudgetAwareMessage","budgetAnalysis","goalMessages","estimatedCost","savings","usagePercentage","baseMessage","toLocaleString"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/personalizedRecommendation.ts"],"sourcesContent":["import { UserProfile, CalorieCalculation, CoupangProduct, Recipe, PersonalizedNutritionTargets } from '../types';\nimport { \n  weightLossProducts, \n  muscleGainProducts, \n  maintenanceProducts\n} from '../data/mockProducts';\nimport { getRecipesByGoal, calculateRecipeNutrition, getRecipeIngredients } from '../data/recipeData';\n\n// 🎯 개인화 추천 컨텍스트\nexport interface PersonalizedContext {\n  userProfile: UserProfile;\n  calorieCalculation: CalorieCalculation;\n  currentTime: Date;\n  preferences?: {\n    cuisineTypes?: string[];         // 선호 요리 종류\n    allergens?: string[];            // 알레르기 유발 요소\n    cookingTime?: 'quick' | 'normal' | 'slow'; // 조리 시간 선호도\n    difficulty?: 'easy' | 'medium' | 'hard';   // 난이도 선호도\n    priceRange?: 'budget' | 'standard' | 'premium'; // 가격대 선호도\n  };\n  history?: {\n    purchasedProducts?: string[];    // 구매 이력\n    cookedRecipes?: string[];        // 조리 이력\n    favoriteIngredients?: string[];  // 선호 재료\n  };\n}\n\n// 🧮 사용자별 맞춤 영양소 목표 계산\nexport const calculatePersonalizedNutritionTargets = (\n  userProfile: UserProfile,\n  calorieCalculation: CalorieCalculation\n) => {\n  const { goal, weight, height, age, gender } = userProfile;\n  const { targetCalories } = calorieCalculation;\n\n  // 목표별 단백질 필요량 (체중 1kg당)\n  const proteinPerKg = {\n    weight_loss: 1.6,    // 다이어트: 근손실 방지를 위해 높은 단백질\n    maintenance: 1.2,    // 유지: 일반 권장량\n    muscle_gain: 1.8     // 근성장: 높은 단백질 필요\n  };\n\n  // 개인별 단백질 필요량 계산\n  const dailyProteinNeeds = weight * proteinPerKg[goal];\n  const proteinCalories = dailyProteinNeeds * 4;\n  const proteinPercentage = (proteinCalories / targetCalories) * 100;\n\n  // 목표별 지방 비율 조정\n  const fatPercentage = {\n    weight_loss: 20,     // 다이어트: 낮은 지방\n    maintenance: 30,     // 유지: 균형\n    muscle_gain: 25      // 근성장: 중간 지방\n  }[goal];\n\n  // 나머지는 탄수화물\n  const carbPercentage = 100 - proteinPercentage - fatPercentage;\n\n  return {\n    targetCalories,\n    dailyProteinNeeds,\n    macroPercentages: {\n      protein: Math.max(15, Math.min(35, proteinPercentage)), // 15-35% 범위\n      fat: fatPercentage,\n      carb: Math.max(30, carbPercentage) // 최소 30%\n    },\n    macroGrams: {\n      protein: dailyProteinNeeds,\n      fat: (targetCalories * fatPercentage / 100) / 9,\n      carb: (targetCalories * carbPercentage / 100) / 4\n    }\n  };\n};\n\n// 🎯 스마트 제품 추천 엔진\nexport const getPersonalizedProductRecommendations = (\n  context: PersonalizedContext\n): CoupangProduct[] => {\n  const { userProfile, calorieCalculation } = context;\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  \n  // 목표별 기본 제품군 선택\n  let candidateProducts: CoupangProduct[] = [];\n  \n  switch (userProfile.goal) {\n    case 'weight_loss':\n      candidateProducts = [\n        ...weightLossProducts,\n        ...maintenanceProducts.filter(p => p.nutrition.calories < 150)\n      ];\n      break;\n    case 'muscle_gain':\n      candidateProducts = [\n        ...muscleGainProducts,\n        ...maintenanceProducts.filter(p => p.nutrition.protein > 15)\n      ];\n      break;\n    case 'maintenance':\n    default:\n      candidateProducts = [...maintenanceProducts, ...weightLossProducts.slice(0, 2)];\n      break;\n  }\n\n  // 예산 필터링 (더 현실적인 접근)\n  const dailyBudget = userProfile.budget / 30; // 일일 예산\n  const mealBudget = dailyBudget / 3; // 끼니당 예산\n  \n  const affordableProducts = candidateProducts.filter(product => {\n    // 1주일치 구매 시 끼니당 비용 계산\n    const productDuration = getProductDuration(product);\n    const costPerMeal = (product.price / productDuration) / 3;\n    return costPerMeal <= mealBudget * 2; // 예산의 200%까지 허용\n  });\n\n  // 영양소 적합성 점수 계산\n  const scoredProducts = affordableProducts.map(product => ({\n    product,\n    score: calculateAdvancedNutrientScore(product, nutritionTargets, context)\n  }));\n\n  // 점수순 정렬 및 다양성 보장\n  const sortedProducts = scoredProducts\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 20); // 상위 20개 선별\n\n  // 카테고리별 다양성 보장\n  const diverseProducts = ensureProductDiversity(sortedProducts.map(sp => sp.product));\n  \n  return diverseProducts.slice(0, 12);\n};\n\n// 🍳 스마트 레시피 추천 엔진\nexport const getPersonalizedRecipeRecommendations = async (\n  context: PersonalizedContext\n): Promise<Recipe[]> => {\n  const { userProfile } = context;\n  const baseRecipes = await getRecipesByGoal(userProfile.goal);\n  \n  // 시간대별 필터링\n  const currentHour = context.currentTime.getHours();\n  let mealType: 'breakfast' | 'lunch' | 'dinner';\n  \n  if (currentHour < 11) mealType = 'breakfast';\n  else if (currentHour < 17) mealType = 'lunch'; \n  else mealType = 'dinner';\n\n  // 사용자 선호도 반영\n  let filteredRecipes = baseRecipes.filter((recipe: Recipe) => {\n    // 시간대 맞춤\n    if (recipe.mealType !== mealType) return false;\n    \n    // 조리시간 선호도\n    if (context.preferences?.cookingTime === 'quick' && recipe.cookingTime > 15) return false;\n    if (context.preferences?.cookingTime === 'slow' && recipe.cookingTime < 20) return false;\n    \n    // 난이도 선호도\n    if (context.preferences?.difficulty && recipe.difficulty !== context.preferences.difficulty) {\n      return false;\n    }\n    \n    return true;\n  });\n\n  // 영양 목표에 맞는 레시피 점수 계산\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, context.calorieCalculation);\n  \n  const scoredRecipes = filteredRecipes.map((recipe: Recipe) => ({\n    recipe,\n    score: calculateRecipePersonalizationScore(recipe, nutritionTargets, context)\n  }));\n\n  // 점수순 정렬\n  return scoredRecipes\n    .sort((a: any, b: any) => b.score - a.score)\n    .map((sr: any) => sr.recipe)\n    .slice(0, 6);\n};\n\n// 🎯 고급 영양소 점수 계산\nconst calculateAdvancedNutrientScore = (\n  product: CoupangProduct,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>,\n  context: PersonalizedContext\n): number => {\n  let score = 0;\n  const nutrition = product.nutrition;\n  \n  // 목표 칼로리 대비 적합성 (30%)\n  const calorieRatio = nutrition.calories / targets.targetCalories * 100;\n  if (calorieRatio > 5 && calorieRatio < 25) score += 30;\n  else if (calorieRatio <= 5) score += 20;\n  \n  // 단백질 함량 평가 (25%)\n  if (context.userProfile.goal === 'weight_loss' || context.userProfile.goal === 'muscle_gain') {\n    if (nutrition.protein > 20) score += 25;\n    else if (nutrition.protein > 15) score += 20;\n    else if (nutrition.protein > 10) score += 10;\n  } else {\n    if (nutrition.protein > 5) score += 25;\n  }\n  \n  // 지방 함량 평가 (20%)\n  const fatRatio = (nutrition.fat * 9) / nutrition.calories * 100;\n  if (context.userProfile.goal === 'weight_loss' && fatRatio < 30) score += 20;\n  else if (context.userProfile.goal === 'muscle_gain' && fatRatio > 20 && fatRatio < 40) score += 20;\n  else if (context.userProfile.goal === 'maintenance' && fatRatio > 25 && fatRatio < 35) score += 20;\n  \n  // 나트륨 함량 평가 (15%)\n  if (nutrition.sodium < 300) score += 15;\n  else if (nutrition.sodium < 500) score += 10;\n  else if (nutrition.sodium < 800) score += 5;\n  \n  // 가격 대비 영양가 (10%)\n  const nutritionValue = (nutrition.protein * 4 + nutrition.carb * 4 + nutrition.fat * 9);\n  const pricePerNutrition = product.price / nutritionValue;\n  if (pricePerNutrition < 50) score += 10;\n  else if (pricePerNutrition < 100) score += 5;\n  \n  return Math.min(100, score);\n};\n\n// 🍳 레시피 개인화 점수 계산\nconst calculateRecipePersonalizationScore = (\n  recipe: Recipe,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>,\n  context: PersonalizedContext\n): number => {\n  let score = 0;\n  \n  // 목표 적합성 (40%)\n  if (recipe.goalFit.includes(context.userProfile.goal)) score += 40;\n  \n  // 조리시간 적합성 (20%)\n  if (context.preferences?.cookingTime === 'quick' && recipe.cookingTime <= 15) score += 20;\n  else if (context.preferences?.cookingTime === 'normal' && recipe.cookingTime <= 30) score += 20;\n  else if (context.preferences?.cookingTime === 'slow' && recipe.cookingTime > 30) score += 20;\n  else score += 10;\n  \n  // 난이도 적합성 (15%)\n  if (context.preferences?.difficulty === recipe.difficulty) score += 15;\n  else score += 5;\n  \n  // 영양소 균형 (15%)\n  const recipeNutrition = calculateRecipeNutrition(recipe.id);\n  if (recipeNutrition.calories > 0) {\n    const proteinRatio = (recipeNutrition.protein * 4) / recipeNutrition.calories * 100;\n    const targetProteinRatio = targets.macroPercentages.protein;\n    \n    if (Math.abs(proteinRatio - targetProteinRatio) < 10) score += 15;\n    else if (Math.abs(proteinRatio - targetProteinRatio) < 20) score += 10;\n  }\n  \n  // 최근 조리 이력 (10%) - 다양성 보장\n  if (context.history?.cookedRecipes && !context.history.cookedRecipes.includes(recipe.id)) {\n    score += 10;\n  } else {\n    score += 5;\n  }\n  \n  return Math.min(100, score);\n};\n\n// 🛡️ 제품 다양성 보장\nconst ensureProductDiversity = (products: CoupangProduct[]): CoupangProduct[] => {\n  const categorySet = new Set(products.map(p => p.category));\n  const categories = Array.from(categorySet);\n  const diverseProducts: CoupangProduct[] = [];\n  \n  // 카테고리별로 최소 1개씩 선택\n  categories.forEach(category => {\n    const categoryProducts = products.filter(p => p.category === category);\n    if (categoryProducts.length > 0) {\n      diverseProducts.push(categoryProducts[0]);\n    }\n  });\n  \n  // 나머지 자리는 점수 순으로 채우기\n  const remainingProducts = products.filter(p => !diverseProducts.includes(p));\n  diverseProducts.push(...remainingProducts.slice(0, 12 - diverseProducts.length));\n  \n  return diverseProducts;\n};\n\n// 📦 제품 지속 기간 추정 (일 단위)\nconst getProductDuration = (product: CoupangProduct): number => {\n  // 제품명과 용량 정보로 지속 기간 추정\n  if (product.weight.includes('30팩')) return 30;\n  if (product.weight.includes('20개') || product.weight.includes('20팩')) return 20;\n  if (product.weight.includes('15팩')) return 15;\n  if (product.weight.includes('12개') || product.weight.includes('12팩')) return 12;\n  if (product.weight.includes('10팩') || product.weight.includes('10개')) return 10;\n  if (product.weight.includes('8팩') || product.weight.includes('8개')) return 8;\n  if (product.weight.includes('6개') || product.weight.includes('6팩')) return 6;\n  if (product.weight.includes('5kg')) return 20; // 5kg 제품은 약 20일\n  if (product.weight.includes('3kg')) return 15; // 3kg 제품은 약 15일\n  if (product.weight.includes('500g')) return 5;  // 500g 제품은 약 5일\n  return 7; // 기본값: 1주일\n};\n\n// 💰 레시피별 월간 비용 계산 (정확한 계산)\nconst calculateRecipeMonthlyCost = (recipeId: string, monthlyFrequency: number = 10): number => {\n  const ingredients = getRecipeIngredients(recipeId);\n  let totalMonthlyCost = 0;\n\n  ingredients.forEach(ingredient => {\n    const product = ingredient.product;\n    const productDuration = getProductDuration(product); // 제품 지속 기간 (일)\n    const recipesPerProduct = productDuration; // 한 제품으로 만들 수 있는 레시피 수\n    const costPerRecipe = product.price / recipesPerProduct; // 레시피 1회당 비용\n    const monthlyCost = costPerRecipe * monthlyFrequency; // 월간 해당 재료 비용\n    \n    totalMonthlyCost += monthlyCost;\n  });\n\n  return Math.round(totalMonthlyCost);\n};\n\n// 🍽️ 구매한 재료로 레시피를 몇 번 해먹을 수 있는지 계산\nexport const calculateRecipeFrequency = (recipeId: string): {\n  recipeId: string;\n  recipeName: string;\n  ingredientAnalysis: Array<{\n    productName: string;\n    productPackageSize: string;\n    usagePerRecipe: string;\n    maxRecipesFromThisIngredient: number;\n    costPerRecipe: number;\n    totalProductCost: number;\n  }>;\n  minPossibleRecipes: number; // 가장 적게 만들 수 있는 횟수 (병목 재료 기준)\n  averageRecipesPerIngredient: number;\n  totalCostPerRecipe: number;\n} => {\n  const ingredients = getRecipeIngredients(recipeId);\n  // recipes 배열이 없으므로 임시 레시피 정보 사용\n  const recipe = { id: recipeId, name: `레시피 ${recipeId}` };\n  \n  const ingredientAnalysis = ingredients.map((ingredient: any) => {\n    const product = ingredient.product;\n    \n    // 📦 정확한 제품 패키지 분석 (실제 mock 데이터 기준)\n    const analyzePackage = (packageInfo: string): { totalAmount: number, unitType: string } => {\n      console.log(`🔍 패키지 분석 중: \"${packageInfo}\"`); // 디버그용\n      \n      // 패턴: \"단위 x 개수\" 형태 분석\n      \n      // 1️⃣ \"100g x 30팩\" 형태\n      const gramPackPattern = /(\\d+)g\\s*x\\s*(\\d+)/i;\n      const gramPackMatch = packageInfo.match(gramPackPattern);\n      if (gramPackMatch) {\n        const perPack = parseInt(gramPackMatch[1]);\n        const packCount = parseInt(gramPackMatch[2]);\n        console.log(`📦 그램팩: ${perPack}g x ${packCount}팩 = ${perPack * packCount}g`);\n        return { totalAmount: perPack * packCount, unitType: 'g' };\n      }\n      \n      // 2️⃣ \"150g x 12개\" 형태  \n      const gramItemPattern = /(\\d+)g\\s*x\\s*(\\d+)개/i;\n      const gramItemMatch = packageInfo.match(gramItemPattern);\n      if (gramItemMatch) {\n        const perItem = parseInt(gramItemMatch[1]);\n        const itemCount = parseInt(gramItemMatch[2]);\n        console.log(`📦 그램개수: ${perItem}g x ${itemCount}개 = ${perItem * itemCount}g`);\n        return { totalAmount: perItem * itemCount, unitType: 'g' };\n      }\n      \n      // 3️⃣ \"5kg\" 단일 형태\n      const singleKgPattern = /(\\d+)kg/i;\n      const singleKgMatch = packageInfo.match(singleKgPattern);\n      if (singleKgMatch) {\n        const kg = parseInt(singleKgMatch[1]);\n        console.log(`📦 킬로그램: ${kg}kg = ${kg * 1000}g`);\n        return { totalAmount: kg * 1000, unitType: 'g' };\n      }\n      \n      // 4️⃣ \"500g\" 단일 형태\n      const singleGramPattern = /(\\d+)g(?!\\s*x)/i;\n      const singleGramMatch = packageInfo.match(singleGramPattern);\n      if (singleGramMatch) {\n        const grams = parseInt(singleGramMatch[1]);\n        console.log(`📦 그램: ${grams}g`);\n        return { totalAmount: grams, unitType: 'g' };\n      }\n      \n      // 5️⃣ \"12개\" 단일 개수 형태\n      const singleCountPattern = /(\\d+)개(?!\\s*[×x])/i;\n      const singleCountMatch = packageInfo.match(singleCountPattern);\n      if (singleCountMatch) {\n        const count = parseInt(singleCountMatch[1]);\n        console.log(`📦 개수: ${count}개`);\n        return { totalAmount: count, unitType: '개' };\n      }\n      \n      // 6️⃣ \"2L\" 리터 형태\n      const literPattern = /(\\d+(?:\\.\\d+)?)L/i;\n      const literMatch = packageInfo.match(literPattern);\n      if (literMatch) {\n        const liters = parseFloat(literMatch[1]);\n        console.log(`📦 리터: ${liters}L = ${liters * 1000}ml`);\n        return { totalAmount: liters * 1000, unitType: 'ml' };\n      }\n      \n      // 7️⃣ \"500ml\" 밀리리터 형태\n      const mlPattern = /(\\d+)ml/i;\n      const mlMatch = packageInfo.match(mlPattern);\n      if (mlMatch) {\n        const ml = parseInt(mlMatch[1]);\n        console.log(`📦 밀리리터: ${ml}ml`);\n        return { totalAmount: ml, unitType: 'ml' };\n      }\n      \n      console.warn(`⚠️ 패키지 정보 분석 실패: \"${packageInfo}\" - 기본값 사용`);\n      return { totalAmount: 100, unitType: 'g' }; // 기본값\n    };\n    \n    const packageAnalysis = analyzePackage(product.weight);\n    const packageTotalAmount = packageAnalysis.totalAmount;\n    const packageUnitType = packageAnalysis.unitType;\n    const recipeUsage = ingredient.quantity;\n    const recipeUnit = ingredient.unit;\n    \n    console.log(`🧮 계산 중: ${product.name}`);\n    console.log(`📦 패키지: ${packageTotalAmount}${packageUnitType}`);\n    console.log(`🥄 레시피 사용량: ${recipeUsage}${recipeUnit}`);\n    \n    // 🔢 단위 통일 후 계산\n    let maxRecipesFromThisIngredient: number;\n    \n    if (recipeUnit === 'g' && (packageUnitType === 'g' || packageUnitType === 'ml')) {\n      // 그램 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === 'ml' && packageUnitType === 'ml') {\n      // 밀리리터 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === '개' && packageUnitType === '개') {\n      // 개수 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === '큰술') {\n      // 큰술 = 약 15ml/15g\n      const recipeAmountInGrams = recipeUsage * 15;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else if (recipeUnit === '작은술') {\n      // 작은술 = 약 5ml/5g\n      const recipeAmountInGrams = recipeUsage * 5;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else if (recipeUnit === '컵') {\n      // 컵 = 약 200ml/200g\n      const recipeAmountInGrams = recipeUsage * 200;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else {\n      // 기타 단위: 보수적 계산\n      console.warn(`⚠️ 단위 변환 불가: ${recipeUnit} ↔ ${packageUnitType}`);\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / (recipeUsage * 10));\n    }\n    \n    // 🛡️ 0으로 나누기 방지\n    if (maxRecipesFromThisIngredient <= 0) {\n      console.warn(`⚠️ 계산 결과가 0 이하: ${product.name} - 최소값 1로 설정`);\n      maxRecipesFromThisIngredient = 1;\n    }\n    \n    const costPerRecipe = Math.round(product.price / maxRecipesFromThisIngredient);\n    \n    console.log(`✅ 결과: ${maxRecipesFromThisIngredient}번 가능, 1회당 ${costPerRecipe}원`);\n    \n    return {\n      productName: product.name,\n      productPackageSize: product.weight,\n      usagePerRecipe: `${recipeUsage}${recipeUnit}`,\n      maxRecipesFromThisIngredient: maxRecipesFromThisIngredient,\n      costPerRecipe: costPerRecipe,\n      totalProductCost: product.price\n    };\n  });\n  \n  // 🎯 병목 재료 찾기 (가장 적게 만들 수 있는 횟수)\n  const minPossibleRecipes = Math.min(...ingredientAnalysis.map(analysis => analysis.maxRecipesFromThisIngredient));\n  \n  // 📊 평균 제조 가능 횟수\n  const averageRecipesPerIngredient = Math.round(\n    ingredientAnalysis.reduce((sum, analysis) => sum + analysis.maxRecipesFromThisIngredient, 0) / ingredientAnalysis.length\n  );\n  \n  // 💰 레시피 1회당 총 비용\n  const totalCostPerRecipe = ingredientAnalysis.reduce((sum, analysis) => sum + analysis.costPerRecipe, 0);\n  \n  return {\n    recipeId,\n    recipeName: recipe?.name || '알 수 없는 레시피',\n    ingredientAnalysis,\n    minPossibleRecipes,\n    averageRecipesPerIngredient,\n    totalCostPerRecipe: Math.round(totalCostPerRecipe)\n  };\n};\n\n// 💰 예산 기반 레시피 필터링 및 조합 선택\nconst getBudgetAwareRecipeCombination = (\n  goalRecipes: Recipe[], \n  monthlyBudget: number,\n  nutritionTargets: PersonalizedNutritionTargets\n): Recipe[] => {\n  // 각 레시피의 월간 비용과 영양가 계산\n  const recipeAnalysis = goalRecipes.map(recipe => {\n    const monthlyCost = calculateRecipeMonthlyCost(recipe.id, 10); // 한 달에 10번 해당 레시피\n    const nutrition = calculateRecipeNutrition(recipe.id);\n    const nutritionScore = (nutrition.protein * 4 + nutrition.carb * 4 + nutrition.fat * 9) / monthlyCost; // 원당 영양가\n    \n    return {\n      recipe,\n      monthlyCost,\n      nutrition,\n      nutritionScore,\n      costPerCalorie: monthlyCost / (nutrition.calories || 1)\n    };\n  });\n\n  // 예산 범위 내 레시피들만 필터링\n  const affordableRecipes = recipeAnalysis.filter(analysis => \n    analysis.monthlyCost <= monthlyBudget * 0.4 // 단일 레시피가 예산의 40%를 넘지 않도록\n  );\n\n  if (affordableRecipes.length === 0) {\n    // 예산이 너무 적으면 가장 저렴한 레시피들 선택\n    const sortedByCost = recipeAnalysis.sort((a, b) => a.monthlyCost - b.monthlyCost);\n    return sortedByCost.slice(0, 3).map(analysis => analysis.recipe);\n  }\n\n  // 🎯 최적 조합 찾기 (예산 내에서 영양가 최대화) - 성능 최적화\n  const findOptimalCombination = (): Recipe[] => {\n    const combinations: Recipe[][] = [];\n    const maxCombinations = 1000; // 조합 수 제한으로 성능 향상\n    \n    // 가격 기준 사전 정렬로 조기 종료 최적화\n    const sortedByPrice = affordableRecipes.sort((a, b) => a.monthlyCost - b.monthlyCost);\n    \n    // 아침, 점심, 저녁용 레시피를 각각 선택 (최적화된 루프)\n    outerLoop: for (let i = 0; i < sortedByPrice.length && combinations.length < maxCombinations; i++) {\n      const breakfast = sortedByPrice[i];\n      \n      for (let j = 0; j < sortedByPrice.length && combinations.length < maxCombinations; j++) {\n        const lunch = sortedByPrice[j];\n        \n        // 조기 종료 조건 (2개 합계가 이미 예산 초과)\n        if (breakfast.monthlyCost + lunch.monthlyCost > monthlyBudget * 0.9) {\n          continue;\n        }\n        \n        for (let k = 0; k < sortedByPrice.length && combinations.length < maxCombinations; k++) {\n          const dinner = sortedByPrice[k];\n          const totalCost = breakfast.monthlyCost + lunch.monthlyCost + dinner.monthlyCost;\n          \n          if (totalCost <= monthlyBudget) {\n            combinations.push([breakfast.recipe, lunch.recipe, dinner.recipe]);\n          } else {\n            // 가격순 정렬되어 있으므로 더 이상 확인 불필요\n            break;\n          }\n        }\n      }\n    }\n\n    if (combinations.length === 0) {\n      // 3개 조합이 불가능하면 가장 저렴한 2개 선택\n      const sortedByCost = affordableRecipes.sort((a, b) => a.monthlyCost - b.monthlyCost);\n      return sortedByCost.slice(0, 2).map(analysis => analysis.recipe);\n    }\n\n    // 영양가 점수가 가장 높은 조합 선택\n    let bestCombination = combinations[0];\n    let bestScore = 0;\n\n    combinations.forEach(combination => {\n      const totalNutrition = combination.reduce((sum, recipe) => {\n        const nutrition = calculateRecipeNutrition(recipe.id);\n        return {\n          calories: sum.calories + nutrition.calories,\n          protein: sum.protein + nutrition.protein,\n          carb: sum.carb + nutrition.carb,\n          fat: sum.fat + nutrition.fat\n        };\n      }, { calories: 0, protein: 0, carb: 0, fat: 0 });\n\n      // 목표 영양소와의 근사도 점수\n      const calorieScore = 100 - Math.abs(totalNutrition.calories - nutritionTargets.targetCalories) / nutritionTargets.targetCalories * 100;\n      const proteinScore = 100 - Math.abs(totalNutrition.protein - nutritionTargets.macroGrams.protein) / nutritionTargets.macroGrams.protein * 100;\n      \n      const combinationScore = Math.max(0, calorieScore) + Math.max(0, proteinScore);\n\n      if (combinationScore > bestScore) {\n        bestScore = combinationScore;\n        bestCombination = combination;\n      }\n    });\n\n    return bestCombination;\n  };\n\n  return findOptimalCombination();\n};\n\n// 🎯 전체 개인화 추천 통합 함수\nexport const generatePersonalizedRecommendations = (\n  userProfile: UserProfile,\n  calorieCalculation: CalorieCalculation,\n  preferences?: PersonalizedContext['preferences'],\n  history?: PersonalizedContext['history']\n) => {\n  const context: PersonalizedContext = {\n    userProfile,\n    calorieCalculation,\n    currentTime: new Date(),\n    preferences,\n    history\n  };\n\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  const recommendedProducts = getPersonalizedProductRecommendations(context);\n  const recommendedRecipes = getPersonalizedRecipeRecommendations(context);\n\n  // 개인화 메시지 생성\n  const personalizedMessage = generatePersonalizedMessage(userProfile, nutritionTargets);\n\n  return {\n    nutritionTargets,\n    recommendedProducts,\n    recommendedRecipes,\n    personalizedMessage,\n    context\n  };\n};\n\n// 💰 예산 고려 개인화 추천 함수 (메인)\nexport const generateBudgetAwareRecommendations = async (\n  userProfile: UserProfile,\n  calorieCalculation: CalorieCalculation,\n  monthlyBudget: number,\n  preferences?: PersonalizedContext['preferences'],\n  history?: PersonalizedContext['history']\n): Promise<{\n  personalizedMessage: string;\n  nutritionTargets: PersonalizedNutritionTargets;\n  recommendedProducts: CoupangProduct[];\n  recommendedRecipes: Recipe[];\n  budgetAnalysis: {\n    totalEstimatedCost: number;\n    budgetUsagePercentage: number;\n    costBreakdown: Array<{\n      recipeId: string;\n      recipeName: string;\n      monthlyCost: number;\n      costPercentage: number;\n    }>;\n  };\n  context: PersonalizedContext;\n}> => {\n  const context: PersonalizedContext = {\n    userProfile,\n    calorieCalculation,\n    currentTime: new Date(),\n    preferences,\n    history\n  };\n\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  \n  // 🎯 목표에 맞는 모든 레시피 가져오기 (비동기)\n  const goalRecipes = await getRecipesByGoal(userProfile.goal || 'maintenance');\n  \n  // 💰 예산 기반 최적 레시피 조합 선택\n  const budgetOptimizedRecipes = getBudgetAwareRecipeCombination(\n    goalRecipes, \n    monthlyBudget, \n    nutritionTargets\n  );\n\n  // 📊 예산 분석\n  const costBreakdown = budgetOptimizedRecipes.map(recipe => {\n    const monthlyCost = calculateRecipeMonthlyCost(recipe.id, 10);\n    return {\n      recipeId: recipe.id,\n      recipeName: recipe.name,\n      monthlyCost,\n      costPercentage: (monthlyCost / monthlyBudget) * 100\n    };\n  });\n\n  const totalEstimatedCost = costBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n  const budgetUsagePercentage = (totalEstimatedCost / monthlyBudget) * 100;\n\n  // 제품 추천은 기존 로직 활용\n  const recommendedProducts = getPersonalizedProductRecommendations(context);\n\n  // 💬 예산 고려 메시지 생성\n  const personalizedMessage = generateBudgetAwareMessage(\n    userProfile, \n    nutritionTargets, \n    monthlyBudget, \n    totalEstimatedCost\n  );\n\n  return {\n    personalizedMessage,\n    nutritionTargets,\n    recommendedProducts,\n    recommendedRecipes: budgetOptimizedRecipes,\n    budgetAnalysis: {\n      totalEstimatedCost,\n      budgetUsagePercentage,\n      costBreakdown\n    },\n    context\n  };\n};\n\n// 💬 개인화 메시지 생성\nconst generatePersonalizedMessage = (\n  userProfile: UserProfile,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>\n): string => {\n  const { goal, gender, age, weight } = userProfile;\n  const { targetCalories, dailyProteinNeeds } = targets;\n\n  const goalMessages = {\n    weight_loss: `${gender === 'male' ? '형' : '님'}의 다이어트 성공을 위해 일일 ${targetCalories}kcal, 단백질 ${Math.round(dailyProteinNeeds)}g 목표로 맞춤 식단을 준비했어요! 💪`,\n    muscle_gain: `${age}세 ${gender === 'male' ? '형' : '님'}의 근성장을 위해 일일 ${targetCalories}kcal, 고단백 ${Math.round(dailyProteinNeeds)}g 식단으로 구성했어요! 🔥`, \n    maintenance: `${weight}kg 건강 유지를 위해 일일 ${targetCalories}kcal 균형 잡힌 식단을 추천드려요! ⚖️`\n  };\n\n  return goalMessages[goal] || '맞춤형 식단을 준비했어요! 🎯';\n};\n\n// 💰 예산 고려 메시지 생성\nconst generateBudgetAwareMessage = (\n  userProfile: UserProfile,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>,\n  monthlyBudget: number,\n  estimatedCost: number\n): string => {\n  const { goal, gender } = userProfile;\n  const { targetCalories, dailyProteinNeeds } = targets;\n  const savings = monthlyBudget - estimatedCost;\n  const usagePercentage = (estimatedCost / monthlyBudget) * 100;\n\n  const baseMessage = `${gender === 'male' ? '형' : '님'}의 ${goal === 'weight_loss' ? '다이어트' : goal === 'muscle_gain' ? '근성장' : '건강유지'} 목표에 맞춰`;\n\n  if (usagePercentage <= 70) {\n    return `${baseMessage} 예산을 알뜰하게 활용한 식단을 준비했어요! 💰 월 ${estimatedCost.toLocaleString()}원으로 목표 달성이 가능해요 (${savings.toLocaleString()}원 절약!) 🎯`;\n  } else if (usagePercentage <= 90) {\n    return `${baseMessage} 예산에 딱 맞는 효율적인 식단을 구성했어요! 💪 월 ${estimatedCost.toLocaleString()}원으로 목표 영양소를 충족할 수 있어요! 🎯`;\n  } else {\n    return `${baseMessage} 예산을 최대한 활용한 가성비 최고의 식단이에요! 💯 월 ${estimatedCost.toLocaleString()}원으로 최고의 영양 효과를 얻으세요! 🔥`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
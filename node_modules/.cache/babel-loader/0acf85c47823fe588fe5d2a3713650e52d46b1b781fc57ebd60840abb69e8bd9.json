{"ast":null,"code":"var _CSVProcessor;\n// 🔥 CSV 데이터 처리를 위한 고성능 프로세서\nexport class CSVProcessor {\n  constructor() {\n    this.recipesCache = null;\n  }\n  static getInstance() {\n    if (!CSVProcessor.instance) {\n      CSVProcessor.instance = new CSVProcessor();\n    }\n    return CSVProcessor.instance;\n  }\n\n  // CSV 파일 로드 및 파싱\n  async loadCSVData() {\n    if (this.recipesCache) {\n      console.log('📦 캐시된 레시피 데이터 사용');\n      return this.recipesCache;\n    }\n    try {\n      console.log('🔄 CSV 파일 로딩 중...');\n\n      // Public 폴더에서 CSV 파일 로드\n      const response = await fetch('/data/TB_RECIPE_SEARCH_241226.csv');\n      const csvText = await response.text();\n      console.log('📊 CSV 파싱 시작...');\n      const recipes = this.parseCSV(csvText);\n      console.log(`✅ 총 ${recipes.length}개 레시피 로드 완료`);\n      this.recipesCache = recipes;\n      return recipes;\n    } catch (error) {\n      console.error('❌ CSV 로드 실패:', error);\n      throw error;\n    }\n  }\n\n  // CSV 텍스트 파싱\n  parseCSV(csvText) {\n    const lines = csvText.split('\\n');\n    const headers = this.parseCSVLine(lines[0]);\n    const recipes = [];\n\n    // 헤더 제외하고 파싱 (최대 10,000개로 제한)\n    const maxRecipes = 10000;\n    for (let i = 1; i < Math.min(lines.length, maxRecipes + 1); i++) {\n      if (!lines[i].trim()) continue;\n      try {\n        const values = this.parseCSVLine(lines[i]);\n        const recipe = this.createRecipeObject(headers, values);\n\n        // 유효한 레시피만 추가\n        if (recipe && recipe.RCP_SNO && recipe.CKG_NM) {\n          recipes.push(recipe);\n        }\n      } catch (error) {\n        console.warn(`⚠️ ${i}번째 라인 파싱 실패:`, error);\n      }\n    }\n    return recipes;\n  }\n\n  // CSV 라인 파싱 (쉼표와 따옴표 처리)\n  parseCSVLine(line) {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n      if (char === '\"' && inQuotes && nextChar === '\"') {\n        current += '\"';\n        i++; // Skip next quote\n      } else if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    result.push(current.trim());\n    return result;\n  }\n\n  // 레시피 객체 생성\n  createRecipeObject(headers, values) {\n    const recipe = {};\n    headers.forEach((header, index) => {\n      const value = values[index] || '';\n\n      // 숫자 필드 변환\n      if (['INQ_CNT', 'RCMM_CNT', 'SRAP_CNT'].includes(header)) {\n        recipe[header] = parseInt(value) || 0;\n      } else {\n        recipe[header] = value;\n      }\n    });\n\n    // 추가 필드 (CSV에 없는 경우 기본값)\n    recipe.RCP_IMG_URL = recipe.RCP_IMG_URL || '';\n    return recipe;\n  }\n\n  // 🎯 필터링 및 검색 기능\n  async searchRecipes(query, limit = 100) {\n    const allRecipes = await this.loadCSVData();\n    const lowerQuery = query.toLowerCase();\n    return allRecipes.filter(recipe => recipe.CKG_NM.toLowerCase().includes(lowerQuery) || recipe.RCP_TTL.toLowerCase().includes(lowerQuery) || recipe.CKG_IPDC.toLowerCase().includes(lowerQuery)).slice(0, limit);\n  }\n\n  // 🔥 인기 레시피 조회\n  async getPopularRecipes(limit = 100) {\n    const allRecipes = await this.loadCSVData();\n    return allRecipes.sort((a, b) => b.INQ_CNT - a.INQ_CNT).slice(0, limit);\n  }\n\n  // 🎯 목표별 레시피 필터링\n  async getRecipesByKeywords(keywords, limit = 50) {\n    const allRecipes = await this.loadCSVData();\n    return allRecipes.filter(recipe => {\n      const content = `${recipe.CKG_NM} ${recipe.RCP_TTL} ${recipe.CKG_IPDC}`.toLowerCase();\n      return keywords.some(keyword => content.includes(keyword.toLowerCase()));\n    }).slice(0, limit);\n  }\n\n  // 📊 통계 정보\n  async getStatistics() {\n    const allRecipes = await this.loadCSVData();\n\n    // 카테고리별 집계\n    const categoryCount = {};\n    const methodCount = {};\n    let totalViews = 0;\n    let totalScraps = 0;\n    allRecipes.forEach(recipe => {\n      // 조회수/스크랩 합계\n      totalViews += recipe.INQ_CNT;\n      totalScraps += recipe.SRAP_CNT;\n\n      // 카테고리 집계\n      if (recipe.CKG_KND_ACTO_NM) {\n        categoryCount[recipe.CKG_KND_ACTO_NM] = (categoryCount[recipe.CKG_KND_ACTO_NM] || 0) + 1;\n      }\n\n      // 조리법 집계\n      if (recipe.CKG_MTH_ACTO_NM) {\n        methodCount[recipe.CKG_MTH_ACTO_NM] = (methodCount[recipe.CKG_MTH_ACTO_NM] || 0) + 1;\n      }\n    });\n\n    // 상위 카테고리/조리법 추출\n    const topCategories = Object.entries(categoryCount).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([category, count]) => ({\n      category,\n      count\n    }));\n    const topCookingMethods = Object.entries(methodCount).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([method, count]) => ({\n      method,\n      count\n    }));\n    return {\n      totalRecipes: allRecipes.length,\n      avgViews: Math.round(totalViews / allRecipes.length),\n      avgScraps: Math.round(totalScraps / allRecipes.length),\n      topCategories,\n      topCookingMethods\n    };\n  }\n}\n\n// 🎯 싱글톤 인스턴스 export\n_CSVProcessor = CSVProcessor;\nCSVProcessor.instance = void 0;\nexport const csvProcessor = CSVProcessor.getInstance();","map":{"version":3,"names":["CSVProcessor","constructor","recipesCache","getInstance","instance","loadCSVData","console","log","response","fetch","csvText","text","recipes","parseCSV","length","error","lines","split","headers","parseCSVLine","maxRecipes","i","Math","min","trim","values","recipe","createRecipeObject","RCP_SNO","CKG_NM","push","warn","line","result","current","inQuotes","char","nextChar","forEach","header","index","value","includes","parseInt","RCP_IMG_URL","searchRecipes","query","limit","allRecipes","lowerQuery","toLowerCase","filter","RCP_TTL","CKG_IPDC","slice","getPopularRecipes","sort","a","b","INQ_CNT","getRecipesByKeywords","keywords","content","some","keyword","getStatistics","categoryCount","methodCount","totalViews","totalScraps","SRAP_CNT","CKG_KND_ACTO_NM","CKG_MTH_ACTO_NM","topCategories","Object","entries","map","category","count","topCookingMethods","method","totalRecipes","avgViews","round","avgScraps","_CSVProcessor","csvProcessor"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/csvProcessor.ts"],"sourcesContent":["import { MankaeLRecipeRaw } from './recipeDataProcessor';\n\n// 🔥 CSV 데이터 처리를 위한 고성능 프로세서\nexport class CSVProcessor {\n  private static instance: CSVProcessor;\n  private recipesCache: MankaeLRecipeRaw[] | null = null;\n  \n  private constructor() {}\n  \n  static getInstance(): CSVProcessor {\n    if (!CSVProcessor.instance) {\n      CSVProcessor.instance = new CSVProcessor();\n    }\n    return CSVProcessor.instance;\n  }\n  \n  // CSV 파일 로드 및 파싱\n  async loadCSVData(): Promise<MankaeLRecipeRaw[]> {\n    if (this.recipesCache) {\n      console.log('📦 캐시된 레시피 데이터 사용');\n      return this.recipesCache;\n    }\n    \n    try {\n      console.log('🔄 CSV 파일 로딩 중...');\n      \n      // Public 폴더에서 CSV 파일 로드\n      const response = await fetch('/data/TB_RECIPE_SEARCH_241226.csv');\n      const csvText = await response.text();\n      \n      console.log('📊 CSV 파싱 시작...');\n      const recipes = this.parseCSV(csvText);\n      \n      console.log(`✅ 총 ${recipes.length}개 레시피 로드 완료`);\n      this.recipesCache = recipes;\n      \n      return recipes;\n    } catch (error) {\n      console.error('❌ CSV 로드 실패:', error);\n      throw error;\n    }\n  }\n  \n  // CSV 텍스트 파싱\n  private parseCSV(csvText: string): MankaeLRecipeRaw[] {\n    const lines = csvText.split('\\n');\n    const headers = this.parseCSVLine(lines[0]);\n    \n    const recipes: MankaeLRecipeRaw[] = [];\n    \n    // 헤더 제외하고 파싱 (최대 10,000개로 제한)\n    const maxRecipes = 10000;\n    for (let i = 1; i < Math.min(lines.length, maxRecipes + 1); i++) {\n      if (!lines[i].trim()) continue;\n      \n      try {\n        const values = this.parseCSVLine(lines[i]);\n        const recipe = this.createRecipeObject(headers, values);\n        \n        // 유효한 레시피만 추가\n        if (recipe && recipe.RCP_SNO && recipe.CKG_NM) {\n          recipes.push(recipe);\n        }\n      } catch (error) {\n        console.warn(`⚠️ ${i}번째 라인 파싱 실패:`, error);\n      }\n    }\n    \n    return recipes;\n  }\n  \n  // CSV 라인 파싱 (쉼표와 따옴표 처리)\n  private parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n      \n      if (char === '\"' && inQuotes && nextChar === '\"') {\n        current += '\"';\n        i++; // Skip next quote\n      } else if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    result.push(current.trim());\n    return result;\n  }\n  \n  // 레시피 객체 생성\n  private createRecipeObject(headers: string[], values: string[]): MankaeLRecipeRaw {\n    const recipe: any = {};\n    \n    headers.forEach((header, index) => {\n      const value = values[index] || '';\n      \n      // 숫자 필드 변환\n      if (['INQ_CNT', 'RCMM_CNT', 'SRAP_CNT'].includes(header)) {\n        recipe[header] = parseInt(value) || 0;\n      } else {\n        recipe[header] = value;\n      }\n    });\n    \n    // 추가 필드 (CSV에 없는 경우 기본값)\n    recipe.RCP_IMG_URL = recipe.RCP_IMG_URL || '';\n    \n    return recipe as MankaeLRecipeRaw;\n  }\n  \n  // 🎯 필터링 및 검색 기능\n  async searchRecipes(query: string, limit: number = 100): Promise<MankaeLRecipeRaw[]> {\n    const allRecipes = await this.loadCSVData();\n    const lowerQuery = query.toLowerCase();\n    \n    return allRecipes\n      .filter(recipe => \n        recipe.CKG_NM.toLowerCase().includes(lowerQuery) ||\n        recipe.RCP_TTL.toLowerCase().includes(lowerQuery) ||\n        recipe.CKG_IPDC.toLowerCase().includes(lowerQuery)\n      )\n      .slice(0, limit);\n  }\n  \n  // 🔥 인기 레시피 조회\n  async getPopularRecipes(limit: number = 100): Promise<MankaeLRecipeRaw[]> {\n    const allRecipes = await this.loadCSVData();\n    \n    return allRecipes\n      .sort((a, b) => b.INQ_CNT - a.INQ_CNT)\n      .slice(0, limit);\n  }\n  \n  // 🎯 목표별 레시피 필터링\n  async getRecipesByKeywords(keywords: string[], limit: number = 50): Promise<MankaeLRecipeRaw[]> {\n    const allRecipes = await this.loadCSVData();\n    \n    return allRecipes\n      .filter(recipe => {\n        const content = `${recipe.CKG_NM} ${recipe.RCP_TTL} ${recipe.CKG_IPDC}`.toLowerCase();\n        return keywords.some(keyword => content.includes(keyword.toLowerCase()));\n      })\n      .slice(0, limit);\n  }\n  \n  // 📊 통계 정보\n  async getStatistics(): Promise<{\n    totalRecipes: number;\n    avgViews: number;\n    avgScraps: number;\n    topCategories: Array<{ category: string; count: number }>;\n    topCookingMethods: Array<{ method: string; count: number }>;\n  }> {\n    const allRecipes = await this.loadCSVData();\n    \n    // 카테고리별 집계\n    const categoryCount: Record<string, number> = {};\n    const methodCount: Record<string, number> = {};\n    \n    let totalViews = 0;\n    let totalScraps = 0;\n    \n    allRecipes.forEach(recipe => {\n      // 조회수/스크랩 합계\n      totalViews += recipe.INQ_CNT;\n      totalScraps += recipe.SRAP_CNT;\n      \n      // 카테고리 집계\n      if (recipe.CKG_KND_ACTO_NM) {\n        categoryCount[recipe.CKG_KND_ACTO_NM] = (categoryCount[recipe.CKG_KND_ACTO_NM] || 0) + 1;\n      }\n      \n      // 조리법 집계\n      if (recipe.CKG_MTH_ACTO_NM) {\n        methodCount[recipe.CKG_MTH_ACTO_NM] = (methodCount[recipe.CKG_MTH_ACTO_NM] || 0) + 1;\n      }\n    });\n    \n    // 상위 카테고리/조리법 추출\n    const topCategories = Object.entries(categoryCount)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([category, count]) => ({ category, count }));\n      \n    const topCookingMethods = Object.entries(methodCount)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([method, count]) => ({ method, count }));\n    \n    return {\n      totalRecipes: allRecipes.length,\n      avgViews: Math.round(totalViews / allRecipes.length),\n      avgScraps: Math.round(totalScraps / allRecipes.length),\n      topCategories,\n      topCookingMethods\n    };\n  }\n}\n\n// 🎯 싱글톤 인스턴스 export\nexport const csvProcessor = CSVProcessor.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { weightLossProducts, muscleGainProducts, maintenanceProducts } from '../data/mockProducts';\nimport { getRecipesByGoal, calculateRecipeNutrition, getRecipeIngredients } from '../data/recipeData';\n\n// 🎯 개인화 추천 컨텍스트\n\n// 🧮 사용자별 맞춤 영양소 목표 계산\nexport const calculatePersonalizedNutritionTargets = (userProfile, calorieCalculation) => {\n  const {\n    goal,\n    weight,\n    height,\n    age,\n    gender\n  } = userProfile;\n  const {\n    targetCalories\n  } = calorieCalculation;\n\n  // 목표별 단백질 필요량 (체중 1kg당)\n  const proteinPerKg = {\n    weight_loss: 1.6,\n    // 다이어트: 근손실 방지를 위해 높은 단백질\n    maintenance: 1.2,\n    // 유지: 일반 권장량\n    muscle_gain: 1.8 // 근성장: 높은 단백질 필요\n  };\n\n  // 개인별 단백질 필요량 계산\n  const dailyProteinNeeds = weight * proteinPerKg[goal];\n  const proteinCalories = dailyProteinNeeds * 4;\n  const proteinPercentage = proteinCalories / targetCalories * 100;\n\n  // 목표별 지방 비율 조정\n  const fatPercentage = {\n    weight_loss: 20,\n    // 다이어트: 낮은 지방\n    maintenance: 30,\n    // 유지: 균형\n    muscle_gain: 25 // 근성장: 중간 지방\n  }[goal];\n\n  // 나머지는 탄수화물\n  const carbPercentage = 100 - proteinPercentage - fatPercentage;\n  return {\n    targetCalories,\n    dailyProteinNeeds,\n    macroPercentages: {\n      protein: Math.max(15, Math.min(35, proteinPercentage)),\n      // 15-35% 범위\n      fat: fatPercentage,\n      carb: Math.max(30, carbPercentage) // 최소 30%\n    },\n    macroGrams: {\n      protein: dailyProteinNeeds,\n      fat: targetCalories * fatPercentage / 100 / 9,\n      carb: targetCalories * carbPercentage / 100 / 4\n    }\n  };\n};\n\n// 🎯 스마트 제품 추천 엔진\nexport const getPersonalizedProductRecommendations = context => {\n  const {\n    userProfile,\n    calorieCalculation\n  } = context;\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n\n  // 목표별 기본 제품군 선택\n  let candidateProducts = [];\n  switch (userProfile.goal) {\n    case 'weight_loss':\n      candidateProducts = [...weightLossProducts, ...maintenanceProducts.filter(p => p.nutrition.calories < 150)];\n      break;\n    case 'muscle_gain':\n      candidateProducts = [...muscleGainProducts, ...maintenanceProducts.filter(p => p.nutrition.protein > 15)];\n      break;\n    case 'maintenance':\n    default:\n      candidateProducts = [...maintenanceProducts, ...weightLossProducts.slice(0, 2)];\n      break;\n  }\n\n  // 예산 필터링 (더 현실적인 접근)\n  const dailyBudget = userProfile.budget / 30; // 일일 예산\n  const mealBudget = dailyBudget / 3; // 끼니당 예산\n\n  const affordableProducts = candidateProducts.filter(product => {\n    // 1주일치 구매 시 끼니당 비용 계산\n    const productDuration = getProductDuration(product);\n    const costPerMeal = product.price / productDuration / 3;\n    return costPerMeal <= mealBudget * 2; // 예산의 200%까지 허용\n  });\n\n  // 영양소 적합성 점수 계산\n  const scoredProducts = affordableProducts.map(product => ({\n    product,\n    score: calculateAdvancedNutrientScore(product, nutritionTargets, context)\n  }));\n\n  // 점수순 정렬 및 다양성 보장\n  const sortedProducts = scoredProducts.sort((a, b) => b.score - a.score).slice(0, 20); // 상위 20개 선별\n\n  // 카테고리별 다양성 보장\n  const diverseProducts = ensureProductDiversity(sortedProducts.map(sp => sp.product));\n  return diverseProducts.slice(0, 12);\n};\n\n// 🍳 스마트 레시피 추천 엔진\nexport const getPersonalizedRecipeRecommendations = async context => {\n  const {\n    userProfile\n  } = context;\n  const baseRecipes = await getRecipesByGoal(userProfile.goal);\n\n  // 시간대별 필터링\n  const currentHour = context.currentTime.getHours();\n  let mealType;\n  if (currentHour < 11) mealType = 'breakfast';else if (currentHour < 17) mealType = 'lunch';else mealType = 'dinner';\n\n  // 사용자 선호도 반영\n  let filteredRecipes = baseRecipes.filter(recipe => {\n    var _context$preferences, _context$preferences2, _context$preferences3;\n    // 시간대 맞춤\n    if (recipe.mealType !== mealType) return false;\n\n    // 조리시간 선호도\n    if (((_context$preferences = context.preferences) === null || _context$preferences === void 0 ? void 0 : _context$preferences.cookingTime) === 'quick' && recipe.cookingTime > 15) return false;\n    if (((_context$preferences2 = context.preferences) === null || _context$preferences2 === void 0 ? void 0 : _context$preferences2.cookingTime) === 'slow' && recipe.cookingTime < 20) return false;\n\n    // 난이도 선호도\n    if ((_context$preferences3 = context.preferences) !== null && _context$preferences3 !== void 0 && _context$preferences3.difficulty && recipe.difficulty !== context.preferences.difficulty) {\n      return false;\n    }\n    return true;\n  });\n\n  // 영양 목표에 맞는 레시피 점수 계산\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, context.calorieCalculation);\n  const scoredRecipes = filteredRecipes.map(recipe => ({\n    recipe,\n    score: calculateRecipePersonalizationScore(recipe, nutritionTargets, context)\n  }));\n\n  // 점수순 정렬\n  return scoredRecipes.sort((a, b) => b.score - a.score).map(sr => sr.recipe).slice(0, 6);\n};\n\n// 🎯 고급 영양소 점수 계산\nconst calculateAdvancedNutrientScore = (product, targets, context) => {\n  let score = 0;\n  const nutrition = product.nutrition;\n\n  // 목표 칼로리 대비 적합성 (30%)\n  const calorieRatio = nutrition.calories / targets.targetCalories * 100;\n  if (calorieRatio > 5 && calorieRatio < 25) score += 30;else if (calorieRatio <= 5) score += 20;\n\n  // 단백질 함량 평가 (25%)\n  if (context.userProfile.goal === 'weight_loss' || context.userProfile.goal === 'muscle_gain') {\n    if (nutrition.protein > 20) score += 25;else if (nutrition.protein > 15) score += 20;else if (nutrition.protein > 10) score += 10;\n  } else {\n    if (nutrition.protein > 5) score += 25;\n  }\n\n  // 지방 함량 평가 (20%)\n  const fatRatio = nutrition.fat * 9 / nutrition.calories * 100;\n  if (context.userProfile.goal === 'weight_loss' && fatRatio < 30) score += 20;else if (context.userProfile.goal === 'muscle_gain' && fatRatio > 20 && fatRatio < 40) score += 20;else if (context.userProfile.goal === 'maintenance' && fatRatio > 25 && fatRatio < 35) score += 20;\n\n  // 나트륨 함량 평가 (15%)\n  if (nutrition.sodium < 300) score += 15;else if (nutrition.sodium < 500) score += 10;else if (nutrition.sodium < 800) score += 5;\n\n  // 가격 대비 영양가 (10%)\n  const nutritionValue = nutrition.protein * 4 + nutrition.carb * 4 + nutrition.fat * 9;\n  const pricePerNutrition = product.price / nutritionValue;\n  if (pricePerNutrition < 50) score += 10;else if (pricePerNutrition < 100) score += 5;\n  return Math.min(100, score);\n};\n\n// 🍳 레시피 개인화 점수 계산\nconst calculateRecipePersonalizationScore = (recipe, targets, context) => {\n  var _context$preferences4, _context$preferences5, _context$preferences6, _context$preferences7, _context$history;\n  let score = 0;\n\n  // 목표 적합성 (40%)\n  if (recipe.goalFit.includes(context.userProfile.goal)) score += 40;\n\n  // 조리시간 적합성 (20%)\n  if (((_context$preferences4 = context.preferences) === null || _context$preferences4 === void 0 ? void 0 : _context$preferences4.cookingTime) === 'quick' && recipe.cookingTime <= 15) score += 20;else if (((_context$preferences5 = context.preferences) === null || _context$preferences5 === void 0 ? void 0 : _context$preferences5.cookingTime) === 'normal' && recipe.cookingTime <= 30) score += 20;else if (((_context$preferences6 = context.preferences) === null || _context$preferences6 === void 0 ? void 0 : _context$preferences6.cookingTime) === 'slow' && recipe.cookingTime > 30) score += 20;else score += 10;\n\n  // 난이도 적합성 (15%)\n  if (((_context$preferences7 = context.preferences) === null || _context$preferences7 === void 0 ? void 0 : _context$preferences7.difficulty) === recipe.difficulty) score += 15;else score += 5;\n\n  // 영양소 균형 (15%)\n  const recipeNutrition = calculateRecipeNutrition(recipe.id);\n  if (recipeNutrition.calories > 0) {\n    const proteinRatio = recipeNutrition.protein * 4 / recipeNutrition.calories * 100;\n    const targetProteinRatio = targets.macroPercentages.protein;\n    if (Math.abs(proteinRatio - targetProteinRatio) < 10) score += 15;else if (Math.abs(proteinRatio - targetProteinRatio) < 20) score += 10;\n  }\n\n  // 최근 조리 이력 (10%) - 다양성 보장\n  if ((_context$history = context.history) !== null && _context$history !== void 0 && _context$history.cookedRecipes && !context.history.cookedRecipes.includes(recipe.id)) {\n    score += 10;\n  } else {\n    score += 5;\n  }\n  return Math.min(100, score);\n};\n\n// 🛡️ 제품 다양성 보장\nconst ensureProductDiversity = products => {\n  const categorySet = new Set(products.map(p => p.category));\n  const categories = Array.from(categorySet);\n  const diverseProducts = [];\n\n  // 카테고리별로 최소 1개씩 선택\n  categories.forEach(category => {\n    const categoryProducts = products.filter(p => p.category === category);\n    if (categoryProducts.length > 0) {\n      diverseProducts.push(categoryProducts[0]);\n    }\n  });\n\n  // 나머지 자리는 점수 순으로 채우기\n  const remainingProducts = products.filter(p => !diverseProducts.includes(p));\n  diverseProducts.push(...remainingProducts.slice(0, 12 - diverseProducts.length));\n  return diverseProducts;\n};\n\n// 📦 제품 지속 기간 추정 (일 단위)\nconst getProductDuration = product => {\n  // 제품명과 용량 정보로 지속 기간 추정\n  if (product.weight.includes('30팩')) return 30;\n  if (product.weight.includes('20개') || product.weight.includes('20팩')) return 20;\n  if (product.weight.includes('15팩')) return 15;\n  if (product.weight.includes('12개') || product.weight.includes('12팩')) return 12;\n  if (product.weight.includes('10팩') || product.weight.includes('10개')) return 10;\n  if (product.weight.includes('8팩') || product.weight.includes('8개')) return 8;\n  if (product.weight.includes('6개') || product.weight.includes('6팩')) return 6;\n  if (product.weight.includes('5kg')) return 20; // 5kg 제품은 약 20일\n  if (product.weight.includes('3kg')) return 15; // 3kg 제품은 약 15일\n  if (product.weight.includes('500g')) return 5; // 500g 제품은 약 5일\n  return 7; // 기본값: 1주일\n};\n\n// 💰 레시피별 월간 비용 계산 (정확한 계산)\nconst calculateRecipeMonthlyCost = (recipeId, monthlyFrequency = 10) => {\n  const ingredients = getRecipeIngredients(recipeId);\n  let totalMonthlyCost = 0;\n  ingredients.forEach(ingredient => {\n    const product = ingredient.product;\n    const productDuration = getProductDuration(product); // 제품 지속 기간 (일)\n    const recipesPerProduct = productDuration; // 한 제품으로 만들 수 있는 레시피 수\n    const costPerRecipe = product.price / recipesPerProduct; // 레시피 1회당 비용\n    const monthlyCost = costPerRecipe * monthlyFrequency; // 월간 해당 재료 비용\n\n    totalMonthlyCost += monthlyCost;\n  });\n  return Math.round(totalMonthlyCost);\n};\n\n// 🍽️ 구매한 재료로 레시피를 몇 번 해먹을 수 있는지 계산\nexport const calculateRecipeFrequency = recipeId => {\n  const ingredients = getRecipeIngredients(recipeId);\n  // recipes 배열이 없으므로 임시 레시피 정보 사용\n  const recipe = {\n    id: recipeId,\n    name: `레시피 ${recipeId}`\n  };\n  const ingredientAnalysis = ingredients.map(ingredient => {\n    const product = ingredient.product;\n\n    // 📦 정확한 제품 패키지 분석 (실제 mock 데이터 기준)\n    const analyzePackage = packageInfo => {\n      console.log(`🔍 패키지 분석 중: \"${packageInfo}\"`); // 디버그용\n\n      // 패턴: \"단위 x 개수\" 형태 분석\n\n      // 1️⃣ \"100g x 30팩\" 형태\n      const gramPackPattern = /(\\d+)g\\s*x\\s*(\\d+)/i;\n      const gramPackMatch = packageInfo.match(gramPackPattern);\n      if (gramPackMatch) {\n        const perPack = parseInt(gramPackMatch[1]);\n        const packCount = parseInt(gramPackMatch[2]);\n        console.log(`📦 그램팩: ${perPack}g x ${packCount}팩 = ${perPack * packCount}g`);\n        return {\n          totalAmount: perPack * packCount,\n          unitType: 'g'\n        };\n      }\n\n      // 2️⃣ \"150g x 12개\" 형태  \n      const gramItemPattern = /(\\d+)g\\s*x\\s*(\\d+)개/i;\n      const gramItemMatch = packageInfo.match(gramItemPattern);\n      if (gramItemMatch) {\n        const perItem = parseInt(gramItemMatch[1]);\n        const itemCount = parseInt(gramItemMatch[2]);\n        console.log(`📦 그램개수: ${perItem}g x ${itemCount}개 = ${perItem * itemCount}g`);\n        return {\n          totalAmount: perItem * itemCount,\n          unitType: 'g'\n        };\n      }\n\n      // 3️⃣ \"5kg\" 단일 형태\n      const singleKgPattern = /(\\d+)kg/i;\n      const singleKgMatch = packageInfo.match(singleKgPattern);\n      if (singleKgMatch) {\n        const kg = parseInt(singleKgMatch[1]);\n        console.log(`📦 킬로그램: ${kg}kg = ${kg * 1000}g`);\n        return {\n          totalAmount: kg * 1000,\n          unitType: 'g'\n        };\n      }\n\n      // 4️⃣ \"500g\" 단일 형태\n      const singleGramPattern = /(\\d+)g(?!\\s*x)/i;\n      const singleGramMatch = packageInfo.match(singleGramPattern);\n      if (singleGramMatch) {\n        const grams = parseInt(singleGramMatch[1]);\n        console.log(`📦 그램: ${grams}g`);\n        return {\n          totalAmount: grams,\n          unitType: 'g'\n        };\n      }\n\n      // 5️⃣ \"12개\" 단일 개수 형태\n      const singleCountPattern = /(\\d+)개(?!\\s*[×x])/i;\n      const singleCountMatch = packageInfo.match(singleCountPattern);\n      if (singleCountMatch) {\n        const count = parseInt(singleCountMatch[1]);\n        console.log(`📦 개수: ${count}개`);\n        return {\n          totalAmount: count,\n          unitType: '개'\n        };\n      }\n\n      // 6️⃣ \"2L\" 리터 형태\n      const literPattern = /(\\d+(?:\\.\\d+)?)L/i;\n      const literMatch = packageInfo.match(literPattern);\n      if (literMatch) {\n        const liters = parseFloat(literMatch[1]);\n        console.log(`📦 리터: ${liters}L = ${liters * 1000}ml`);\n        return {\n          totalAmount: liters * 1000,\n          unitType: 'ml'\n        };\n      }\n\n      // 7️⃣ \"500ml\" 밀리리터 형태\n      const mlPattern = /(\\d+)ml/i;\n      const mlMatch = packageInfo.match(mlPattern);\n      if (mlMatch) {\n        const ml = parseInt(mlMatch[1]);\n        console.log(`📦 밀리리터: ${ml}ml`);\n        return {\n          totalAmount: ml,\n          unitType: 'ml'\n        };\n      }\n      console.warn(`⚠️ 패키지 정보 분석 실패: \"${packageInfo}\" - 기본값 사용`);\n      return {\n        totalAmount: 100,\n        unitType: 'g'\n      }; // 기본값\n    };\n    const packageAnalysis = analyzePackage(product.weight);\n    const packageTotalAmount = packageAnalysis.totalAmount;\n    const packageUnitType = packageAnalysis.unitType;\n    const recipeUsage = ingredient.quantity;\n    const recipeUnit = ingredient.unit;\n    console.log(`🧮 계산 중: ${product.name}`);\n    console.log(`📦 패키지: ${packageTotalAmount}${packageUnitType}`);\n    console.log(`🥄 레시피 사용량: ${recipeUsage}${recipeUnit}`);\n\n    // 🔢 단위 통일 후 계산\n    let maxRecipesFromThisIngredient;\n    if (recipeUnit === 'g' && (packageUnitType === 'g' || packageUnitType === 'ml')) {\n      // 그램 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === 'ml' && packageUnitType === 'ml') {\n      // 밀리리터 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === '개' && packageUnitType === '개') {\n      // 개수 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === '큰술') {\n      // 큰술 = 약 15ml/15g\n      const recipeAmountInGrams = recipeUsage * 15;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else if (recipeUnit === '작은술') {\n      // 작은술 = 약 5ml/5g\n      const recipeAmountInGrams = recipeUsage * 5;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else if (recipeUnit === '컵') {\n      // 컵 = 약 200ml/200g\n      const recipeAmountInGrams = recipeUsage * 200;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else {\n      // 기타 단위: 보수적 계산\n      console.warn(`⚠️ 단위 변환 불가: ${recipeUnit} ↔ ${packageUnitType}`);\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / (recipeUsage * 10));\n    }\n\n    // 🛡️ 0으로 나누기 방지\n    if (maxRecipesFromThisIngredient <= 0) {\n      console.warn(`⚠️ 계산 결과가 0 이하: ${product.name} - 최소값 1로 설정`);\n      maxRecipesFromThisIngredient = 1;\n    }\n    const costPerRecipe = Math.round(product.price / maxRecipesFromThisIngredient);\n    console.log(`✅ 결과: ${maxRecipesFromThisIngredient}번 가능, 1회당 ${costPerRecipe}원`);\n    return {\n      productName: product.name,\n      productPackageSize: product.weight,\n      usagePerRecipe: `${recipeUsage}${recipeUnit}`,\n      maxRecipesFromThisIngredient: maxRecipesFromThisIngredient,\n      costPerRecipe: costPerRecipe,\n      totalProductCost: product.price\n    };\n  });\n\n  // 🎯 병목 재료 찾기 (가장 적게 만들 수 있는 횟수)\n  const minPossibleRecipes = Math.min(...ingredientAnalysis.map(analysis => analysis.maxRecipesFromThisIngredient));\n\n  // 📊 평균 제조 가능 횟수\n  const averageRecipesPerIngredient = Math.round(ingredientAnalysis.reduce((sum, analysis) => sum + analysis.maxRecipesFromThisIngredient, 0) / ingredientAnalysis.length);\n\n  // 💰 레시피 1회당 총 비용\n  const totalCostPerRecipe = ingredientAnalysis.reduce((sum, analysis) => sum + analysis.costPerRecipe, 0);\n  return {\n    recipeId,\n    recipeName: (recipe === null || recipe === void 0 ? void 0 : recipe.name) || '알 수 없는 레시피',\n    ingredientAnalysis,\n    minPossibleRecipes,\n    averageRecipesPerIngredient,\n    totalCostPerRecipe: Math.round(totalCostPerRecipe)\n  };\n};\n\n// 💰 예산 기반 레시피 필터링 및 조합 선택\nconst getBudgetAwareRecipeCombination = (goalRecipes, monthlyBudget, nutritionTargets) => {\n  // 각 레시피의 월간 비용과 영양가 계산\n  const recipeAnalysis = goalRecipes.map(recipe => {\n    const monthlyCost = calculateRecipeMonthlyCost(recipe.id, 10); // 한 달에 10번 해당 레시피\n    const nutrition = calculateRecipeNutrition(recipe.id);\n    const nutritionScore = (nutrition.protein * 4 + nutrition.carb * 4 + nutrition.fat * 9) / monthlyCost; // 원당 영양가\n\n    return {\n      recipe,\n      monthlyCost,\n      nutrition,\n      nutritionScore,\n      costPerCalorie: monthlyCost / (nutrition.calories || 1)\n    };\n  });\n\n  // 예산 범위 내 레시피들만 필터링\n  const affordableRecipes = recipeAnalysis.filter(analysis => analysis.monthlyCost <= monthlyBudget * 0.4 // 단일 레시피가 예산의 40%를 넘지 않도록\n  );\n  if (affordableRecipes.length === 0) {\n    // 예산이 너무 적으면 가장 저렴한 레시피들 선택\n    const sortedByCost = recipeAnalysis.sort((a, b) => a.monthlyCost - b.monthlyCost);\n    return sortedByCost.slice(0, 3).map(analysis => analysis.recipe);\n  }\n\n  // 🎯 최적 조합 찾기 (예산 내에서 영양가 최대화) - 성능 최적화\n  const findOptimalCombination = () => {\n    const combinations = [];\n    const maxCombinations = 1000; // 조합 수 제한으로 성능 향상\n\n    // 가격 기준 사전 정렬로 조기 종료 최적화\n    const sortedByPrice = affordableRecipes.sort((a, b) => a.monthlyCost - b.monthlyCost);\n\n    // 아침, 점심, 저녁용 레시피를 각각 선택 (최적화된 루프)\n    outerLoop: for (let i = 0; i < sortedByPrice.length && combinations.length < maxCombinations; i++) {\n      const breakfast = sortedByPrice[i];\n      for (let j = 0; j < sortedByPrice.length && combinations.length < maxCombinations; j++) {\n        const lunch = sortedByPrice[j];\n\n        // 조기 종료 조건 (2개 합계가 이미 예산 초과)\n        if (breakfast.monthlyCost + lunch.monthlyCost > monthlyBudget * 0.9) {\n          continue;\n        }\n        for (let k = 0; k < sortedByPrice.length && combinations.length < maxCombinations; k++) {\n          const dinner = sortedByPrice[k];\n          const totalCost = breakfast.monthlyCost + lunch.monthlyCost + dinner.monthlyCost;\n          if (totalCost <= monthlyBudget) {\n            combinations.push([breakfast.recipe, lunch.recipe, dinner.recipe]);\n          } else {\n            // 가격순 정렬되어 있으므로 더 이상 확인 불필요\n            break;\n          }\n        }\n      }\n    }\n    if (combinations.length === 0) {\n      // 3개 조합이 불가능하면 가장 저렴한 2개 선택\n      const sortedByCost = affordableRecipes.sort((a, b) => a.monthlyCost - b.monthlyCost);\n      return sortedByCost.slice(0, 2).map(analysis => analysis.recipe);\n    }\n\n    // 영양가 점수가 가장 높은 조합 선택\n    let bestCombination = combinations[0];\n    let bestScore = 0;\n    combinations.forEach(combination => {\n      const totalNutrition = combination.reduce((sum, recipe) => {\n        const nutrition = calculateRecipeNutrition(recipe.id);\n        return {\n          calories: sum.calories + nutrition.calories,\n          protein: sum.protein + nutrition.protein,\n          carb: sum.carb + nutrition.carb,\n          fat: sum.fat + nutrition.fat\n        };\n      }, {\n        calories: 0,\n        protein: 0,\n        carb: 0,\n        fat: 0\n      });\n\n      // 목표 영양소와의 근사도 점수\n      const calorieScore = 100 - Math.abs(totalNutrition.calories - nutritionTargets.targetCalories) / nutritionTargets.targetCalories * 100;\n      const proteinScore = 100 - Math.abs(totalNutrition.protein - nutritionTargets.macroGrams.protein) / nutritionTargets.macroGrams.protein * 100;\n      const combinationScore = Math.max(0, calorieScore) + Math.max(0, proteinScore);\n      if (combinationScore > bestScore) {\n        bestScore = combinationScore;\n        bestCombination = combination;\n      }\n    });\n    return bestCombination;\n  };\n  return findOptimalCombination();\n};\n\n// 🎯 전체 개인화 추천 통합 함수\nexport const generatePersonalizedRecommendations = (userProfile, calorieCalculation, preferences, history) => {\n  const context = {\n    userProfile,\n    calorieCalculation,\n    currentTime: new Date(),\n    preferences,\n    history\n  };\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  const recommendedProducts = getPersonalizedProductRecommendations(context);\n  const recommendedRecipes = getPersonalizedRecipeRecommendations(context);\n\n  // 개인화 메시지 생성\n  const personalizedMessage = generatePersonalizedMessage(userProfile, nutritionTargets);\n  return {\n    nutritionTargets,\n    recommendedProducts,\n    recommendedRecipes,\n    personalizedMessage,\n    context\n  };\n};\n\n// 💰 예산 고려 개인화 추천 함수 (메인)\nexport const generateBudgetAwareRecommendations = async (userProfile, calorieCalculation, monthlyBudget, preferences, history) => {\n  const context = {\n    userProfile,\n    calorieCalculation,\n    currentTime: new Date(),\n    preferences,\n    history\n  };\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n\n  // 🎯 목표에 맞는 모든 레시피 가져오기 (비동기)\n  const goalRecipes = await getRecipesByGoal(userProfile.goal || 'maintenance');\n\n  // 💰 예산 기반 최적 레시피 조합 선택\n  const budgetOptimizedRecipes = getBudgetAwareRecipeCombination(goalRecipes, monthlyBudget, nutritionTargets);\n\n  // 📊 예산 분석\n  const costBreakdown = budgetOptimizedRecipes.map(recipe => {\n    const monthlyCost = calculateRecipeMonthlyCost(recipe.id, 10);\n    return {\n      recipeId: recipe.id,\n      recipeName: recipe.name,\n      monthlyCost,\n      costPercentage: monthlyCost / monthlyBudget * 100\n    };\n  });\n  const totalEstimatedCost = costBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n  const budgetUsagePercentage = totalEstimatedCost / monthlyBudget * 100;\n\n  // 제품 추천은 기존 로직 활용\n  const recommendedProducts = getPersonalizedProductRecommendations(context);\n\n  // 💬 예산 고려 메시지 생성\n  const personalizedMessage = generateBudgetAwareMessage(userProfile, nutritionTargets, monthlyBudget, totalEstimatedCost);\n  return {\n    personalizedMessage,\n    nutritionTargets,\n    recommendedProducts,\n    recommendedRecipes: budgetOptimizedRecipes,\n    budgetAnalysis: {\n      totalEstimatedCost,\n      budgetUsagePercentage,\n      costBreakdown\n    },\n    context\n  };\n};\n\n// 💬 개인화 메시지 생성\nconst generatePersonalizedMessage = (userProfile, targets) => {\n  const {\n    goal,\n    gender,\n    age,\n    weight\n  } = userProfile;\n  const {\n    targetCalories,\n    dailyProteinNeeds\n  } = targets;\n  const goalMessages = {\n    weight_loss: `${gender === 'male' ? '형' : '님'}의 다이어트 성공을 위해 일일 ${targetCalories}kcal, 단백질 ${Math.round(dailyProteinNeeds)}g 목표로 맞춤 식단을 준비했어요! 💪`,\n    muscle_gain: `${age}세 ${gender === 'male' ? '형' : '님'}의 근성장을 위해 일일 ${targetCalories}kcal, 고단백 ${Math.round(dailyProteinNeeds)}g 식단으로 구성했어요! 🔥`,\n    maintenance: `${weight}kg 건강 유지를 위해 일일 ${targetCalories}kcal 균형 잡힌 식단을 추천드려요! ⚖️`\n  };\n  return goalMessages[goal] || '맞춤형 식단을 준비했어요! 🎯';\n};\n\n// 💰 예산 고려 메시지 생성\nconst generateBudgetAwareMessage = (userProfile, targets, monthlyBudget, estimatedCost) => {\n  const {\n    goal,\n    gender\n  } = userProfile;\n  const {\n    targetCalories,\n    dailyProteinNeeds\n  } = targets;\n  const savings = monthlyBudget - estimatedCost;\n  const usagePercentage = estimatedCost / monthlyBudget * 100;\n  const baseMessage = `${gender === 'male' ? '형' : '님'}의 ${goal === 'weight_loss' ? '다이어트' : goal === 'muscle_gain' ? '근성장' : '건강유지'} 목표에 맞춰`;\n  if (usagePercentage <= 70) {\n    return `${baseMessage} 예산을 알뜰하게 활용한 식단을 준비했어요! 💰 월 ${estimatedCost.toLocaleString()}원으로 목표 달성이 가능해요 (${savings.toLocaleString()}원 절약!) 🎯`;\n  } else if (usagePercentage <= 90) {\n    return `${baseMessage} 예산에 딱 맞는 효율적인 식단을 구성했어요! 💪 월 ${estimatedCost.toLocaleString()}원으로 목표 영양소를 충족할 수 있어요! 🎯`;\n  } else {\n    return `${baseMessage} 예산을 최대한 활용한 가성비 최고의 식단이에요! 💯 월 ${estimatedCost.toLocaleString()}원으로 최고의 영양 효과를 얻으세요! 🔥`;\n  }\n};","map":{"version":3,"names":["weightLossProducts","muscleGainProducts","maintenanceProducts","getRecipesByGoal","calculateRecipeNutrition","getRecipeIngredients","calculatePersonalizedNutritionTargets","userProfile","calorieCalculation","goal","weight","height","age","gender","targetCalories","proteinPerKg","weight_loss","maintenance","muscle_gain","dailyProteinNeeds","proteinCalories","proteinPercentage","fatPercentage","carbPercentage","macroPercentages","protein","Math","max","min","fat","carb","macroGrams","getPersonalizedProductRecommendations","context","nutritionTargets","candidateProducts","filter","p","nutrition","calories","slice","dailyBudget","budget","mealBudget","affordableProducts","product","productDuration","getProductDuration","costPerMeal","price","scoredProducts","map","score","calculateAdvancedNutrientScore","sortedProducts","sort","a","b","diverseProducts","ensureProductDiversity","sp","getPersonalizedRecipeRecommendations","baseRecipes","currentHour","currentTime","getHours","mealType","filteredRecipes","recipe","_context$preferences","_context$preferences2","_context$preferences3","preferences","cookingTime","difficulty","scoredRecipes","calculateRecipePersonalizationScore","sr","targets","calorieRatio","fatRatio","sodium","nutritionValue","pricePerNutrition","_context$preferences4","_context$preferences5","_context$preferences6","_context$preferences7","_context$history","goalFit","includes","recipeNutrition","id","proteinRatio","targetProteinRatio","abs","history","cookedRecipes","products","categorySet","Set","category","categories","Array","from","forEach","categoryProducts","length","push","remainingProducts","calculateRecipeMonthlyCost","recipeId","monthlyFrequency","ingredients","totalMonthlyCost","ingredient","recipesPerProduct","costPerRecipe","monthlyCost","round","calculateRecipeFrequency","name","ingredientAnalysis","analyzePackage","packageInfo","console","log","gramPackPattern","gramPackMatch","match","perPack","parseInt","packCount","totalAmount","unitType","gramItemPattern","gramItemMatch","perItem","itemCount","singleKgPattern","singleKgMatch","kg","singleGramPattern","singleGramMatch","grams","singleCountPattern","singleCountMatch","count","literPattern","literMatch","liters","parseFloat","mlPattern","mlMatch","ml","warn","packageAnalysis","packageTotalAmount","packageUnitType","recipeUsage","quantity","recipeUnit","unit","maxRecipesFromThisIngredient","floor","recipeAmountInGrams","productName","productPackageSize","usagePerRecipe","totalProductCost","minPossibleRecipes","analysis","averageRecipesPerIngredient","reduce","sum","totalCostPerRecipe","recipeName","getBudgetAwareRecipeCombination","goalRecipes","monthlyBudget","recipeAnalysis","nutritionScore","costPerCalorie","affordableRecipes","sortedByCost","findOptimalCombination","combinations","maxCombinations","sortedByPrice","outerLoop","i","breakfast","j","lunch","k","dinner","totalCost","bestCombination","bestScore","combination","totalNutrition","calorieScore","proteinScore","combinationScore","generatePersonalizedRecommendations","Date","recommendedProducts","recommendedRecipes","personalizedMessage","generatePersonalizedMessage","generateBudgetAwareRecommendations","budgetOptimizedRecipes","costBreakdown","costPercentage","totalEstimatedCost","item","budgetUsagePercentage","generateBudgetAwareMessage","budgetAnalysis","goalMessages","estimatedCost","savings","usagePercentage","baseMessage","toLocaleString"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/personalizedRecommendation.ts"],"sourcesContent":["import { UserProfile, CalorieCalculation, CoupangProduct, Recipe, PersonalizedNutritionTargets } from '../types';\nimport { \n  weightLossProducts, \n  muscleGainProducts, \n  maintenanceProducts\n} from '../data/mockProducts';\nimport { getRecipesByGoal, calculateRecipeNutrition, getRecipeIngredients } from '../data/recipeData';\n\n// 🎯 개인화 추천 컨텍스트\nexport interface PersonalizedContext {\n  userProfile: UserProfile;\n  calorieCalculation: CalorieCalculation;\n  currentTime: Date;\n  preferences?: {\n    cuisineTypes?: string[];         // 선호 요리 종류\n    allergens?: string[];            // 알레르기 유발 요소\n    cookingTime?: 'quick' | 'normal' | 'slow'; // 조리 시간 선호도\n    difficulty?: 'easy' | 'medium' | 'hard';   // 난이도 선호도\n    priceRange?: 'budget' | 'standard' | 'premium'; // 가격대 선호도\n  };\n  history?: {\n    purchasedProducts?: string[];    // 구매 이력\n    cookedRecipes?: string[];        // 조리 이력\n    favoriteIngredients?: string[];  // 선호 재료\n  };\n}\n\n// 🧮 사용자별 맞춤 영양소 목표 계산\nexport const calculatePersonalizedNutritionTargets = (\n  userProfile: UserProfile,\n  calorieCalculation: CalorieCalculation\n) => {\n  const { goal, weight, height, age, gender } = userProfile;\n  const { targetCalories } = calorieCalculation;\n\n  // 목표별 단백질 필요량 (체중 1kg당)\n  const proteinPerKg = {\n    weight_loss: 1.6,    // 다이어트: 근손실 방지를 위해 높은 단백질\n    maintenance: 1.2,    // 유지: 일반 권장량\n    muscle_gain: 1.8     // 근성장: 높은 단백질 필요\n  };\n\n  // 개인별 단백질 필요량 계산\n  const dailyProteinNeeds = weight * proteinPerKg[goal];\n  const proteinCalories = dailyProteinNeeds * 4;\n  const proteinPercentage = (proteinCalories / targetCalories) * 100;\n\n  // 목표별 지방 비율 조정\n  const fatPercentage = {\n    weight_loss: 20,     // 다이어트: 낮은 지방\n    maintenance: 30,     // 유지: 균형\n    muscle_gain: 25      // 근성장: 중간 지방\n  }[goal];\n\n  // 나머지는 탄수화물\n  const carbPercentage = 100 - proteinPercentage - fatPercentage;\n\n  return {\n    targetCalories,\n    dailyProteinNeeds,\n    macroPercentages: {\n      protein: Math.max(15, Math.min(35, proteinPercentage)), // 15-35% 범위\n      fat: fatPercentage,\n      carb: Math.max(30, carbPercentage) // 최소 30%\n    },\n    macroGrams: {\n      protein: dailyProteinNeeds,\n      fat: (targetCalories * fatPercentage / 100) / 9,\n      carb: (targetCalories * carbPercentage / 100) / 4\n    }\n  };\n};\n\n// 🎯 스마트 제품 추천 엔진\nexport const getPersonalizedProductRecommendations = (\n  context: PersonalizedContext\n): CoupangProduct[] => {\n  const { userProfile, calorieCalculation } = context;\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  \n  // 목표별 기본 제품군 선택\n  let candidateProducts: CoupangProduct[] = [];\n  \n  switch (userProfile.goal) {\n    case 'weight_loss':\n      candidateProducts = [\n        ...weightLossProducts,\n        ...maintenanceProducts.filter(p => p.nutrition.calories < 150)\n      ];\n      break;\n    case 'muscle_gain':\n      candidateProducts = [\n        ...muscleGainProducts,\n        ...maintenanceProducts.filter(p => p.nutrition.protein > 15)\n      ];\n      break;\n    case 'maintenance':\n    default:\n      candidateProducts = [...maintenanceProducts, ...weightLossProducts.slice(0, 2)];\n      break;\n  }\n\n  // 예산 필터링 (더 현실적인 접근)\n  const dailyBudget = userProfile.budget / 30; // 일일 예산\n  const mealBudget = dailyBudget / 3; // 끼니당 예산\n  \n  const affordableProducts = candidateProducts.filter(product => {\n    // 1주일치 구매 시 끼니당 비용 계산\n    const productDuration = getProductDuration(product);\n    const costPerMeal = (product.price / productDuration) / 3;\n    return costPerMeal <= mealBudget * 2; // 예산의 200%까지 허용\n  });\n\n  // 영양소 적합성 점수 계산\n  const scoredProducts = affordableProducts.map(product => ({\n    product,\n    score: calculateAdvancedNutrientScore(product, nutritionTargets, context)\n  }));\n\n  // 점수순 정렬 및 다양성 보장\n  const sortedProducts = scoredProducts\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 20); // 상위 20개 선별\n\n  // 카테고리별 다양성 보장\n  const diverseProducts = ensureProductDiversity(sortedProducts.map(sp => sp.product));\n  \n  return diverseProducts.slice(0, 12);\n};\n\n// 🍳 스마트 레시피 추천 엔진\nexport const getPersonalizedRecipeRecommendations = async (\n  context: PersonalizedContext\n): Promise<Recipe[]> => {\n  const { userProfile } = context;\n  const baseRecipes = await getRecipesByGoal(userProfile.goal);\n  \n  // 시간대별 필터링\n  const currentHour = context.currentTime.getHours();\n  let mealType: 'breakfast' | 'lunch' | 'dinner';\n  \n  if (currentHour < 11) mealType = 'breakfast';\n  else if (currentHour < 17) mealType = 'lunch'; \n  else mealType = 'dinner';\n\n  // 사용자 선호도 반영\n  let filteredRecipes = baseRecipes.filter((recipe: Recipe) => {\n    // 시간대 맞춤\n    if (recipe.mealType !== mealType) return false;\n    \n    // 조리시간 선호도\n    if (context.preferences?.cookingTime === 'quick' && recipe.cookingTime > 15) return false;\n    if (context.preferences?.cookingTime === 'slow' && recipe.cookingTime < 20) return false;\n    \n    // 난이도 선호도\n    if (context.preferences?.difficulty && recipe.difficulty !== context.preferences.difficulty) {\n      return false;\n    }\n    \n    return true;\n  });\n\n  // 영양 목표에 맞는 레시피 점수 계산\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, context.calorieCalculation);\n  \n  const scoredRecipes = filteredRecipes.map((recipe: Recipe) => ({\n    recipe,\n    score: calculateRecipePersonalizationScore(recipe, nutritionTargets, context)\n  }));\n\n  // 점수순 정렬\n  return scoredRecipes\n    .sort((a: any, b: any) => b.score - a.score)\n    .map((sr: any) => sr.recipe)\n    .slice(0, 6);\n};\n\n// 🎯 고급 영양소 점수 계산\nconst calculateAdvancedNutrientScore = (\n  product: CoupangProduct,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>,\n  context: PersonalizedContext\n): number => {\n  let score = 0;\n  const nutrition = product.nutrition;\n  \n  // 목표 칼로리 대비 적합성 (30%)\n  const calorieRatio = nutrition.calories / targets.targetCalories * 100;\n  if (calorieRatio > 5 && calorieRatio < 25) score += 30;\n  else if (calorieRatio <= 5) score += 20;\n  \n  // 단백질 함량 평가 (25%)\n  if (context.userProfile.goal === 'weight_loss' || context.userProfile.goal === 'muscle_gain') {\n    if (nutrition.protein > 20) score += 25;\n    else if (nutrition.protein > 15) score += 20;\n    else if (nutrition.protein > 10) score += 10;\n  } else {\n    if (nutrition.protein > 5) score += 25;\n  }\n  \n  // 지방 함량 평가 (20%)\n  const fatRatio = (nutrition.fat * 9) / nutrition.calories * 100;\n  if (context.userProfile.goal === 'weight_loss' && fatRatio < 30) score += 20;\n  else if (context.userProfile.goal === 'muscle_gain' && fatRatio > 20 && fatRatio < 40) score += 20;\n  else if (context.userProfile.goal === 'maintenance' && fatRatio > 25 && fatRatio < 35) score += 20;\n  \n  // 나트륨 함량 평가 (15%)\n  if (nutrition.sodium < 300) score += 15;\n  else if (nutrition.sodium < 500) score += 10;\n  else if (nutrition.sodium < 800) score += 5;\n  \n  // 가격 대비 영양가 (10%)\n  const nutritionValue = (nutrition.protein * 4 + nutrition.carb * 4 + nutrition.fat * 9);\n  const pricePerNutrition = product.price / nutritionValue;\n  if (pricePerNutrition < 50) score += 10;\n  else if (pricePerNutrition < 100) score += 5;\n  \n  return Math.min(100, score);\n};\n\n// 🍳 레시피 개인화 점수 계산\nconst calculateRecipePersonalizationScore = (\n  recipe: Recipe,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>,\n  context: PersonalizedContext\n): number => {\n  let score = 0;\n  \n  // 목표 적합성 (40%)\n  if (recipe.goalFit.includes(context.userProfile.goal)) score += 40;\n  \n  // 조리시간 적합성 (20%)\n  if (context.preferences?.cookingTime === 'quick' && recipe.cookingTime <= 15) score += 20;\n  else if (context.preferences?.cookingTime === 'normal' && recipe.cookingTime <= 30) score += 20;\n  else if (context.preferences?.cookingTime === 'slow' && recipe.cookingTime > 30) score += 20;\n  else score += 10;\n  \n  // 난이도 적합성 (15%)\n  if (context.preferences?.difficulty === recipe.difficulty) score += 15;\n  else score += 5;\n  \n  // 영양소 균형 (15%)\n  const recipeNutrition = calculateRecipeNutrition(recipe.id);\n  if (recipeNutrition.calories > 0) {\n    const proteinRatio = (recipeNutrition.protein * 4) / recipeNutrition.calories * 100;\n    const targetProteinRatio = targets.macroPercentages.protein;\n    \n    if (Math.abs(proteinRatio - targetProteinRatio) < 10) score += 15;\n    else if (Math.abs(proteinRatio - targetProteinRatio) < 20) score += 10;\n  }\n  \n  // 최근 조리 이력 (10%) - 다양성 보장\n  if (context.history?.cookedRecipes && !context.history.cookedRecipes.includes(recipe.id)) {\n    score += 10;\n  } else {\n    score += 5;\n  }\n  \n  return Math.min(100, score);\n};\n\n// 🛡️ 제품 다양성 보장\nconst ensureProductDiversity = (products: CoupangProduct[]): CoupangProduct[] => {\n  const categorySet = new Set(products.map(p => p.category));\n  const categories = Array.from(categorySet);\n  const diverseProducts: CoupangProduct[] = [];\n  \n  // 카테고리별로 최소 1개씩 선택\n  categories.forEach(category => {\n    const categoryProducts = products.filter(p => p.category === category);\n    if (categoryProducts.length > 0) {\n      diverseProducts.push(categoryProducts[0]);\n    }\n  });\n  \n  // 나머지 자리는 점수 순으로 채우기\n  const remainingProducts = products.filter(p => !diverseProducts.includes(p));\n  diverseProducts.push(...remainingProducts.slice(0, 12 - diverseProducts.length));\n  \n  return diverseProducts;\n};\n\n// 📦 제품 지속 기간 추정 (일 단위)\nconst getProductDuration = (product: CoupangProduct): number => {\n  // 제품명과 용량 정보로 지속 기간 추정\n  if (product.weight.includes('30팩')) return 30;\n  if (product.weight.includes('20개') || product.weight.includes('20팩')) return 20;\n  if (product.weight.includes('15팩')) return 15;\n  if (product.weight.includes('12개') || product.weight.includes('12팩')) return 12;\n  if (product.weight.includes('10팩') || product.weight.includes('10개')) return 10;\n  if (product.weight.includes('8팩') || product.weight.includes('8개')) return 8;\n  if (product.weight.includes('6개') || product.weight.includes('6팩')) return 6;\n  if (product.weight.includes('5kg')) return 20; // 5kg 제품은 약 20일\n  if (product.weight.includes('3kg')) return 15; // 3kg 제품은 약 15일\n  if (product.weight.includes('500g')) return 5;  // 500g 제품은 약 5일\n  return 7; // 기본값: 1주일\n};\n\n// 💰 레시피별 월간 비용 계산 (정확한 계산)\nconst calculateRecipeMonthlyCost = (recipeId: string, monthlyFrequency: number = 10): number => {\n  const ingredients = getRecipeIngredients(recipeId);\n  let totalMonthlyCost = 0;\n\n  ingredients.forEach(ingredient => {\n    const product = ingredient.product;\n    const productDuration = getProductDuration(product); // 제품 지속 기간 (일)\n    const recipesPerProduct = productDuration; // 한 제품으로 만들 수 있는 레시피 수\n    const costPerRecipe = product.price / recipesPerProduct; // 레시피 1회당 비용\n    const monthlyCost = costPerRecipe * monthlyFrequency; // 월간 해당 재료 비용\n    \n    totalMonthlyCost += monthlyCost;\n  });\n\n  return Math.round(totalMonthlyCost);\n};\n\n// 🍽️ 구매한 재료로 레시피를 몇 번 해먹을 수 있는지 계산\nexport const calculateRecipeFrequency = (recipeId: string): {\n  recipeId: string;\n  recipeName: string;\n  ingredientAnalysis: Array<{\n    productName: string;\n    productPackageSize: string;\n    usagePerRecipe: string;\n    maxRecipesFromThisIngredient: number;\n    costPerRecipe: number;\n    totalProductCost: number;\n  }>;\n  minPossibleRecipes: number; // 가장 적게 만들 수 있는 횟수 (병목 재료 기준)\n  averageRecipesPerIngredient: number;\n  totalCostPerRecipe: number;\n} => {\n  const ingredients = getRecipeIngredients(recipeId);\n  // recipes 배열이 없으므로 임시 레시피 정보 사용\n  const recipe = { id: recipeId, name: `레시피 ${recipeId}` };\n  \n  const ingredientAnalysis = ingredients.map((ingredient: any) => {\n    const product = ingredient.product;\n    \n    // 📦 정확한 제품 패키지 분석 (실제 mock 데이터 기준)\n    const analyzePackage = (packageInfo: string): { totalAmount: number, unitType: string } => {\n      console.log(`🔍 패키지 분석 중: \"${packageInfo}\"`); // 디버그용\n      \n      // 패턴: \"단위 x 개수\" 형태 분석\n      \n      // 1️⃣ \"100g x 30팩\" 형태\n      const gramPackPattern = /(\\d+)g\\s*x\\s*(\\d+)/i;\n      const gramPackMatch = packageInfo.match(gramPackPattern);\n      if (gramPackMatch) {\n        const perPack = parseInt(gramPackMatch[1]);\n        const packCount = parseInt(gramPackMatch[2]);\n        console.log(`📦 그램팩: ${perPack}g x ${packCount}팩 = ${perPack * packCount}g`);\n        return { totalAmount: perPack * packCount, unitType: 'g' };\n      }\n      \n      // 2️⃣ \"150g x 12개\" 형태  \n      const gramItemPattern = /(\\d+)g\\s*x\\s*(\\d+)개/i;\n      const gramItemMatch = packageInfo.match(gramItemPattern);\n      if (gramItemMatch) {\n        const perItem = parseInt(gramItemMatch[1]);\n        const itemCount = parseInt(gramItemMatch[2]);\n        console.log(`📦 그램개수: ${perItem}g x ${itemCount}개 = ${perItem * itemCount}g`);\n        return { totalAmount: perItem * itemCount, unitType: 'g' };\n      }\n      \n      // 3️⃣ \"5kg\" 단일 형태\n      const singleKgPattern = /(\\d+)kg/i;\n      const singleKgMatch = packageInfo.match(singleKgPattern);\n      if (singleKgMatch) {\n        const kg = parseInt(singleKgMatch[1]);\n        console.log(`📦 킬로그램: ${kg}kg = ${kg * 1000}g`);\n        return { totalAmount: kg * 1000, unitType: 'g' };\n      }\n      \n      // 4️⃣ \"500g\" 단일 형태\n      const singleGramPattern = /(\\d+)g(?!\\s*x)/i;\n      const singleGramMatch = packageInfo.match(singleGramPattern);\n      if (singleGramMatch) {\n        const grams = parseInt(singleGramMatch[1]);\n        console.log(`📦 그램: ${grams}g`);\n        return { totalAmount: grams, unitType: 'g' };\n      }\n      \n      // 5️⃣ \"12개\" 단일 개수 형태\n      const singleCountPattern = /(\\d+)개(?!\\s*[×x])/i;\n      const singleCountMatch = packageInfo.match(singleCountPattern);\n      if (singleCountMatch) {\n        const count = parseInt(singleCountMatch[1]);\n        console.log(`📦 개수: ${count}개`);\n        return { totalAmount: count, unitType: '개' };\n      }\n      \n      // 6️⃣ \"2L\" 리터 형태\n      const literPattern = /(\\d+(?:\\.\\d+)?)L/i;\n      const literMatch = packageInfo.match(literPattern);\n      if (literMatch) {\n        const liters = parseFloat(literMatch[1]);\n        console.log(`📦 리터: ${liters}L = ${liters * 1000}ml`);\n        return { totalAmount: liters * 1000, unitType: 'ml' };\n      }\n      \n      // 7️⃣ \"500ml\" 밀리리터 형태\n      const mlPattern = /(\\d+)ml/i;\n      const mlMatch = packageInfo.match(mlPattern);\n      if (mlMatch) {\n        const ml = parseInt(mlMatch[1]);\n        console.log(`📦 밀리리터: ${ml}ml`);\n        return { totalAmount: ml, unitType: 'ml' };\n      }\n      \n      console.warn(`⚠️ 패키지 정보 분석 실패: \"${packageInfo}\" - 기본값 사용`);\n      return { totalAmount: 100, unitType: 'g' }; // 기본값\n    };\n    \n    const packageAnalysis = analyzePackage(product.weight);\n    const packageTotalAmount = packageAnalysis.totalAmount;\n    const packageUnitType = packageAnalysis.unitType;\n    const recipeUsage = ingredient.quantity;\n    const recipeUnit = ingredient.unit;\n    \n    console.log(`🧮 계산 중: ${product.name}`);\n    console.log(`📦 패키지: ${packageTotalAmount}${packageUnitType}`);\n    console.log(`🥄 레시피 사용량: ${recipeUsage}${recipeUnit}`);\n    \n    // 🔢 단위 통일 후 계산\n    let maxRecipesFromThisIngredient: number;\n    \n    if (recipeUnit === 'g' && (packageUnitType === 'g' || packageUnitType === 'ml')) {\n      // 그램 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === 'ml' && packageUnitType === 'ml') {\n      // 밀리리터 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === '개' && packageUnitType === '개') {\n      // 개수 단위: 직접 계산 가능\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeUsage);\n    } else if (recipeUnit === '큰술') {\n      // 큰술 = 약 15ml/15g\n      const recipeAmountInGrams = recipeUsage * 15;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else if (recipeUnit === '작은술') {\n      // 작은술 = 약 5ml/5g\n      const recipeAmountInGrams = recipeUsage * 5;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else if (recipeUnit === '컵') {\n      // 컵 = 약 200ml/200g\n      const recipeAmountInGrams = recipeUsage * 200;\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / recipeAmountInGrams);\n    } else {\n      // 기타 단위: 보수적 계산\n      console.warn(`⚠️ 단위 변환 불가: ${recipeUnit} ↔ ${packageUnitType}`);\n      maxRecipesFromThisIngredient = Math.floor(packageTotalAmount / (recipeUsage * 10));\n    }\n    \n    // 🛡️ 0으로 나누기 방지\n    if (maxRecipesFromThisIngredient <= 0) {\n      console.warn(`⚠️ 계산 결과가 0 이하: ${product.name} - 최소값 1로 설정`);\n      maxRecipesFromThisIngredient = 1;\n    }\n    \n    const costPerRecipe = Math.round(product.price / maxRecipesFromThisIngredient);\n    \n    console.log(`✅ 결과: ${maxRecipesFromThisIngredient}번 가능, 1회당 ${costPerRecipe}원`);\n    \n    return {\n      productName: product.name,\n      productPackageSize: product.weight,\n      usagePerRecipe: `${recipeUsage}${recipeUnit}`,\n      maxRecipesFromThisIngredient: maxRecipesFromThisIngredient,\n      costPerRecipe: costPerRecipe,\n      totalProductCost: product.price\n    };\n  });\n  \n  // 🎯 병목 재료 찾기 (가장 적게 만들 수 있는 횟수)\n  const minPossibleRecipes = Math.min(...ingredientAnalysis.map(analysis => analysis.maxRecipesFromThisIngredient));\n  \n  // 📊 평균 제조 가능 횟수\n  const averageRecipesPerIngredient = Math.round(\n    ingredientAnalysis.reduce((sum, analysis) => sum + analysis.maxRecipesFromThisIngredient, 0) / ingredientAnalysis.length\n  );\n  \n  // 💰 레시피 1회당 총 비용\n  const totalCostPerRecipe = ingredientAnalysis.reduce((sum, analysis) => sum + analysis.costPerRecipe, 0);\n  \n  return {\n    recipeId,\n    recipeName: recipe?.name || '알 수 없는 레시피',\n    ingredientAnalysis,\n    minPossibleRecipes,\n    averageRecipesPerIngredient,\n    totalCostPerRecipe: Math.round(totalCostPerRecipe)\n  };\n};\n\n// 💰 예산 기반 레시피 필터링 및 조합 선택\nconst getBudgetAwareRecipeCombination = (\n  goalRecipes: Recipe[], \n  monthlyBudget: number,\n  nutritionTargets: PersonalizedNutritionTargets\n): Recipe[] => {\n  // 각 레시피의 월간 비용과 영양가 계산\n  const recipeAnalysis = goalRecipes.map(recipe => {\n    const monthlyCost = calculateRecipeMonthlyCost(recipe.id, 10); // 한 달에 10번 해당 레시피\n    const nutrition = calculateRecipeNutrition(recipe.id);\n    const nutritionScore = (nutrition.protein * 4 + nutrition.carb * 4 + nutrition.fat * 9) / monthlyCost; // 원당 영양가\n    \n    return {\n      recipe,\n      monthlyCost,\n      nutrition,\n      nutritionScore,\n      costPerCalorie: monthlyCost / (nutrition.calories || 1)\n    };\n  });\n\n  // 예산 범위 내 레시피들만 필터링\n  const affordableRecipes = recipeAnalysis.filter(analysis => \n    analysis.monthlyCost <= monthlyBudget * 0.4 // 단일 레시피가 예산의 40%를 넘지 않도록\n  );\n\n  if (affordableRecipes.length === 0) {\n    // 예산이 너무 적으면 가장 저렴한 레시피들 선택\n    const sortedByCost = recipeAnalysis.sort((a, b) => a.monthlyCost - b.monthlyCost);\n    return sortedByCost.slice(0, 3).map(analysis => analysis.recipe);\n  }\n\n  // 🎯 최적 조합 찾기 (예산 내에서 영양가 최대화) - 성능 최적화\n  const findOptimalCombination = (): Recipe[] => {\n    const combinations: Recipe[][] = [];\n    const maxCombinations = 1000; // 조합 수 제한으로 성능 향상\n    \n    // 가격 기준 사전 정렬로 조기 종료 최적화\n    const sortedByPrice = affordableRecipes.sort((a, b) => a.monthlyCost - b.monthlyCost);\n    \n    // 아침, 점심, 저녁용 레시피를 각각 선택 (최적화된 루프)\n    outerLoop: for (let i = 0; i < sortedByPrice.length && combinations.length < maxCombinations; i++) {\n      const breakfast = sortedByPrice[i];\n      \n      for (let j = 0; j < sortedByPrice.length && combinations.length < maxCombinations; j++) {\n        const lunch = sortedByPrice[j];\n        \n        // 조기 종료 조건 (2개 합계가 이미 예산 초과)\n        if (breakfast.monthlyCost + lunch.monthlyCost > monthlyBudget * 0.9) {\n          continue;\n        }\n        \n        for (let k = 0; k < sortedByPrice.length && combinations.length < maxCombinations; k++) {\n          const dinner = sortedByPrice[k];\n          const totalCost = breakfast.monthlyCost + lunch.monthlyCost + dinner.monthlyCost;\n          \n          if (totalCost <= monthlyBudget) {\n            combinations.push([breakfast.recipe, lunch.recipe, dinner.recipe]);\n          } else {\n            // 가격순 정렬되어 있으므로 더 이상 확인 불필요\n            break;\n          }\n        }\n      }\n    }\n\n    if (combinations.length === 0) {\n      // 3개 조합이 불가능하면 가장 저렴한 2개 선택\n      const sortedByCost = affordableRecipes.sort((a, b) => a.monthlyCost - b.monthlyCost);\n      return sortedByCost.slice(0, 2).map(analysis => analysis.recipe);\n    }\n\n    // 영양가 점수가 가장 높은 조합 선택\n    let bestCombination = combinations[0];\n    let bestScore = 0;\n\n    combinations.forEach(combination => {\n      const totalNutrition = combination.reduce((sum, recipe) => {\n        const nutrition = calculateRecipeNutrition(recipe.id);\n        return {\n          calories: sum.calories + nutrition.calories,\n          protein: sum.protein + nutrition.protein,\n          carb: sum.carb + nutrition.carb,\n          fat: sum.fat + nutrition.fat\n        };\n      }, { calories: 0, protein: 0, carb: 0, fat: 0 });\n\n      // 목표 영양소와의 근사도 점수\n      const calorieScore = 100 - Math.abs(totalNutrition.calories - nutritionTargets.targetCalories) / nutritionTargets.targetCalories * 100;\n      const proteinScore = 100 - Math.abs(totalNutrition.protein - nutritionTargets.macroGrams.protein) / nutritionTargets.macroGrams.protein * 100;\n      \n      const combinationScore = Math.max(0, calorieScore) + Math.max(0, proteinScore);\n\n      if (combinationScore > bestScore) {\n        bestScore = combinationScore;\n        bestCombination = combination;\n      }\n    });\n\n    return bestCombination;\n  };\n\n  return findOptimalCombination();\n};\n\n// 🎯 전체 개인화 추천 통합 함수\nexport const generatePersonalizedRecommendations = (\n  userProfile: UserProfile,\n  calorieCalculation: CalorieCalculation,\n  preferences?: PersonalizedContext['preferences'],\n  history?: PersonalizedContext['history']\n) => {\n  const context: PersonalizedContext = {\n    userProfile,\n    calorieCalculation,\n    currentTime: new Date(),\n    preferences,\n    history\n  };\n\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  const recommendedProducts = getPersonalizedProductRecommendations(context);\n  const recommendedRecipes = getPersonalizedRecipeRecommendations(context);\n\n  // 개인화 메시지 생성\n  const personalizedMessage = generatePersonalizedMessage(userProfile, nutritionTargets);\n\n  return {\n    nutritionTargets,\n    recommendedProducts,\n    recommendedRecipes,\n    personalizedMessage,\n    context\n  };\n};\n\n// 💰 예산 고려 개인화 추천 함수 (메인)\nexport const generateBudgetAwareRecommendations = async (\n  userProfile: UserProfile,\n  calorieCalculation: CalorieCalculation,\n  monthlyBudget: number,\n  preferences?: PersonalizedContext['preferences'],\n  history?: PersonalizedContext['history']\n): Promise<{\n  personalizedMessage: string;\n  nutritionTargets: PersonalizedNutritionTargets;\n  recommendedProducts: CoupangProduct[];\n  recommendedRecipes: Recipe[];\n  budgetAnalysis: {\n    totalEstimatedCost: number;\n    budgetUsagePercentage: number;\n    costBreakdown: Array<{\n      recipeId: string;\n      recipeName: string;\n      monthlyCost: number;\n      costPercentage: number;\n    }>;\n  };\n  context: PersonalizedContext;\n}> => {\n  const context: PersonalizedContext = {\n    userProfile,\n    calorieCalculation,\n    currentTime: new Date(),\n    preferences,\n    history\n  };\n\n  const nutritionTargets = calculatePersonalizedNutritionTargets(userProfile, calorieCalculation);\n  \n  // 🎯 목표에 맞는 모든 레시피 가져오기 (비동기)\n  const goalRecipes = await getRecipesByGoal(userProfile.goal || 'maintenance');\n  \n  // 💰 예산 기반 최적 레시피 조합 선택\n  const budgetOptimizedRecipes = getBudgetAwareRecipeCombination(\n    goalRecipes, \n    monthlyBudget, \n    nutritionTargets\n  );\n\n  // 📊 예산 분석\n  const costBreakdown = budgetOptimizedRecipes.map(recipe => {\n    const monthlyCost = calculateRecipeMonthlyCost(recipe.id, 10);\n    return {\n      recipeId: recipe.id,\n      recipeName: recipe.name,\n      monthlyCost,\n      costPercentage: (monthlyCost / monthlyBudget) * 100\n    };\n  });\n\n  const totalEstimatedCost = costBreakdown.reduce((sum, item) => sum + item.monthlyCost, 0);\n  const budgetUsagePercentage = (totalEstimatedCost / monthlyBudget) * 100;\n\n  // 제품 추천은 기존 로직 활용\n  const recommendedProducts = getPersonalizedProductRecommendations(context);\n\n  // 💬 예산 고려 메시지 생성\n  const personalizedMessage = generateBudgetAwareMessage(\n    userProfile, \n    nutritionTargets, \n    monthlyBudget, \n    totalEstimatedCost\n  );\n\n  return {\n    personalizedMessage,\n    nutritionTargets,\n    recommendedProducts,\n    recommendedRecipes: budgetOptimizedRecipes,\n    budgetAnalysis: {\n      totalEstimatedCost,\n      budgetUsagePercentage,\n      costBreakdown\n    },\n    context\n  };\n};\n\n// 💬 개인화 메시지 생성\nconst generatePersonalizedMessage = (\n  userProfile: UserProfile,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>\n): string => {\n  const { goal, gender, age, weight } = userProfile;\n  const { targetCalories, dailyProteinNeeds } = targets;\n\n  const goalMessages = {\n    weight_loss: `${gender === 'male' ? '형' : '님'}의 다이어트 성공을 위해 일일 ${targetCalories}kcal, 단백질 ${Math.round(dailyProteinNeeds)}g 목표로 맞춤 식단을 준비했어요! 💪`,\n    muscle_gain: `${age}세 ${gender === 'male' ? '형' : '님'}의 근성장을 위해 일일 ${targetCalories}kcal, 고단백 ${Math.round(dailyProteinNeeds)}g 식단으로 구성했어요! 🔥`, \n    maintenance: `${weight}kg 건강 유지를 위해 일일 ${targetCalories}kcal 균형 잡힌 식단을 추천드려요! ⚖️`\n  };\n\n  return goalMessages[goal] || '맞춤형 식단을 준비했어요! 🎯';\n};\n\n// 💰 예산 고려 메시지 생성\nconst generateBudgetAwareMessage = (\n  userProfile: UserProfile,\n  targets: ReturnType<typeof calculatePersonalizedNutritionTargets>,\n  monthlyBudget: number,\n  estimatedCost: number\n): string => {\n  const { goal, gender } = userProfile;\n  const { targetCalories, dailyProteinNeeds } = targets;\n  const savings = monthlyBudget - estimatedCost;\n  const usagePercentage = (estimatedCost / monthlyBudget) * 100;\n\n  const baseMessage = `${gender === 'male' ? '형' : '님'}의 ${goal === 'weight_loss' ? '다이어트' : goal === 'muscle_gain' ? '근성장' : '건강유지'} 목표에 맞춰`;\n\n  if (usagePercentage <= 70) {\n    return `${baseMessage} 예산을 알뜰하게 활용한 식단을 준비했어요! 💰 월 ${estimatedCost.toLocaleString()}원으로 목표 달성이 가능해요 (${savings.toLocaleString()}원 절약!) 🎯`;\n  } else if (usagePercentage <= 90) {\n    return `${baseMessage} 예산에 딱 맞는 효율적인 식단을 구성했어요! 💪 월 ${estimatedCost.toLocaleString()}원으로 목표 영양소를 충족할 수 있어요! 🎯`;\n  } else {\n    return `${baseMessage} 예산을 최대한 활용한 가성비 최고의 식단이에요! 💯 월 ${estimatedCost.toLocaleString()}원으로 최고의 영양 효과를 얻으세요! 🔥`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{mockProducts}from'../data/mockProducts';// 🍳 만개의 레시피 원본 데이터 구조\n// 🧮 AI 기반 영양소 계산기\nclass NutritionCalculator{constructor(){// 기본 영양 데이터베이스 (농진청 기준)\nthis.nutritionDB={// 🥚 단백질류\n'계란':{calories:155,protein:12.6,carb:1.1,fat:11.1,per100g:true},'비엔나':{calories:315,protein:12.0,carb:2.0,fat:28.5,per100g:true},'훈제연어':{calories:117,protein:25.4,carb:0,fat:4.3,per100g:true},'우삼겹':{calories:331,protein:15.0,carb:0,fat:30.0,per100g:true},// 🥬 채소류\n'알배기배추':{calories:14,protein:1.3,carb:2.8,fat:0.1,per100g:true},'당근':{calories:37,protein:0.8,carb:8.8,fat:0.2,per100g:true},'마늘':{calories:130,protein:6.2,carb:28.4,fat:0.3,per100g:true},'대파':{calories:27,protein:1.4,carb:6.2,fat:0.1,per100g:true},'양파':{calories:37,protein:1.0,carb:8.9,fat:0.1,per100g:true},'아보카도':{calories:190,protein:2.0,carb:8.6,fat:19.5,per100g:true},'숙주':{calories:13,protein:1.4,carb:2.1,fat:0.1,per100g:true},'깻잎':{calories:41,protein:3.9,carb:7.1,fat:0.7,per100g:true},// 🍚 곡물류\n'밥':{calories:130,protein:2.5,carb:29.0,fat:0.3,per100g:true},'떡볶이떡':{calories:124,protein:2.6,carb:28.0,fat:0.4,per100g:true},// 🧄 조미료류\n'소금':{calories:0,protein:0,carb:0,fat:0,per100g:true},'간장':{calories:53,protein:8.9,carb:4.6,fat:0.1,per100g:true},'설탕':{calories:387,protein:0,carb:99.8,fat:0,per100g:true},'참기름':{calories:900,protein:0,carb:0,fat:100,per100g:true},'마요네즈':{calories:680,protein:1.1,carb:2.9,fat:75.3,per100g:true},'땅콩버터':{calories:588,protein:22.5,carb:22.3,fat:49.9,per100g:true}};}// 단위 변환기\nconvertToGrams(quantity,unit,ingredientName){const conversions={'g':1,'kg':1000,'ml':1,// 물 기준 1ml = 1g\n'개':this.getItemWeight(ingredientName),'장':this.getSheetWeight(ingredientName),'통':this.getWholeWeight(ingredientName),'공기':150,// 밥 1공기\n'봉':this.getPackageWeight(ingredientName),'단':this.getBunchWeight(ingredientName),'T':15,// 큰술\n't':5,// 작은술\n'큰술':15,'작은술':5,'스푼':15};return quantity*(conversions[unit]||50);// 기본값 50g\n}getItemWeight(ingredientName){const weights={'계란':50,// 계란 1개 = 50g\n'마늘':5,// 마늘 1개 = 5g  \n'양파':200,// 양파 1개 = 200g\n'감자':150,// 감자 1개 = 150g\n'당근':100// 당근 1개 = 100g\n};return weights[ingredientName]||50;}getSheetWeight(ingredientName){const weights={'사각어묵':25,// 어묵 1장 = 25g\n'알배추잎':30,// 배추잎 1장 = 30g\n'깻잎':1// 깻잎 1장 = 1g\n};return weights[ingredientName]||20;}getWholeWeight(ingredientName){const weights={'알배기배추':1500// 배추 1통 = 1.5kg\n};return weights[ingredientName]||500;}getPackageWeight(ingredientName){const weights={'숙주':200,// 숙주 1봉 = 200g\n'팽이버섯':150// 팽이버섯 1봉 = 150g\n};return weights[ingredientName]||100;}getBunchWeight(ingredientName){const weights={'대파':100,// 대파 1단 = 100g\n'얼갈이':300// 얼갈이 1단 = 300g\n};return weights[ingredientName]||100;}// 영양소 계산\ncalculateNutrition(ingredients){let totalNutrition={calories:0,protein:0,carb:0,fat:0};ingredients.forEach(ingredient=>{const baseNutrition=this.nutritionDB[ingredient.name];if(baseNutrition){const gramsUsed=this.convertToGrams(ingredient.quantity,ingredient.unit,ingredient.name);const ratio=gramsUsed/100;// 100g 기준으로 계산\ntotalNutrition.calories+=baseNutrition.calories*ratio;totalNutrition.protein+=baseNutrition.protein*ratio;totalNutrition.carb+=baseNutrition.carb*ratio;totalNutrition.fat+=baseNutrition.fat*ratio;}});return{calories:Math.round(totalNutrition.calories),protein:Math.round(totalNutrition.protein*10)/10,carb:Math.round(totalNutrition.carb*10)/10,fat:Math.round(totalNutrition.fat*10)/10};}}// 🤖 AI 기반 목표 분류기\nclass GoalClassifier{classifyRecipeGoals(ingredients,cookingMethod,mealPurpose,description,nutrition){const goals=[];// 🔥 다이어트 분류 로직 (스마트 분류)\nconst isLowCalorie=nutrition.calories<400;// 채소 기반 재료 확인 (더 포괄적)\nconst vegetableKeywords=['배추','숙주','깻잎','브로콜리','양배추','샐러드','야채','채소','무','당근','시금치','버섯','콩나물'];const isVegetableBased=ingredients.some(ing=>{const ingName=ing.name.toLowerCase();return vegetableKeywords.some(veg=>ingName.includes(veg));});// 다이어트 친화적 조리법\nconst lightCookingMethods=['찌기','삶기','무침'];const isLightCooking=lightCookingMethods.includes(cookingMethod);// 국물 요리 (포만감 높고 칼로리 낮음)\nconst isSoupBased=cookingMethod==='국/탕'||description.includes('국')||description.includes('탕');// 다이어트 키워드 (기존 + 추가)\nconst dietKeywords=['다이어트','저칼로리','살빼기','헬시','건강'];const hasDietKeyword=dietKeywords.some(keyword=>description.toLowerCase().includes(keyword));// 다이어트 레시피 판정 (더 관대하게)\nif(isLowCalorie||isVegetableBased||isLightCooking||isSoupBased||hasDietKeyword){goals.push('weight_loss');}// 💪 근성장 분류 로직 (스마트 분류)\nconst isHighProtein=nutrition.protein>20;// 단백질 재료 확인 (더 포괄적)\nconst proteinKeywords=['계란','달걀','닭','소고기','돼지','연어','참치','두부','새우','조개','생선','육'];const hasProteinSource=ingredients.some(ing=>{const ingName=ing.name.toLowerCase();return proteinKeywords.some(protein=>ingName.includes(protein));});// 고단백 조리법\nconst proteinCookingMethods=['굽기','볶기','튀기기'];const isProteinCooking=proteinCookingMethods.includes(cookingMethod);// 근성장 키워드\nconst muscleKeywords=['단백질','근육','고단백','프로틴'];const hasMuscleKeyword=muscleKeywords.some(keyword=>description.toLowerCase().includes(keyword));// 근성장 레시피 판정\nif(isHighProtein||hasProteinSource||isProteinCooking||hasMuscleKeyword){goals.push('muscle_gain');}// 🥘 균형 잡힌 식단 (maintenance) - 모든 레시피가 최소 하나의 목표를 가지도록\nif(goals.length===0||cookingMethod==='국/탕'||mealPurpose==='일상'){goals.push('maintenance');}return goals;}}// 🛒 쿠팡 상품 매칭기\nclass CoupangProductMatcher{findMatchingProduct(ingredientName){// 재료명 → 쿠팡 상품 매핑 테이블\nconst productMapping={'계란':'prod-whole-egg-1','당근':'prod-carrot-1','알배기배추':'prod-cabbage-1','아보카도':'prod-avocado-1','훈제연어':'prod-salmon-1'// 더 많은 매핑 추가 가능\n};const productId=productMapping[ingredientName];if(productId){return mockProducts.find(p=>p.id===productId)||null;}// 부분 매치 로직\nconst partialMatch=mockProducts.find(product=>product.name.includes(ingredientName)||ingredientName.includes(product.name.split(' ')[0]));return partialMatch||null;}matchIngredients(ingredients){return ingredients.map(ingredient=>{const product=this.findMatchingProduct(ingredient.name);return{product:product||this.createFallbackProduct(ingredient.name),quantity:ingredient.quantity,unit:ingredient.unit,isOptional:false};});}createFallbackProduct(ingredientName){// 매칭되지 않는 재료에 대한 기본 상품 생성\nreturn{id:\"fallback-\".concat(ingredientName),name:\"\".concat(ingredientName,\" (\\uCFE0\\uD321)\"),price:3000,// 기본 가격\nimageUrl:'https://via.placeholder.com/200x200?text='+encodeURIComponent(ingredientName),coupangUrl:'https://www.coupang.com/search?q='+encodeURIComponent(ingredientName),category:'식재료',nutrition:{calories:50,carb:10,protein:2,fat:1,sodium:100,sugar:0},description:\"\".concat(ingredientName,\" \\uC0C1\\uD488\"),brand:'일반',weight:'1개',rating:4.0,reviewCount:100,isRocketDelivery:false};}}// 🎯 메인 변환기 클래스\nexport class MankaeRecipeProcessor{constructor(){this.nutritionCalculator=new NutritionCalculator();this.goalClassifier=new GoalClassifier();this.productMatcher=new CoupangProductMatcher();}// 재료 문자열 파싱 (실제 CSV 형식에 맞춘 완전 개선 버전)\nparseIngredients(ingredientText){const ingredients=[];console.log(\"\\uD83E\\uDDEA \\uC7AC\\uB8CC \\uD30C\\uC2F1 \\uC2DC\\uC791: \\\"\".concat(ingredientText.substring(0,100),\"...\\\"\"));if(!ingredientText||ingredientText.trim()===''){console.log(\"\\u26A0\\uFE0F \\uC7AC\\uB8CC \\uD14D\\uC2A4\\uD2B8\\uAC00 \\uBE44\\uC5B4\\uC788\\uC74C\");return ingredients;}// 실제 CSV 형식 처리: \"[재료] 떡국떡400g| 다진소고기100g| ...\"\nconst sections=ingredientText.split(/\\[재료\\]|\\[양념\\]|\\[소스\\]|\\[육수\\]|\\[간장양념\\]|\\[양념장\\]|\\[얼갈이데칠때\\]|\\[만두전골 육수\\]|\\[전골요리 양념장\\]/);sections.forEach((section,sectionIndex)=>{if(!section.trim())return;console.log(\"\\uD83D\\uDD0D \\uC139\\uC158 \".concat(sectionIndex,\": \\\"\").concat(section.substring(0,50),\"...\\\"\"));const items=section.split('|').filter(item=>item.trim());console.log(\"\\uD83D\\uDCDD \\uC544\\uC774\\uD15C \\uAC1C\\uC218: \".concat(items.length));items.forEach((item,itemIndex)=>{const trimmed=item.trim();if(!trimmed||trimmed==='약간'||trimmed.length<2)return;console.log(\"\\uD83D\\uDD0D \\uC544\\uC774\\uD15C \".concat(itemIndex,\": \\\"\").concat(trimmed,\"\\\"\"));let match=null;// 🔥 실제 CSV 데이터 패턴에 완벽하게 맞춘 정규식들\n// 1. \"돼지고기수육용삼겹살500g\" 형태 (공백 없는 긴 이름 + 숫자 + 한글단위)\nmatch=trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);// 2. \"멸치육수800ml\" 형태 (공백 없는 이름 + 숫자 + 영어단위)\nif(!match){match=trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([a-zA-Z]+)$/);}// 3. \"돼지고기 수육용삼겹살500g\" 형태 (공백 포함 긴 이름 + 숫자 + 한글단위)\nif(!match){match=trimmed.match(/^(.+?)\\s+(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);}// 4. \"된장1.5큰술\" 형태 (소수점 + 한글단위)\nif(!match){match=trimmed.match(/^(.+?)(\\d+(?:\\.\\d+)?)([가-힣]+)$/);}// 5. \"대파1/3대\" 형태 (분수 + 한글단위)\nif(!match){match=trimmed.match(/^(.+?)(\\d+\\/\\d+)([가-힣]+)$/);}// 6. \"참기름1T\" 형태 (영어 단위)\nif(!match){match=trimmed.match(/^(.+?)(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([TtLl])$/);}// 7. \"소금\" 형태 (이름만, 수량 1로 설정)\nif(!match&&trimmed.length>1&&!trimmed.includes('약간')){match=[trimmed,trimmed,'1','개'];}if(match){const[,name,quantityStr,unit]=match;let quantity=parseFloat(quantityStr);// 분수 처리 (1/3 → 0.333)\nif(quantityStr.includes('/')){const[numerator,denominator]=quantityStr.split('/').map(Number);quantity=numerator/denominator;}const ingredient={name:name.trim(),quantity,unit:unit.trim()};ingredients.push(ingredient);console.log(\"\\u2705 \\uC7AC\\uB8CC \\uCD94\\uAC00: \".concat(ingredient.name,\" \").concat(ingredient.quantity).concat(ingredient.unit));}else{console.log(\"\\u274C \\uB9E4\\uCE6D \\uC2E4\\uD328: \\\"\".concat(trimmed,\"\\\"\"));// 실패한 경우라도 유효한 재료명 추출 시도\n// 숫자와 단위를 제외한 나머지를 재료명으로 간주\nconst nameOnlyMatch=trimmed.match(/^(.+?)(?:\\d|\\s*$)/);if(nameOnlyMatch&&nameOnlyMatch[1].trim().length>1&&!trimmed.includes('약간')&&!trimmed.includes('적당히')){const fallbackIngredient={name:nameOnlyMatch[1].trim(),quantity:1,unit:'개'};ingredients.push(fallbackIngredient);console.log(\"\\uD83D\\uDD04 \\uD3F4\\uBC31 \\uC7AC\\uB8CC \\uCD94\\uAC00: \".concat(fallbackIngredient.name,\" \").concat(fallbackIngredient.quantity).concat(fallbackIngredient.unit));}}});});console.log(\"\\uD83D\\uDCCB \\uCD5C\\uC885 \\uC7AC\\uB8CC \\uAC1C\\uC218: \".concat(ingredients.length));return ingredients;}// 조리시간 변환\nparseTime(timeStr){// null/undefined 체크 추가\nif(!timeStr||typeof timeStr!=='string'){console.log('⚠️ 조리시간 정보가 없음, 기본값 30분 사용');return 30;// 기본값 30분\n}if(timeStr.includes('시간')){const hours=parseInt(timeStr)||1;return hours*60;}const minutes=parseInt(timeStr)||15;return minutes;}// 🧪 파싱 함수 테스트 (임시 디버깅용)\ntestParseIngredients(ingredientText){console.log('🧪 파싱 테스트 시작:',ingredientText);return this.parseIngredients(ingredientText);}// 🔥 긴급 디버깅: 실제 CSV 데이터로 테스트\ndebugRealDataParsing(){const testData=[\"[재료] 떡국떡400g| 다진소고기100g| 멸치육수800ml| 대파1/3대| 계란2개| 참기름1T| 국간장1T\",\"[재료] 돼지고기 수육용삼겹살500g| 된장1.5큰술| 술4큰술| 홍어무침| 무생채| 콩나물무침\",\"[재료] 배추3장| 양파1/2개| 대파1대| 청양고추2개\"];testData.forEach((data,index)=>{console.log(\"\\n\\uD83E\\uDDEA \\uD14C\\uC2A4\\uD2B8 \".concat(index+1,\": \").concat(data));const result=this.parseIngredients(data);console.log(\"\\uD83D\\uDCCB \\uACB0\\uACFC: \".concat(result.length,\"\\uAC1C \\uC7AC\\uB8CC \\uD30C\\uC2F1\\uB428\"));result.forEach((ing,i)=>{console.log(\"   \".concat(i+1,\". \").concat(ing.name,\": \").concat(ing.quantity).concat(ing.unit));});});}// 인분수 변환\nparseServings(servingStr){if(!servingStr||typeof servingStr!=='string'){return 2;// 기본값 2인분\n}const match=servingStr.match(/(\\d+)/);return match?parseInt(match[1]):2;}// 난이도 변환\nparseDifficulty(difficultyStr){// null/undefined 체크 추가\nif(!difficultyStr||typeof difficultyStr!=='string'){console.log('⚠️ 난이도 정보가 없음, 기본값 medium 사용');return'medium';// 기본값 medium\n}if(difficultyStr.includes('초급')||difficultyStr.includes('아무나'))return'easy';if(difficultyStr.includes('중급'))return'medium';return'hard';}// 식사 타입 추론\ninferMealType(title,category,mealPurpose){// null/undefined 체크\nconst safeTitle=title||'';const safeCategory=category||'';const safeMealPurpose=mealPurpose||'';const titleLower=safeTitle.toLowerCase();if(titleLower.includes('아침')||safeMealPurpose==='아침대용')return'breakfast';if(titleLower.includes('점심'))return'lunch';if(titleLower.includes('저녁')||safeMealPurpose==='술안주')return'dinner';if(safeCategory==='양념/소스/잼'||safeMealPurpose==='간식')return'snack';// 기본값: 요리 종류에 따라 결정\nif(safeCategory==='국/탕')return'dinner';if(safeCategory==='밑반찬')return'lunch';return'lunch';// 기본값\n}// 품질 점수 계산\ncalculateQualityScore(views,scraps){// 조회수 기반 점수 (최대 5.0)\nconst viewScore=Math.min(views/200*5,5.0);// 스크랩율 기반 점수 (최대 5.0)\nconst engagementRate=views>0?scraps/views*100:0;const engagementScore=Math.min(engagementRate*50,5.0);// 전체 점수 (조회수 70% + 스크랩율 30%)\nconst overall=viewScore*0.7+engagementScore*0.3;return{overall:Math.round(overall*10)/10,taste:Math.min(overall+0.2,5.0),difficulty:Math.min(overall+0.1,5.0),nutrition:Math.min(overall-0.1,5.0),reviewCount:views};}// 🎯 메인 변환 함수 (성능 최적화)\nprocessRecipe(rawData){var _rawData$CKG_MTRL_CN;// 🔥 긴급 디버깅: 모든 레시피 처리 과정 추적\nconsole.log(\"\\uD83D\\uDD04 \\uB808\\uC2DC\\uD53C \\uCC98\\uB9AC \\uC2DC\\uC791: \".concat(rawData.RCP_TTL));console.log(\"   - \\uC6D0\\uBCF8 \\uC7AC\\uB8CC \\uB370\\uC774\\uD130: \\\"\".concat((_rawData$CKG_MTRL_CN=rawData.CKG_MTRL_CN)===null||_rawData$CKG_MTRL_CN===void 0?void 0:_rawData$CKG_MTRL_CN.substring(0,100),\"...\\\"\"));// 1단계: 재료 파싱\nconst ingredients=this.parseIngredients(rawData.CKG_MTRL_CN||'');console.log(\"   - \\uD30C\\uC2F1\\uB41C \\uC7AC\\uB8CC \\uC218: \".concat(ingredients.length,\"\\uAC1C\"));if(ingredients.length>0){console.log(\"   - \\uC0D8\\uD50C \\uC7AC\\uB8CC: \".concat(ingredients.slice(0,3).map(i=>\"\".concat(i.name,\"(\").concat(i.quantity).concat(i.unit,\")\")).join(', ')));}// 2단계: 영양소 계산 (캐시 활용)\nconst nutrition=this.nutritionCalculator.calculateNutrition(ingredients);console.log(\"   - \\uACC4\\uC0B0\\uB41C \\uC601\\uC591\\uC18C: \".concat(nutrition.calories,\"kcal, \").concat(nutrition.protein,\"g \\uB2E8\\uBC31\\uC9C8\"));// 3단계: 목표 분류 (최적화된 알고리즘)\nconst goalFit=this.goalClassifier.classifyRecipeGoals(ingredients,rawData.CKG_MTH_ACTO_NM||'',rawData.CKG_STA_ACTO_NM||'',rawData.CKG_IPDC||'',nutrition);console.log(\"   - \\uBD84\\uB958\\uB41C \\uBAA9\\uD45C: [\".concat(goalFit.join(', '),\"]\"));console.log('---');// 4단계: 품질 평가\nconst userRatings=this.calculateQualityScore(rawData.INQ_CNT||0,rawData.SRAP_CNT||0);// 5단계: Recipe 객체 생성\nconst recipe={id:\"mankae-\".concat(rawData.RCP_SNO),name:rawData.CKG_NM||'제목 없음',description:rawData.CKG_IPDC||'설명 없음',image:rawData.RCP_IMG_URL||\"https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3\",// 실제 이미지 또는 기본 이미지\ncookingTime:this.parseTime(rawData.CKG_TIME_NM||''),difficulty:this.parseDifficulty(rawData.CKG_DODF_NM||''),instructions:this.generateInstructions(rawData.CKG_MTH_ACTO_NM||'',ingredients),tags:this.generateTags(rawData,nutrition),mealType:this.inferMealType(rawData.RCP_TTL||'',rawData.CKG_KND_ACTO_NM||'',rawData.CKG_STA_ACTO_NM||''),goalFit,// 확장 정보 (선택적)\nnutritionHighlights:{mainBenefits:this.generateNutritionBenefits(ingredients,nutrition),calorieContext:\"\".concat(nutrition.calories,\"kcal\\uB85C \\uADE0\\uD615\\uC7A1\\uD78C \\uD55C \\uB07C\"),dietaryInfo:this.generateDietaryInfo(ingredients,nutrition)},userRatings,sourceInfo:{chef:rawData.RGTR_NM||'알 수 없음',source:'chef_recipe',verified:(rawData.INQ_CNT||0)>100,// 조회수 100 이상이면 검증된 것으로 간주\nlastUpdated:(rawData.FIRST_REG_DT||'20240101').substring(0,8)// YYYYMMDD 형식\n}};console.log(\"\\u2705 \\uBCC0\\uD658 \\uC644\\uB8CC: \".concat(recipe.name));return recipe;}// 조리법 생성\ngenerateInstructions(cookingMethod,ingredients){const baseInstructions={'부침':['팬에 기름을 두르고 중약불로 달궈주세요','재료를 올리고 노릇하게 부쳐주세요','뒤집어서 반대면도 익혀주세요','완성된 요리를 접시에 담아주세요'],'볶음':['팬을 달구고 기름을 두르세요','재료를 넣고 센 불에서 빠르게 볶아주세요','양념을 넣고 골고루 섞어주세요','불을 끄고 접시에 담아 완성하세요'],'찜':['재료를 깨끗이 손질하여 준비하세요','찜기에 물을 넣고 끓여주세요','재료를 찜기에 올리고 뚜껑을 덮어주세요','충분히 익으면 양념과 함께 완성하세요'],'끓이기':['냄비에 물을 넣고 끓여주세요','재료를 넣고 중불에서 끓여주세요','간을 맞추고 더 끓여주세요','그릇에 담아 뜨겁게 완성하세요']};return baseInstructions[cookingMethod]||['재료를 준비하고 손질하세요','적절한 방법으로 조리하세요','간을 맞추고 완성하세요'];}// 태그 생성\ngenerateTags(rawData,nutrition){const tags=[];// 조리법 기반 - null 체크\nif(rawData.CKG_MTH_ACTO_NM){tags.push(rawData.CKG_MTH_ACTO_NM);}// 영양 기반\nif(nutrition.protein>15)tags.push('고단백');if(nutrition.calories<200)tags.push('저칼로리');// 상황 기반 - null 체크\nif(rawData.CKG_STA_ACTO_NM==='초스피드')tags.push('간편');if(rawData.CKG_DODF_NM==='아무나')tags.push('초보자');// 시간 기반 - null 체크\nif(rawData.CKG_TIME_NM&&rawData.CKG_TIME_NM.includes('10분'))tags.push('10분완성');if(rawData.CKG_TIME_NM&&rawData.CKG_TIME_NM.includes('15분'))tags.push('15분완성');return tags;}// 영양 혜택 생성\ngenerateNutritionBenefits(ingredients,nutrition){const benefits=[];if(nutrition.protein>15){benefits.push(\"\\uACE0\\uB2E8\\uBC31\\uC9C8(\".concat(nutrition.protein,\"g)\\uB85C \\uADFC\\uC721 \\uAC74\\uAC15\\uC5D0 \\uB3C4\\uC6C0\"));}ingredients.forEach(ing=>{if(ing.name==='계란')benefits.push('완전단백질과 비타민 공급');if(ing.name==='배추')benefits.push('식이섬유와 비타민C 풍부');if(ing.name==='아보카도')benefits.push('건강한 불포화지방산 함유');});return benefits;}// 식단 정보 생성\ngenerateDietaryInfo(ingredients,nutrition){const info=[];if(nutrition.protein>15)info.push('고단백');if(nutrition.calories<200)info.push('저칼로리');const hasAnimalProducts=ingredients.some(ing=>['계란','우삼겹','훈제연어'].includes(ing.name));if(!hasAnimalProducts)info.push('비건');return info;}}","map":{"version":3,"names":["mockProducts","NutritionCalculator","constructor","nutritionDB","calories","protein","carb","fat","per100g","convertToGrams","quantity","unit","ingredientName","conversions","getItemWeight","getSheetWeight","getWholeWeight","getPackageWeight","getBunchWeight","weights","calculateNutrition","ingredients","totalNutrition","forEach","ingredient","baseNutrition","name","gramsUsed","ratio","Math","round","GoalClassifier","classifyRecipeGoals","cookingMethod","mealPurpose","description","nutrition","goals","isLowCalorie","vegetableKeywords","isVegetableBased","some","ing","ingName","toLowerCase","veg","includes","lightCookingMethods","isLightCooking","isSoupBased","dietKeywords","hasDietKeyword","keyword","push","isHighProtein","proteinKeywords","hasProteinSource","proteinCookingMethods","isProteinCooking","muscleKeywords","hasMuscleKeyword","length","CoupangProductMatcher","findMatchingProduct","productMapping","productId","find","p","id","partialMatch","product","split","matchIngredients","map","createFallbackProduct","isOptional","concat","price","imageUrl","encodeURIComponent","coupangUrl","category","sodium","sugar","brand","weight","rating","reviewCount","isRocketDelivery","MankaeRecipeProcessor","nutritionCalculator","goalClassifier","productMatcher","parseIngredients","ingredientText","console","log","substring","trim","sections","section","sectionIndex","items","filter","item","itemIndex","trimmed","match","quantityStr","parseFloat","numerator","denominator","Number","nameOnlyMatch","fallbackIngredient","parseTime","timeStr","hours","parseInt","minutes","testParseIngredients","debugRealDataParsing","testData","data","index","result","i","parseServings","servingStr","parseDifficulty","difficultyStr","inferMealType","title","safeTitle","safeCategory","safeMealPurpose","titleLower","calculateQualityScore","views","scraps","viewScore","min","engagementRate","engagementScore","overall","taste","difficulty","processRecipe","rawData","_rawData$CKG_MTRL_CN","RCP_TTL","CKG_MTRL_CN","slice","join","goalFit","CKG_MTH_ACTO_NM","CKG_STA_ACTO_NM","CKG_IPDC","userRatings","INQ_CNT","SRAP_CNT","recipe","RCP_SNO","CKG_NM","image","RCP_IMG_URL","cookingTime","CKG_TIME_NM","CKG_DODF_NM","instructions","generateInstructions","tags","generateTags","mealType","CKG_KND_ACTO_NM","nutritionHighlights","mainBenefits","generateNutritionBenefits","calorieContext","dietaryInfo","generateDietaryInfo","sourceInfo","chef","RGTR_NM","source","verified","lastUpdated","FIRST_REG_DT","baseInstructions","benefits","info","hasAnimalProducts"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/recipeDataProcessor.ts"],"sourcesContent":["import { Recipe, CoupangProduct, RecipeIngredient } from '../types';\nimport { mockProducts } from '../data/mockProducts';\n\n// 🍳 만개의 레시피 원본 데이터 구조\nexport interface MankaeLRecipeRaw {\n  RCP_SNO: string;           // 레시피 번호\n  RCP_TTL: string;           // 레시피 제목\n  CKG_NM: string;            // 요리명\n  RGTR_ID: string;           // 등록자 ID\n  RGTR_NM: string;           // 등록자명 (요리사)\n  INQ_CNT: number;           // 조회수\n  RCMM_CNT: number;          // 추천수\n  SRAP_CNT: number;          // 스크랩수\n  CKG_MTH_ACTO_NM: string;   // 조리법 (부침, 찜, 볶음, 끓이기)\n  CKG_STA_ACTO_NM: string;   // 상황 (영양식, 일상, 초스피드, 술안주)\n  CKG_MTRL_ACTO_NM: string;  // 주재료 (달걀/유제품, 채소류, 소고기)\n  CKG_KND_ACTO_NM: string;   // 요리종류 (밑반찬, 메인반찬, 국/탕)\n  CKG_IPDC: string;          // 요리소개\n  CKG_MTRL_CN: string;       // 재료 정보\n  CKG_INBUN_NM: string;      // 인분\n  CKG_DODF_NM: string;       // 난이도\n  CKG_TIME_NM: string;       // 조리시간\n  FIRST_REG_DT: string;      // 등록일\n  RCP_IMG_URL?: string;      // 레시피 이미지 URL\n}\n\n// 🧮 AI 기반 영양소 계산기\nclass NutritionCalculator {\n  // 기본 영양 데이터베이스 (농진청 기준)\n  private nutritionDB: Record<string, { calories: number; protein: number; carb: number; fat: number; per100g: boolean }> = {\n    // 🥚 단백질류\n    '계란': { calories: 155, protein: 12.6, carb: 1.1, fat: 11.1, per100g: true },\n    '비엔나': { calories: 315, protein: 12.0, carb: 2.0, fat: 28.5, per100g: true },\n    '훈제연어': { calories: 117, protein: 25.4, carb: 0, fat: 4.3, per100g: true },\n    '우삼겹': { calories: 331, protein: 15.0, carb: 0, fat: 30.0, per100g: true },\n    \n    // 🥬 채소류\n    '알배기배추': { calories: 14, protein: 1.3, carb: 2.8, fat: 0.1, per100g: true },\n    '당근': { calories: 37, protein: 0.8, carb: 8.8, fat: 0.2, per100g: true },\n    '마늘': { calories: 130, protein: 6.2, carb: 28.4, fat: 0.3, per100g: true },\n    '대파': { calories: 27, protein: 1.4, carb: 6.2, fat: 0.1, per100g: true },\n    '양파': { calories: 37, protein: 1.0, carb: 8.9, fat: 0.1, per100g: true },\n    '아보카도': { calories: 190, protein: 2.0, carb: 8.6, fat: 19.5, per100g: true },\n    '숙주': { calories: 13, protein: 1.4, carb: 2.1, fat: 0.1, per100g: true },\n    '깻잎': { calories: 41, protein: 3.9, carb: 7.1, fat: 0.7, per100g: true },\n    \n    // 🍚 곡물류\n    '밥': { calories: 130, protein: 2.5, carb: 29.0, fat: 0.3, per100g: true },\n    '떡볶이떡': { calories: 124, protein: 2.6, carb: 28.0, fat: 0.4, per100g: true },\n    \n    // 🧄 조미료류\n    '소금': { calories: 0, protein: 0, carb: 0, fat: 0, per100g: true },\n    '간장': { calories: 53, protein: 8.9, carb: 4.6, fat: 0.1, per100g: true },\n    '설탕': { calories: 387, protein: 0, carb: 99.8, fat: 0, per100g: true },\n    '참기름': { calories: 900, protein: 0, carb: 0, fat: 100, per100g: true },\n    '마요네즈': { calories: 680, protein: 1.1, carb: 2.9, fat: 75.3, per100g: true },\n    '땅콩버터': { calories: 588, protein: 22.5, carb: 22.3, fat: 49.9, per100g: true }\n  };\n  \n  // 단위 변환기\n  private convertToGrams(quantity: number, unit: string, ingredientName: string): number {\n    const conversions: Record<string, number> = {\n      'g': 1,\n      'kg': 1000,\n      'ml': 1, // 물 기준 1ml = 1g\n      '개': this.getItemWeight(ingredientName),\n      '장': this.getSheetWeight(ingredientName),\n      '통': this.getWholeWeight(ingredientName),\n      '공기': 150, // 밥 1공기\n      '봉': this.getPackageWeight(ingredientName),\n      '단': this.getBunchWeight(ingredientName),\n      'T': 15, // 큰술\n      't': 5,  // 작은술\n      '큰술': 15,\n      '작은술': 5,\n      '스푼': 15\n    };\n    \n    return quantity * (conversions[unit] || 50); // 기본값 50g\n  }\n  \n  private getItemWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '계란': 50,   // 계란 1개 = 50g\n      '마늘': 5,    // 마늘 1개 = 5g  \n      '양파': 200,  // 양파 1개 = 200g\n      '감자': 150,  // 감자 1개 = 150g\n      '당근': 100   // 당근 1개 = 100g\n    };\n    return weights[ingredientName] || 50;\n  }\n  \n  private getSheetWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '사각어묵': 25,  // 어묵 1장 = 25g\n      '알배추잎': 30,  // 배추잎 1장 = 30g\n      '깻잎': 1        // 깻잎 1장 = 1g\n    };\n    return weights[ingredientName] || 20;\n  }\n  \n  private getWholeWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '알배기배추': 1500  // 배추 1통 = 1.5kg\n    };\n    return weights[ingredientName] || 500;\n  }\n  \n  private getPackageWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '숙주': 200,      // 숙주 1봉 = 200g\n      '팽이버섯': 150   // 팽이버섯 1봉 = 150g\n    };\n    return weights[ingredientName] || 100;\n  }\n  \n  private getBunchWeight(ingredientName: string): number {\n    const weights: Record<string, number> = {\n      '대파': 100,      // 대파 1단 = 100g\n      '얼갈이': 300     // 얼갈이 1단 = 300g\n    };\n    return weights[ingredientName] || 100;\n  }\n  \n  // 영양소 계산\n  calculateNutrition(ingredients: Array<{name: string; quantity: number; unit: string}>): {\n    calories: number; protein: number; carb: number; fat: number;\n  } {\n    let totalNutrition = { calories: 0, protein: 0, carb: 0, fat: 0 };\n    \n    ingredients.forEach(ingredient => {\n      const baseNutrition = this.nutritionDB[ingredient.name];\n      if (baseNutrition) {\n        const gramsUsed = this.convertToGrams(ingredient.quantity, ingredient.unit, ingredient.name);\n        const ratio = gramsUsed / 100; // 100g 기준으로 계산\n        \n        totalNutrition.calories += baseNutrition.calories * ratio;\n        totalNutrition.protein += baseNutrition.protein * ratio;\n        totalNutrition.carb += baseNutrition.carb * ratio;\n        totalNutrition.fat += baseNutrition.fat * ratio;\n      }\n    });\n    \n    return {\n      calories: Math.round(totalNutrition.calories),\n      protein: Math.round(totalNutrition.protein * 10) / 10,\n      carb: Math.round(totalNutrition.carb * 10) / 10,\n      fat: Math.round(totalNutrition.fat * 10) / 10\n    };\n  }\n}\n\n// 🤖 AI 기반 목표 분류기\nclass GoalClassifier {\n  classifyRecipeGoals(\n    ingredients: Array<{name: string; quantity: number; unit: string}>,\n    cookingMethod: string,\n    mealPurpose: string,\n    description: string,\n    nutrition: {calories: number; protein: number; carb: number; fat: number}\n  ): ('weight_loss' | 'muscle_gain' | 'maintenance')[] {\n    const goals: ('weight_loss' | 'muscle_gain' | 'maintenance')[] = [];\n    \n    // 🔥 다이어트 분류 로직 (스마트 분류)\n    const isLowCalorie = nutrition.calories < 400;\n    \n    // 채소 기반 재료 확인 (더 포괄적)\n    const vegetableKeywords = ['배추', '숙주', '깻잎', '브로콜리', '양배추', '샐러드', '야채', '채소', '무', '당근', '시금치', '버섯', '콩나물'];\n    const isVegetableBased = ingredients.some(ing => {\n      const ingName = ing.name.toLowerCase();\n      return vegetableKeywords.some(veg => ingName.includes(veg));\n    });\n    \n    // 다이어트 친화적 조리법\n    const lightCookingMethods = ['찌기', '삶기', '무침'];\n    const isLightCooking = lightCookingMethods.includes(cookingMethod);\n    \n    // 국물 요리 (포만감 높고 칼로리 낮음)\n    const isSoupBased = cookingMethod === '국/탕' || description.includes('국') || description.includes('탕');\n    \n    // 다이어트 키워드 (기존 + 추가)\n    const dietKeywords = ['다이어트', '저칼로리', '살빼기', '헬시', '건강'];\n    const hasDietKeyword = dietKeywords.some(keyword => description.toLowerCase().includes(keyword));\n    \n    // 다이어트 레시피 판정 (더 관대하게)\n    if (isLowCalorie || isVegetableBased || isLightCooking || isSoupBased || hasDietKeyword) {\n      goals.push('weight_loss');\n    }\n    \n    // 💪 근성장 분류 로직 (스마트 분류)\n    const isHighProtein = nutrition.protein > 20;\n    \n    // 단백질 재료 확인 (더 포괄적)\n    const proteinKeywords = ['계란', '달걀', '닭', '소고기', '돼지', '연어', '참치', '두부', '새우', '조개', '생선', '육'];\n    const hasProteinSource = ingredients.some(ing => {\n      const ingName = ing.name.toLowerCase();\n      return proteinKeywords.some(protein => ingName.includes(protein));\n    });\n    \n    // 고단백 조리법\n    const proteinCookingMethods = ['굽기', '볶기', '튀기기'];\n    const isProteinCooking = proteinCookingMethods.includes(cookingMethod);\n    \n    // 근성장 키워드\n    const muscleKeywords = ['단백질', '근육', '고단백', '프로틴'];\n    const hasMuscleKeyword = muscleKeywords.some(keyword => description.toLowerCase().includes(keyword));\n    \n    // 근성장 레시피 판정\n    if (isHighProtein || hasProteinSource || isProteinCooking || hasMuscleKeyword) {\n      goals.push('muscle_gain');\n    }\n    \n    // 🥘 균형 잡힌 식단 (maintenance) - 모든 레시피가 최소 하나의 목표를 가지도록\n    if (goals.length === 0 || cookingMethod === '국/탕' || mealPurpose === '일상') {\n      goals.push('maintenance');\n    }\n    \n    return goals;\n  }\n}\n\n// 🛒 쿠팡 상품 매칭기\nclass CoupangProductMatcher {\n  private findMatchingProduct(ingredientName: string): CoupangProduct | null {\n    // 재료명 → 쿠팡 상품 매핑 테이블\n    const productMapping: Record<string, string> = {\n      '계란': 'prod-whole-egg-1',\n      '당근': 'prod-carrot-1',\n      '알배기배추': 'prod-cabbage-1',\n      '아보카도': 'prod-avocado-1',\n      '훈제연어': 'prod-salmon-1',\n      // 더 많은 매핑 추가 가능\n    };\n    \n    const productId = productMapping[ingredientName];\n    if (productId) {\n      return mockProducts.find(p => p.id === productId) || null;\n    }\n    \n    // 부분 매치 로직\n    const partialMatch = mockProducts.find(product => \n      product.name.includes(ingredientName) || \n      ingredientName.includes(product.name.split(' ')[0])\n    );\n    \n    return partialMatch || null;\n  }\n  \n  matchIngredients(ingredients: Array<{name: string; quantity: number; unit: string}>): RecipeIngredient[] {\n    return ingredients.map(ingredient => {\n      const product = this.findMatchingProduct(ingredient.name);\n      \n      return {\n        product: product || this.createFallbackProduct(ingredient.name),\n        quantity: ingredient.quantity,\n        unit: ingredient.unit,\n        isOptional: false\n      };\n    });\n  }\n  \n  private createFallbackProduct(ingredientName: string): CoupangProduct {\n    // 매칭되지 않는 재료에 대한 기본 상품 생성\n    return {\n      id: `fallback-${ingredientName}`,\n      name: `${ingredientName} (쿠팡)`,\n      price: 3000, // 기본 가격\n      imageUrl: 'https://via.placeholder.com/200x200?text=' + encodeURIComponent(ingredientName),\n      coupangUrl: 'https://www.coupang.com/search?q=' + encodeURIComponent(ingredientName),\n      category: '식재료',\n      nutrition: { calories: 50, carb: 10, protein: 2, fat: 1, sodium: 100, sugar: 0 },\n      description: `${ingredientName} 상품`,\n      brand: '일반',\n      weight: '1개',\n      rating: 4.0,\n      reviewCount: 100,\n      isRocketDelivery: false\n    };\n  }\n}\n\n// 🎯 메인 변환기 클래스\nexport class MankaeRecipeProcessor {\n  private nutritionCalculator = new NutritionCalculator();\n  private goalClassifier = new GoalClassifier();\n  private productMatcher = new CoupangProductMatcher();\n  \n  // 재료 문자열 파싱 (실제 CSV 형식에 맞춘 완전 개선 버전)\n  private parseIngredients(ingredientText: string): Array<{name: string; quantity: number; unit: string}> {\n    const ingredients: Array<{name: string; quantity: number; unit: string}> = [];\n\n    console.log(`🧪 재료 파싱 시작: \"${ingredientText.substring(0, 100)}...\"`);\n\n    if (!ingredientText || ingredientText.trim() === '') {\n      console.log(`⚠️ 재료 텍스트가 비어있음`);\n      return ingredients;\n    }\n\n    // 실제 CSV 형식 처리: \"[재료] 떡국떡400g| 다진소고기100g| ...\"\n    const sections = ingredientText.split(/\\[재료\\]|\\[양념\\]|\\[소스\\]|\\[육수\\]|\\[간장양념\\]|\\[양념장\\]|\\[얼갈이데칠때\\]|\\[만두전골 육수\\]|\\[전골요리 양념장\\]/);\n\n    sections.forEach((section, sectionIndex) => {\n      if (!section.trim()) return;\n\n      console.log(`🔍 섹션 ${sectionIndex}: \"${section.substring(0, 50)}...\"`);\n\n      const items = section.split('|').filter(item => item.trim());\n      console.log(`📝 아이템 개수: ${items.length}`);\n\n      items.forEach((item, itemIndex) => {\n        const trimmed = item.trim();\n        if (!trimmed || trimmed === '약간' || trimmed.length < 2) return;\n\n        console.log(`🔍 아이템 ${itemIndex}: \"${trimmed}\"`);\n\n        let match = null;\n\n        // 🔥 실제 CSV 데이터 패턴에 완벽하게 맞춘 정규식들\n\n        // 1. \"돼지고기수육용삼겹살500g\" 형태 (공백 없는 긴 이름 + 숫자 + 한글단위)\n        match = trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);\n\n        // 2. \"멸치육수800ml\" 형태 (공백 없는 이름 + 숫자 + 영어단위)\n        if (!match) {\n          match = trimmed.match(/^(.+[가-힣])(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([a-zA-Z]+)$/);\n        }\n\n        // 3. \"돼지고기 수육용삼겹살500g\" 형태 (공백 포함 긴 이름 + 숫자 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)\\s+(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([가-힣]+)$/);\n        }\n\n        // 4. \"된장1.5큰술\" 형태 (소수점 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+(?:\\.\\d+)?)([가-힣]+)$/);\n        }\n\n        // 5. \"대파1/3대\" 형태 (분수 + 한글단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+\\/\\d+)([가-힣]+)$/);\n        }\n\n        // 6. \"참기름1T\" 형태 (영어 단위)\n        if (!match) {\n          match = trimmed.match(/^(.+?)(\\d+(?:\\/\\d+)?(?:\\.\\d+)?)([TtLl])$/);\n        }\n\n        // 7. \"소금\" 형태 (이름만, 수량 1로 설정)\n        if (!match && trimmed.length > 1 && !trimmed.includes('약간')) {\n          match = [trimmed, trimmed, '1', '개'];\n        }\n\n        if (match) {\n          const [, name, quantityStr, unit] = match;\n          let quantity = parseFloat(quantityStr);\n\n          // 분수 처리 (1/3 → 0.333)\n          if (quantityStr.includes('/')) {\n            const [numerator, denominator] = quantityStr.split('/').map(Number);\n            quantity = numerator / denominator;\n          }\n\n          const ingredient = {\n            name: name.trim(),\n            quantity,\n            unit: unit.trim()\n          };\n\n          ingredients.push(ingredient);\n          console.log(`✅ 재료 추가: ${ingredient.name} ${ingredient.quantity}${ingredient.unit}`);\n        } else {\n          console.log(`❌ 매칭 실패: \"${trimmed}\"`);\n\n          // 실패한 경우라도 유효한 재료명 추출 시도\n          // 숫자와 단위를 제외한 나머지를 재료명으로 간주\n          const nameOnlyMatch = trimmed.match(/^(.+?)(?:\\d|\\s*$)/);\n          if (nameOnlyMatch && nameOnlyMatch[1].trim().length > 1 &&\n              !trimmed.includes('약간') && !trimmed.includes('적당히')) {\n\n            const fallbackIngredient = {\n              name: nameOnlyMatch[1].trim(),\n              quantity: 1,\n              unit: '개'\n            };\n            ingredients.push(fallbackIngredient);\n            console.log(`🔄 폴백 재료 추가: ${fallbackIngredient.name} ${fallbackIngredient.quantity}${fallbackIngredient.unit}`);\n          }\n        }\n      });\n    });\n\n    console.log(`📋 최종 재료 개수: ${ingredients.length}`);\n    return ingredients;\n  }\n  \n  // 조리시간 변환\n  private parseTime(timeStr: string): number {\n    // null/undefined 체크 추가\n    if (!timeStr || typeof timeStr !== 'string') {\n      console.log('⚠️ 조리시간 정보가 없음, 기본값 30분 사용');\n      return 30; // 기본값 30분\n    }\n\n    if (timeStr.includes('시간')) {\n      const hours = parseInt(timeStr) || 1;\n      return hours * 60;\n    }\n\n    const minutes = parseInt(timeStr) || 15;\n    return minutes;\n  }\n\n  // 🧪 파싱 함수 테스트 (임시 디버깅용)\n  testParseIngredients(ingredientText: string): Array<{name: string; quantity: number; unit: string}> {\n    console.log('🧪 파싱 테스트 시작:', ingredientText);\n    return this.parseIngredients(ingredientText);\n  }\n\n  // 🔥 긴급 디버깅: 실제 CSV 데이터로 테스트\n  debugRealDataParsing() {\n    const testData = [\n      \"[재료] 떡국떡400g| 다진소고기100g| 멸치육수800ml| 대파1/3대| 계란2개| 참기름1T| 국간장1T\",\n      \"[재료] 돼지고기 수육용삼겹살500g| 된장1.5큰술| 술4큰술| 홍어무침| 무생채| 콩나물무침\",\n      \"[재료] 배추3장| 양파1/2개| 대파1대| 청양고추2개\"\n    ];\n\n    testData.forEach((data, index) => {\n      console.log(`\\n🧪 테스트 ${index + 1}: ${data}`);\n      const result = this.parseIngredients(data);\n      console.log(`📋 결과: ${result.length}개 재료 파싱됨`);\n      result.forEach((ing, i) => {\n        console.log(`   ${i + 1}. ${ing.name}: ${ing.quantity}${ing.unit}`);\n      });\n    });\n  }\n  \n  // 인분수 변환\n  private parseServings(servingStr: string): number {\n    if (!servingStr || typeof servingStr !== 'string') {\n      return 2; // 기본값 2인분\n    }\n    const match = servingStr.match(/(\\d+)/);\n    return match ? parseInt(match[1]) : 2;\n  }\n  \n  // 난이도 변환\n  private parseDifficulty(difficultyStr: string): 'easy' | 'medium' | 'hard' {\n    // null/undefined 체크 추가\n    if (!difficultyStr || typeof difficultyStr !== 'string') {\n      console.log('⚠️ 난이도 정보가 없음, 기본값 medium 사용');\n      return 'medium'; // 기본값 medium\n    }\n\n    if (difficultyStr.includes('초급') || difficultyStr.includes('아무나')) return 'easy';\n    if (difficultyStr.includes('중급')) return 'medium';\n    return 'hard';\n  }\n  \n  // 식사 타입 추론\n  private inferMealType(\n    title: string, \n    category: string, \n    mealPurpose: string\n  ): 'breakfast' | 'lunch' | 'dinner' | 'snack' {\n    // null/undefined 체크\n    const safeTitle = title || '';\n    const safeCategory = category || '';\n    const safeMealPurpose = mealPurpose || '';\n    \n    const titleLower = safeTitle.toLowerCase();\n    \n    if (titleLower.includes('아침') || safeMealPurpose === '아침대용') return 'breakfast';\n    if (titleLower.includes('점심')) return 'lunch';\n    if (titleLower.includes('저녁') || safeMealPurpose === '술안주') return 'dinner';\n    if (safeCategory === '양념/소스/잼' || safeMealPurpose === '간식') return 'snack';\n    \n    // 기본값: 요리 종류에 따라 결정\n    if (safeCategory === '국/탕') return 'dinner';\n    if (safeCategory === '밑반찬') return 'lunch';\n    \n    return 'lunch'; // 기본값\n  }\n  \n  // 품질 점수 계산\n  private calculateQualityScore(views: number, scraps: number): {\n    overall: number; taste: number; difficulty: number; nutrition: number; reviewCount: number;\n  } {\n    // 조회수 기반 점수 (최대 5.0)\n    const viewScore = Math.min((views / 200) * 5, 5.0);\n    \n    // 스크랩율 기반 점수 (최대 5.0)\n    const engagementRate = views > 0 ? (scraps / views) * 100 : 0;\n    const engagementScore = Math.min(engagementRate * 50, 5.0);\n    \n    // 전체 점수 (조회수 70% + 스크랩율 30%)\n    const overall = (viewScore * 0.7 + engagementScore * 0.3);\n    \n    return {\n      overall: Math.round(overall * 10) / 10,\n      taste: Math.min(overall + 0.2, 5.0),\n      difficulty: Math.min(overall + 0.1, 5.0),\n      nutrition: Math.min(overall - 0.1, 5.0),\n      reviewCount: views\n    };\n  }\n  \n  // 🎯 메인 변환 함수 (성능 최적화)\n  processRecipe(rawData: MankaeLRecipeRaw): Recipe {\n    // 🔥 긴급 디버깅: 모든 레시피 처리 과정 추적\n    console.log(`🔄 레시피 처리 시작: ${rawData.RCP_TTL}`);\n    console.log(`   - 원본 재료 데이터: \"${rawData.CKG_MTRL_CN?.substring(0, 100)}...\"`);\n\n    // 1단계: 재료 파싱\n    const ingredients = this.parseIngredients(rawData.CKG_MTRL_CN || '');\n    console.log(`   - 파싱된 재료 수: ${ingredients.length}개`);\n\n    if (ingredients.length > 0) {\n      console.log(`   - 샘플 재료: ${ingredients.slice(0, 3).map(i => `${i.name}(${i.quantity}${i.unit})`).join(', ')}`);\n    }\n\n    // 2단계: 영양소 계산 (캐시 활용)\n    const nutrition = this.nutritionCalculator.calculateNutrition(ingredients);\n    console.log(`   - 계산된 영양소: ${nutrition.calories}kcal, ${nutrition.protein}g 단백질`);\n\n    // 3단계: 목표 분류 (최적화된 알고리즘)\n    const goalFit = this.goalClassifier.classifyRecipeGoals(\n      ingredients,\n      rawData.CKG_MTH_ACTO_NM || '',\n      rawData.CKG_STA_ACTO_NM || '',\n      rawData.CKG_IPDC || '',\n      nutrition\n    );\n\n    console.log(`   - 분류된 목표: [${goalFit.join(', ')}]`);\n    console.log('---');\n\n    // 4단계: 품질 평가\n    const userRatings = this.calculateQualityScore(rawData.INQ_CNT || 0, rawData.SRAP_CNT || 0);\n\n    // 5단계: Recipe 객체 생성\n    const recipe: Recipe = {\n      id: `mankae-${rawData.RCP_SNO}`,\n      name: rawData.CKG_NM || '제목 없음',\n      description: rawData.CKG_IPDC || '설명 없음',\n      image: rawData.RCP_IMG_URL || `https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3`, // 실제 이미지 또는 기본 이미지\n      cookingTime: this.parseTime(rawData.CKG_TIME_NM || ''),\n      difficulty: this.parseDifficulty(rawData.CKG_DODF_NM || ''),\n      instructions: this.generateInstructions(rawData.CKG_MTH_ACTO_NM || '', ingredients),\n      tags: this.generateTags(rawData, nutrition),\n      mealType: this.inferMealType(rawData.RCP_TTL || '', rawData.CKG_KND_ACTO_NM || '', rawData.CKG_STA_ACTO_NM || ''),\n      goalFit,\n      \n      // 확장 정보 (선택적)\n      nutritionHighlights: {\n        mainBenefits: this.generateNutritionBenefits(ingredients, nutrition),\n        calorieContext: `${nutrition.calories}kcal로 균형잡힌 한 끼`,\n        dietaryInfo: this.generateDietaryInfo(ingredients, nutrition)\n      },\n      \n      userRatings,\n      \n      sourceInfo: {\n        chef: rawData.RGTR_NM || '알 수 없음',\n        source: 'chef_recipe',\n        verified: (rawData.INQ_CNT || 0) > 100, // 조회수 100 이상이면 검증된 것으로 간주\n        lastUpdated: (rawData.FIRST_REG_DT || '20240101').substring(0, 8) // YYYYMMDD 형식\n      }\n    };\n    \n    console.log(`✅ 변환 완료: ${recipe.name}`);\n    return recipe;\n  }\n  \n  // 조리법 생성\n  private generateInstructions(cookingMethod: string, ingredients: Array<{name: string; quantity: number; unit: string}>): string[] {\n    const baseInstructions: Record<string, string[]> = {\n      '부침': [\n        '팬에 기름을 두르고 중약불로 달궈주세요',\n        '재료를 올리고 노릇하게 부쳐주세요',\n        '뒤집어서 반대면도 익혀주세요',\n        '완성된 요리를 접시에 담아주세요'\n      ],\n      '볶음': [\n        '팬을 달구고 기름을 두르세요',\n        '재료를 넣고 센 불에서 빠르게 볶아주세요',\n        '양념을 넣고 골고루 섞어주세요',\n        '불을 끄고 접시에 담아 완성하세요'\n      ],\n      '찜': [\n        '재료를 깨끗이 손질하여 준비하세요',\n        '찜기에 물을 넣고 끓여주세요',\n        '재료를 찜기에 올리고 뚜껑을 덮어주세요',\n        '충분히 익으면 양념과 함께 완성하세요'\n      ],\n      '끓이기': [\n        '냄비에 물을 넣고 끓여주세요',\n        '재료를 넣고 중불에서 끓여주세요',\n        '간을 맞추고 더 끓여주세요',\n        '그릇에 담아 뜨겁게 완성하세요'\n      ]\n    };\n    \n    return baseInstructions[cookingMethod] || [\n      '재료를 준비하고 손질하세요',\n      '적절한 방법으로 조리하세요',\n      '간을 맞추고 완성하세요'\n    ];\n  }\n  \n  // 태그 생성\n  private generateTags(rawData: MankaeLRecipeRaw, nutrition: {calories: number; protein: number}): string[] {\n    const tags: string[] = [];\n    \n    // 조리법 기반 - null 체크\n    if (rawData.CKG_MTH_ACTO_NM) {\n      tags.push(rawData.CKG_MTH_ACTO_NM);\n    }\n    \n    // 영양 기반\n    if (nutrition.protein > 15) tags.push('고단백');\n    if (nutrition.calories < 200) tags.push('저칼로리');\n    \n    // 상황 기반 - null 체크\n    if (rawData.CKG_STA_ACTO_NM === '초스피드') tags.push('간편');\n    if (rawData.CKG_DODF_NM === '아무나') tags.push('초보자');\n    \n    // 시간 기반 - null 체크\n    if (rawData.CKG_TIME_NM && rawData.CKG_TIME_NM.includes('10분')) tags.push('10분완성');\n    if (rawData.CKG_TIME_NM && rawData.CKG_TIME_NM.includes('15분')) tags.push('15분완성');\n    \n    return tags;\n  }\n  \n  // 영양 혜택 생성\n  private generateNutritionBenefits(\n    ingredients: Array<{name: string}>, \n    nutrition: {protein: number; calories: number}\n  ): string[] {\n    const benefits: string[] = [];\n    \n    if (nutrition.protein > 15) {\n      benefits.push(`고단백질(${nutrition.protein}g)로 근육 건강에 도움`);\n    }\n    \n    ingredients.forEach(ing => {\n      if (ing.name === '계란') benefits.push('완전단백질과 비타민 공급');\n      if (ing.name === '배추') benefits.push('식이섬유와 비타민C 풍부');\n      if (ing.name === '아보카도') benefits.push('건강한 불포화지방산 함유');\n    });\n    \n    return benefits;\n  }\n  \n  // 식단 정보 생성\n  private generateDietaryInfo(\n    ingredients: Array<{name: string}>, \n    nutrition: {calories: number; protein: number}\n  ): ('글루텐프리' | '저탄수화물' | '고단백' | '저지방' | '비건' | '케토' | '저칼로리')[] {\n    const info: ('글루텐프리' | '저탄수화물' | '고단백' | '저지방' | '비건' | '케토' | '저칼로리')[] = [];\n    \n    if (nutrition.protein > 15) info.push('고단백');\n    if (nutrition.calories < 200) info.push('저칼로리');\n    \n    const hasAnimalProducts = ingredients.some(ing => \n      ['계란', '우삼겹', '훈제연어'].includes(ing.name)\n    );\n    if (!hasAnimalProducts) info.push('비건');\n    \n    return info;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
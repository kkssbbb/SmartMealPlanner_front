{"ast":null,"code":"var _OptimizedCSVProcessor;// 🚀 초고성능 CSV 프로세서 (스트리밍 + 워커 + 캐싱)\nexport class OptimizedCSVProcessor{constructor(){this.cache=new Map();this.CACHE_TTL=30*60*1000;// 30분\nthis.CHUNK_SIZE=1000;// 1000개씩 처리\nthis.isLoading=false;this.loadingPromise=null;}static getInstance(){if(!OptimizedCSVProcessor.instance){OptimizedCSVProcessor.instance=new OptimizedCSVProcessor();}return OptimizedCSVProcessor.instance;}// 🔥 스트리밍 기반 CSV 로딩\nasync loadCSVOptimized(){// 중복 로딩 방지\nif(this.isLoading&&this.loadingPromise){console.log('⏳ 이미 로딩 중... 기존 Promise 반환');return this.loadingPromise;}// 캐시 확인\nconst cached=this.getValidCache('main');if(cached){console.log('⚡ 캐시 히트! 즉시 반환');return cached.data;}this.isLoading=true;this.loadingPromise=this.performOptimizedLoad();try{const result=await this.loadingPromise;this.isLoading=false;return result;}catch(error){this.isLoading=false;this.loadingPromise=null;throw error;}}async performOptimizedLoad(){const startTime=performance.now();console.log('🚀 최적화된 CSV 로딩 시작...');try{var _response$body;// 1단계: 스트리밍 페치 (청크 단위)\nconst response=await fetch('/data/TB_RECIPE_SEARCH_241226.csv');console.log('📡 CSV 파일 응답:',response.status,response.ok);console.log(\"\\uD83D\\uDCCF Content-Length: \".concat(response.headers.get('content-length'),\" bytes\"));if(!response.ok){console.error('❌ CSV 파일 로드 실패:',response.status,response.statusText);console.error('💡 확인사항: public/data/ 폴더에 TB_RECIPE_SEARCH_241226.csv 파일이 있는지 확인하세요');throw new Error(\"HTTP \".concat(response.status,\" - CSV \\uD30C\\uC77C\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"));}const reader=(_response$body=response.body)===null||_response$body===void 0?void 0:_response$body.getReader();if(!reader)throw new Error('스트림 리더 생성 실패');// 2단계: 청크 단위 파싱\nlet csvText='';let processed=0;const decoder=new TextDecoder();while(true){const{done,value}=await reader.read();if(done)break;csvText+=decoder.decode(value,{stream:true});processed+=value.length;// 진행률 표시 (매 1MB마다)\nif(processed%(1024*1024)===0){console.log(\"\\uD83D\\uDCCA \\uB85C\\uB529 \\uC9C4\\uD589: \".concat((processed/(1024*1024)).toFixed(1),\"MB\"));}}// 3단계: 최적화된 파싱\nconst recipes=await this.parseCSVOptimized(csvText);// 4단계: 캐싱\nthis.setCache('main',recipes);const endTime=performance.now();const loadTime=Math.round(endTime-startTime);console.log(\"\\u2705 \\uCD5C\\uC801\\uD654 \\uB85C\\uB529 \\uC644\\uB8CC: \".concat(recipes.length,\"\\uAC1C (\").concat(loadTime,\"ms)\"));console.log(\"\\uD83D\\uDCC8 \\uC131\\uB2A5 \\uD5A5\\uC0C1: \\uD3C9\\uADE0 \".concat(Math.round(recipes.length/loadTime*1000),\"\\uAC1C/\\uCD08\"));return recipes;}catch(error){console.error('❌ 최적화 로딩 실패:',error);throw error;}}// 🔥 최적화된 CSV 파싱 (정규식 최소화 + 배치 처리)\nasync parseCSVOptimized(csvText){console.log('⚡ 고성능 파싱 시작...');const lines=csvText.split('\\n');const headerLine=lines[0];if(!headerLine){throw new Error('CSV 헤더가 없습니다');}// 헤더 파싱 (한 번만)\nconst headers=this.parseCSVLine(headerLine);const recipes=[];// 배치 처리로 성능 최적화\nfor(let i=1;i<lines.length;i+=this.CHUNK_SIZE){const endIndex=Math.min(i+this.CHUNK_SIZE,lines.length);const batch=lines.slice(i,endIndex);// 배치 단위 처리\nfor(const line of batch){if(!line.trim())continue;try{const values=this.parseCSVLine(line);if(values.length<headers.length)continue;const recipe=this.createRecipeObject(headers,values);if(recipe&&this.isValidRecipe(recipe)){recipes.push(recipe);}}catch(error){// 개별 라인 파싱 실패는 스킵\ncontinue;}}// UI 블로킹 방지 (매 청크마다 양보)\nif(i%(this.CHUNK_SIZE*5)===0){await new Promise(resolve=>setTimeout(resolve,0));console.log(\"\\u26A1 \\uD30C\\uC2F1 \\uC9C4\\uD589: \".concat(Math.round(i/lines.length*100),\"%\"));}}console.log(\"\\u2705 \\uD30C\\uC2F1 \\uC644\\uB8CC: \".concat(recipes.length,\"/\").concat(lines.length-1,\"\\uAC1C \\uC131\\uACF5\"));// 🔍 디버깅: 첫 3개 레시피 샘플 출력\nif(recipes.length>0){console.log('📋 파싱된 레시피 샘플:');recipes.slice(0,3).forEach((recipe,index)=>{var _recipe$CKG_MTRL_CN;console.log(\"  \".concat(index+1,\". \").concat(recipe.RCP_TTL||recipe.CKG_NM));console.log(\"     - \\uC7AC\\uB8CC: \".concat((_recipe$CKG_MTRL_CN=recipe.CKG_MTRL_CN)===null||_recipe$CKG_MTRL_CN===void 0?void 0:_recipe$CKG_MTRL_CN.substring(0,100),\"...\"));console.log(\"     - \\uC870\\uB9AC\\uBC95: \".concat(recipe.CKG_MTH_ACTO_NM));console.log(\"     - \\uC0C1\\uD669: \".concat(recipe.CKG_STA_ACTO_NM));});}return recipes;}// 🎯 목표별 고성능 레시피 조회\nasync getRecipesByGoal(goal){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:200;const cacheKey=\"goal_\".concat(goal,\"_\").concat(limit);// 캐시 확인\nconst cached=this.getValidCache(cacheKey);if(cached){console.log(\"\\u26A1 \".concat(goal,\" \\uCE90\\uC2DC \\uD788\\uD2B8!\"));return cached.data;}console.log(\"\\uD83C\\uDFAF \".concat(goal,\" \\uACE0\\uC131\\uB2A5 \\uAC80\\uC0C9 \\uC2DC\\uC791...\"));const startTime=performance.now();// 전체 데이터 로드\nconst allRecipes=await this.loadCSVOptimized();// 🔥 목표별 키워드 대폭 확대 (실제 데이터에 맞춰서)\nconst goalKeywords={weight_loss:['다이어트','저칼로리','살빼기','체중감량','샐러드','야채','채소','저지방','헬시','칼로리','무침','삶기','찌기','국','탕','배추','브로콜리','양배추','콩나물','시금치','무','당근','버섯','양파','대파','쪽파','깻잎','상추','쌈채소','청경채','부추','미나리','김','미역','파래','김치','콩','두부','연두부','순두부','된장','간장','참기름','들기름','올리브오일','샐러드드레싱','요거트','과일','사과','바나나','오렌지','키위','레몬','토마토','오이','파프리카','피망','가지','호박','감자','고구마','옥수수','완두콩','병아리콩','렌틸콩','현미','귀리','보리','퀴노아','통곡물','통밀빵','현미밥','잡곡밥','닭가슴살','생선','연어','참치','고등어','갈치','멸치','김','미역','다시마','조개','새우','문어','오징어','닭','오리고기','소고기','돼지고기','양고기','계란','달걀','메추리알','삶은계란','찐계란','계란찜','스크램블','요구르트','치즈','저지방치즈','코티지치즈','리코타치즈','두유','아몬드','호두','잣','참깨','들깨','해바라기씨','슬림','라이트','제로','무가당','무설탕','무염','저염','저나트륨','저콜레스테롤','저트랜스지방','무트랜스지방','디톡스','클린','그린','비건','락토오보','락토','오보','페스코','플렉시테리언','세미베지테리언'],muscle_gain:['단백질','근육','고단백','닭가슴살','소고기','계란','프로틴','근력','운동','닭','돼지','새우','연어','참치','두부','굽기','볶기','구이','튀기기','찌기','삶기','고기','육류','생선','해산물','유제품','치즈','요거트','우유','단백질쉐이크','프로틴파우더','크레아틴','글루타민','BCAA','아미노산','벌크','벌킹','머슬','스트렝스','웨이트','피트니스','바디빌딩','보디빌딩','헬스','짐','운동','PT','크로스핏','요가','필라테스'],maintenance:['건강','균형','일상','집밥','영양','웰빙','가정식','보양','만들기','레시피','요리','밥','국','찌개','전골','탕','찌개','볶음','구이','튀김','무침','비빔밥','덮밥','볶음밥','김치찌개','된장찌개','순두부찌개','부대찌개','돼지고기','소고기','닭고기','생선','채소','과일','쌀','밀가루','빵','파스타','국수','면','떡','죽','스프','수프','샐러드','샌드위치']};const keywords=goalKeywords[goal];console.log(\"\\uD83D\\uDD0D \".concat(goal,\" \\uD0A4\\uC6CC\\uB4DC \\uAC1C\\uC218: \").concat(keywords.length,\"\\uAC1C\"));// 고성능 필터링 (단일 패스)\nconst filteredRecipes=[];for(const recipe of allRecipes){// 🔍 각 레시피별 상세 디버깅 (처음 5개만)\nif(filteredRecipes.length<5){var _recipe$CKG_IPDC,_recipe$CKG_MTRL_CN2;console.log(\"\\n\\uD83E\\uDDEA \\uB808\\uC2DC\\uD53C \\uAC80\\uC0AC: \\\"\".concat(recipe.RCP_TTL||recipe.CKG_NM,\"\\\"\"));console.log(\"   - \\uC81C\\uBAA9: \".concat(recipe.RCP_TTL));console.log(\"   - \\uC694\\uB9AC\\uBA85: \".concat(recipe.CKG_NM));console.log(\"   - \\uC18C\\uAC1C: \".concat((_recipe$CKG_IPDC=recipe.CKG_IPDC)===null||_recipe$CKG_IPDC===void 0?void 0:_recipe$CKG_IPDC.substring(0,50),\"...\"));console.log(\"   - \\uC7AC\\uB8CC: \".concat((_recipe$CKG_MTRL_CN2=recipe.CKG_MTRL_CN)===null||_recipe$CKG_MTRL_CN2===void 0?void 0:_recipe$CKG_MTRL_CN2.substring(0,50),\"...\"));console.log(\"   - \\uC8FC\\uC7AC\\uB8CC: \".concat(recipe.CKG_MTRL_ACTO_NM));console.log(\"   - \\uC0C1\\uD669: \".concat(recipe.CKG_STA_ACTO_NM));}// 빠른 키워드 매칭 (정규식 대신 includes 사용) - 재료 필드 추가!\nconst hasKeyword=keywords.some(keyword=>{var _recipe$RCP_TTL,_recipe$CKG_NM,_recipe$CKG_IPDC2,_recipe$CKG_STA_ACTO_,_recipe$CKG_MTRL_ACTO,_recipe$CKG_MTRL_CN3;return((_recipe$RCP_TTL=recipe.RCP_TTL)===null||_recipe$RCP_TTL===void 0?void 0:_recipe$RCP_TTL.includes(keyword))||((_recipe$CKG_NM=recipe.CKG_NM)===null||_recipe$CKG_NM===void 0?void 0:_recipe$CKG_NM.includes(keyword))||((_recipe$CKG_IPDC2=recipe.CKG_IPDC)===null||_recipe$CKG_IPDC2===void 0?void 0:_recipe$CKG_IPDC2.includes(keyword))||((_recipe$CKG_STA_ACTO_=recipe.CKG_STA_ACTO_NM)===null||_recipe$CKG_STA_ACTO_===void 0?void 0:_recipe$CKG_STA_ACTO_.includes(keyword))||((_recipe$CKG_MTRL_ACTO=recipe.CKG_MTRL_ACTO_NM)===null||_recipe$CKG_MTRL_ACTO===void 0?void 0:_recipe$CKG_MTRL_ACTO.includes(keyword))||((_recipe$CKG_MTRL_CN3=recipe.CKG_MTRL_CN)===null||_recipe$CKG_MTRL_CN3===void 0?void 0:_recipe$CKG_MTRL_CN3.includes(keyword));}// 🔥 재료 필드도 검색!\n);if(hasKeyword){filteredRecipes.push(recipe);// 🔥 상세 디버깅: 키워드 매칭 세부 정보 출력\nif(goal==='weight_loss'){const matchedKeywords=keywords.filter(keyword=>{var _recipe$RCP_TTL2,_recipe$CKG_NM2,_recipe$CKG_IPDC3,_recipe$CKG_STA_ACTO_2,_recipe$CKG_MTRL_ACTO2,_recipe$CKG_MTRL_CN4;return((_recipe$RCP_TTL2=recipe.RCP_TTL)===null||_recipe$RCP_TTL2===void 0?void 0:_recipe$RCP_TTL2.includes(keyword))||((_recipe$CKG_NM2=recipe.CKG_NM)===null||_recipe$CKG_NM2===void 0?void 0:_recipe$CKG_NM2.includes(keyword))||((_recipe$CKG_IPDC3=recipe.CKG_IPDC)===null||_recipe$CKG_IPDC3===void 0?void 0:_recipe$CKG_IPDC3.includes(keyword))||((_recipe$CKG_STA_ACTO_2=recipe.CKG_STA_ACTO_NM)===null||_recipe$CKG_STA_ACTO_2===void 0?void 0:_recipe$CKG_STA_ACTO_2.includes(keyword))||((_recipe$CKG_MTRL_ACTO2=recipe.CKG_MTRL_ACTO_NM)===null||_recipe$CKG_MTRL_ACTO2===void 0?void 0:_recipe$CKG_MTRL_ACTO2.includes(keyword))||((_recipe$CKG_MTRL_CN4=recipe.CKG_MTRL_CN)===null||_recipe$CKG_MTRL_CN4===void 0?void 0:_recipe$CKG_MTRL_CN4.includes(keyword));});if(matchedKeywords.length>0){var _recipe$CKG_MTRL_CN5;console.log(\"\\uD83D\\uDD0D \".concat(goal,\" \\uD0A4\\uC6CC\\uB4DC \\uB9E4\\uCE6D: \\\"\").concat(recipe.RCP_TTL,\"\\\"\"));console.log(\"   - \\uB9E4\\uCE6D \\uD0A4\\uC6CC\\uB4DC: [\".concat(matchedKeywords.join(', '),\"]\"));console.log(\"   - \\uC7AC\\uB8CC \\uC0D8\\uD50C: \".concat((_recipe$CKG_MTRL_CN5=recipe.CKG_MTRL_CN)===null||_recipe$CKG_MTRL_CN5===void 0?void 0:_recipe$CKG_MTRL_CN5.substring(0,100),\"...\"));console.log(\"   - \\uCD1D \\uB9E4\\uCE6D \\uB808\\uC2DC\\uD53C: \".concat(filteredRecipes.length,\"\\uAC1C\"));}}}// 조기 종료 (충분한 결과) - 더 많은 레시피 확보를 위해 완화\nif(filteredRecipes.length>=limit*3){console.log(\"\\uD83C\\uDFAF \\uCDA9\\uBD84\\uD55C \\uB808\\uC2DC\\uD53C \\uD655\\uBCF4: \".concat(filteredRecipes.length,\"\\uAC1C \\u2192 \\uC870\\uAE30 \\uC885\\uB8CC\"));break;}}// 품질 기반 정렬 (조회수 + 스크랩수)\nconst sortedRecipes=filteredRecipes.sort((a,b)=>{const scoreA=(a.INQ_CNT||0)*0.7+(a.SRAP_CNT||0)*0.3;const scoreB=(b.INQ_CNT||0)*0.7+(b.SRAP_CNT||0)*0.3;return scoreB-scoreA;}).slice(0,limit);// 결과 캐싱\nthis.setCache(cacheKey,sortedRecipes);const endTime=performance.now();console.log(\"\\u2705 \".concat(goal,\" \\uACE0\\uC131\\uB2A5 \\uAC80\\uC0C9 \\uC644\\uB8CC: \").concat(sortedRecipes.length,\"\\uAC1C (\").concat(Math.round(endTime-startTime),\"ms)\"));console.log(\"\\uD83D\\uDD0D \".concat(goal,\" \\uD544\\uD130\\uB9C1 \\uACB0\\uACFC: \\uC804\\uCCB4 \").concat(allRecipes.length,\"\\uAC1C \\uC911 \").concat(filteredRecipes.length,\"\\uAC1C \\uD0A4\\uC6CC\\uB4DC \\uB9E4\\uCE6D, \\uCD5C\\uC885 \").concat(sortedRecipes.length,\"\\uAC1C \\uC120\\uD0DD\"));return sortedRecipes;}// 🔧 유틸리티 메소드들\nparseCSVLine(line){const result=[];let current='';let inQuotes=false;for(let i=0;i<line.length;i++){const char=line[i];if(char==='\"'){inQuotes=!inQuotes;}else if(char===','&&!inQuotes){result.push(current.trim());current='';}else{current+=char;}}result.push(current.trim());return result;}createRecipeObject(headers,values){try{const recipe={};// 필수 필드만 매핑 (성능 최적화)\nconst essentialFields=['RCP_SNO','RCP_TTL','CKG_NM','RGTR_NM','INQ_CNT','SRAP_CNT','CKG_MTH_ACTO_NM','CKG_STA_ACTO_NM','CKG_IPDC','CKG_MTRL_CN'];for(let i=0;i<headers.length&&i<values.length;i++){const header=headers[i].trim();if(essentialFields.includes(header)){recipe[header]=values[i];}}// 숫자 필드 변환\nrecipe.INQ_CNT=parseInt(recipe.INQ_CNT)||0;recipe.SRAP_CNT=parseInt(recipe.SRAP_CNT)||0;recipe.RCMM_CNT=parseInt(recipe.RCMM_CNT)||0;return recipe;}catch(error){return null;}}isValidRecipe(recipe){return!!(recipe.RCP_SNO&&recipe.RCP_TTL&&recipe.CKG_NM);}// 캐시 관리\ngetValidCache(key){const cached=this.cache.get(key);if(!cached)return null;if(Date.now()-cached.timestamp>this.CACHE_TTL){this.cache.delete(key);return null;}return cached;}setCache(key,data){this.cache.set(key,{data,timestamp:Date.now(),version:'1.0'});}// 🧹 메모리 정리\nclearCache(){this.cache.clear();console.log('🧹 캐시 클리어 완료');}// 📊 성능 통계\ngetCacheStats(){return{size:this.cache.size,keys:Array.from(this.cache.keys())};}}// 싱글톤 인스턴스\n_OptimizedCSVProcessor=OptimizedCSVProcessor;OptimizedCSVProcessor.instance=void 0;export const optimizedCSVProcessor=OptimizedCSVProcessor.getInstance();","map":{"version":3,"names":["OptimizedCSVProcessor","constructor","cache","Map","CACHE_TTL","CHUNK_SIZE","isLoading","loadingPromise","getInstance","instance","loadCSVOptimized","console","log","cached","getValidCache","data","performOptimizedLoad","result","error","startTime","performance","now","_response$body","response","fetch","status","ok","concat","headers","get","statusText","Error","reader","body","getReader","csvText","processed","decoder","TextDecoder","done","value","read","decode","stream","length","toFixed","recipes","parseCSVOptimized","setCache","endTime","loadTime","Math","round","lines","split","headerLine","parseCSVLine","i","endIndex","min","batch","slice","line","trim","values","recipe","createRecipeObject","isValidRecipe","push","Promise","resolve","setTimeout","forEach","index","_recipe$CKG_MTRL_CN","RCP_TTL","CKG_NM","CKG_MTRL_CN","substring","CKG_MTH_ACTO_NM","CKG_STA_ACTO_NM","getRecipesByGoal","goal","limit","arguments","undefined","cacheKey","allRecipes","goalKeywords","weight_loss","muscle_gain","maintenance","keywords","filteredRecipes","_recipe$CKG_IPDC","_recipe$CKG_MTRL_CN2","CKG_IPDC","CKG_MTRL_ACTO_NM","hasKeyword","some","keyword","_recipe$RCP_TTL","_recipe$CKG_NM","_recipe$CKG_IPDC2","_recipe$CKG_STA_ACTO_","_recipe$CKG_MTRL_ACTO","_recipe$CKG_MTRL_CN3","includes","matchedKeywords","filter","_recipe$RCP_TTL2","_recipe$CKG_NM2","_recipe$CKG_IPDC3","_recipe$CKG_STA_ACTO_2","_recipe$CKG_MTRL_ACTO2","_recipe$CKG_MTRL_CN4","_recipe$CKG_MTRL_CN5","join","sortedRecipes","sort","a","b","scoreA","INQ_CNT","SRAP_CNT","scoreB","current","inQuotes","char","essentialFields","header","parseInt","RCMM_CNT","RCP_SNO","key","Date","timestamp","delete","set","version","clearCache","clear","getCacheStats","size","keys","Array","from","_OptimizedCSVProcessor","optimizedCSVProcessor"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/utils/optimizedCSVProcessor.ts"],"sourcesContent":["// 🚀 초고성능 CSV 프로세서 (스트리밍 + 워커 + 캐싱)\nimport { MankaeLRecipeRaw } from './recipeDataProcessor';\n\ninterface ProcessedCache {\n  data: MankaeLRecipeRaw[];\n  timestamp: number;\n  version: string;\n}\n\nexport class OptimizedCSVProcessor {\n  private static instance: OptimizedCSVProcessor;\n  private cache = new Map<string, ProcessedCache>();\n  private readonly CACHE_TTL = 30 * 60 * 1000; // 30분\n  private readonly CHUNK_SIZE = 1000; // 1000개씩 처리\n  private isLoading = false;\n  private loadingPromise: Promise<MankaeLRecipeRaw[]> | null = null;\n\n  private constructor() {}\n\n  static getInstance(): OptimizedCSVProcessor {\n    if (!OptimizedCSVProcessor.instance) {\n      OptimizedCSVProcessor.instance = new OptimizedCSVProcessor();\n    }\n    return OptimizedCSVProcessor.instance;\n  }\n\n  // 🔥 스트리밍 기반 CSV 로딩\n  async loadCSVOptimized(): Promise<MankaeLRecipeRaw[]> {\n    // 중복 로딩 방지\n    if (this.isLoading && this.loadingPromise) {\n      console.log('⏳ 이미 로딩 중... 기존 Promise 반환');\n      return this.loadingPromise;\n    }\n\n    // 캐시 확인\n    const cached = this.getValidCache('main');\n    if (cached) {\n      console.log('⚡ 캐시 히트! 즉시 반환');\n      return cached.data;\n    }\n\n    this.isLoading = true;\n    this.loadingPromise = this.performOptimizedLoad();\n    \n    try {\n      const result = await this.loadingPromise;\n      this.isLoading = false;\n      return result;\n    } catch (error) {\n      this.isLoading = false;\n      this.loadingPromise = null;\n      throw error;\n    }\n  }\n\n  private async performOptimizedLoad(): Promise<MankaeLRecipeRaw[]> {\n    const startTime = performance.now();\n    console.log('🚀 최적화된 CSV 로딩 시작...');\n\n    try {\n      // 1단계: 스트리밍 페치 (청크 단위)\n      const response = await fetch('/data/TB_RECIPE_SEARCH_241226.csv');\n      console.log('📡 CSV 파일 응답:', response.status, response.ok);\n      console.log(`📏 Content-Length: ${response.headers.get('content-length')} bytes`);\n      if (!response.ok) {\n        console.error('❌ CSV 파일 로드 실패:', response.status, response.statusText);\n        console.error('💡 확인사항: public/data/ 폴더에 TB_RECIPE_SEARCH_241226.csv 파일이 있는지 확인하세요');\n        throw new Error(`HTTP ${response.status} - CSV 파일을 찾을 수 없습니다`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) throw new Error('스트림 리더 생성 실패');\n\n      // 2단계: 청크 단위 파싱\n      let csvText = '';\n      let processed = 0;\n      \n      const decoder = new TextDecoder();\n      \n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        \n        csvText += decoder.decode(value, { stream: true });\n        processed += value.length;\n        \n        // 진행률 표시 (매 1MB마다)\n        if (processed % (1024 * 1024) === 0) {\n          console.log(`📊 로딩 진행: ${(processed / (1024 * 1024)).toFixed(1)}MB`);\n        }\n      }\n\n      // 3단계: 최적화된 파싱\n      const recipes = await this.parseCSVOptimized(csvText);\n      \n      // 4단계: 캐싱\n      this.setCache('main', recipes);\n      \n      const endTime = performance.now();\n      const loadTime = Math.round(endTime - startTime);\n      \n      console.log(`✅ 최적화 로딩 완료: ${recipes.length}개 (${loadTime}ms)`);\n      console.log(`📈 성능 향상: 평균 ${Math.round(recipes.length / loadTime * 1000)}개/초`);\n      \n      return recipes;\n\n    } catch (error) {\n      console.error('❌ 최적화 로딩 실패:', error);\n      throw error;\n    }\n  }\n\n  // 🔥 최적화된 CSV 파싱 (정규식 최소화 + 배치 처리)\n  private async parseCSVOptimized(csvText: string): Promise<MankaeLRecipeRaw[]> {\n    console.log('⚡ 고성능 파싱 시작...');\n    \n    const lines = csvText.split('\\n');\n    const headerLine = lines[0];\n    \n    if (!headerLine) {\n      throw new Error('CSV 헤더가 없습니다');\n    }\n\n    // 헤더 파싱 (한 번만)\n    const headers = this.parseCSVLine(headerLine);\n    const recipes: MankaeLRecipeRaw[] = [];\n    \n    // 배치 처리로 성능 최적화\n    for (let i = 1; i < lines.length; i += this.CHUNK_SIZE) {\n      const endIndex = Math.min(i + this.CHUNK_SIZE, lines.length);\n      const batch = lines.slice(i, endIndex);\n      \n      // 배치 단위 처리\n      for (const line of batch) {\n        if (!line.trim()) continue;\n        \n        try {\n          const values = this.parseCSVLine(line);\n          if (values.length < headers.length) continue;\n          \n          const recipe = this.createRecipeObject(headers, values);\n          if (recipe && this.isValidRecipe(recipe)) {\n            recipes.push(recipe);\n          }\n        } catch (error) {\n          // 개별 라인 파싱 실패는 스킵\n          continue;\n        }\n      }\n      \n      // UI 블로킹 방지 (매 청크마다 양보)\n      if (i % (this.CHUNK_SIZE * 5) === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n        console.log(`⚡ 파싱 진행: ${Math.round(i / lines.length * 100)}%`);\n      }\n    }\n    \n          console.log(`✅ 파싱 완료: ${recipes.length}/${lines.length - 1}개 성공`);\n    \n    // 🔍 디버깅: 첫 3개 레시피 샘플 출력\n    if (recipes.length > 0) {\n      console.log('📋 파싱된 레시피 샘플:');\n      recipes.slice(0, 3).forEach((recipe, index) => {\n        console.log(`  ${index + 1}. ${recipe.RCP_TTL || recipe.CKG_NM}`);\n        console.log(`     - 재료: ${recipe.CKG_MTRL_CN?.substring(0, 100)}...`);\n        console.log(`     - 조리법: ${recipe.CKG_MTH_ACTO_NM}`);\n        console.log(`     - 상황: ${recipe.CKG_STA_ACTO_NM}`);\n      });\n    }\n    \n    return recipes;\n  }\n\n  // 🎯 목표별 고성능 레시피 조회\n  async getRecipesByGoal(goal: 'weight_loss' | 'muscle_gain' | 'maintenance', limit: number = 200): Promise<MankaeLRecipeRaw[]> {\n    const cacheKey = `goal_${goal}_${limit}`;\n    \n    // 캐시 확인\n    const cached = this.getValidCache(cacheKey);\n    if (cached) {\n      console.log(`⚡ ${goal} 캐시 히트!`);\n      return cached.data;\n    }\n\n    console.log(`🎯 ${goal} 고성능 검색 시작...`);\n    const startTime = performance.now();\n\n    // 전체 데이터 로드\n    const allRecipes = await this.loadCSVOptimized();\n    \n    // 🔥 목표별 키워드 대폭 확대 (실제 데이터에 맞춰서)\n    const goalKeywords = {\n      weight_loss: [\n        '다이어트', '저칼로리', '살빼기', '체중감량', '샐러드', '야채', '채소', '저지방', '헬시', '칼로리', '무침', '삶기', '찌기', '국', '탕',\n        '배추', '브로콜리', '양배추', '콩나물', '시금치', '무', '당근', '버섯', '양파', '대파', '쪽파', '깻잎', '상추', '쌈채소', '청경채',\n        '부추', '미나리', '김', '미역', '파래', '김치', '콩', '두부', '연두부', '순두부', '된장', '간장', '참기름', '들기름', '올리브오일',\n        '샐러드드레싱', '요거트', '과일', '사과', '바나나', '오렌지', '키위', '레몬', '토마토', '오이', '파프리카', '피망', '가지', '호박',\n        '감자', '고구마', '옥수수', '완두콩', '병아리콩', '렌틸콩', '현미', '귀리', '보리', '퀴노아', '통곡물', '통밀빵', '현미밥', '잡곡밥',\n        '닭가슴살', '생선', '연어', '참치', '고등어', '갈치', '멸치', '김', '미역', '다시마', '조개', '새우', '문어', '오징어',\n        '닭', '오리고기', '소고기', '돼지고기', '양고기', '계란', '달걀', '메추리알', '삶은계란', '찐계란', '계란찜', '스크램블',\n        '요구르트', '치즈', '저지방치즈', '코티지치즈', '리코타치즈', '두유', '아몬드', '호두', '잣', '참깨', '들깨', '해바라기씨',\n        '슬림', '라이트', '제로', '무가당', '무설탕', '무염', '저염', '저나트륨', '저콜레스테롤', '저트랜스지방', '무트랜스지방',\n        '디톡스', '클린', '그린', '비건', '락토오보', '락토', '오보', '페스코', '플렉시테리언', '세미베지테리언'\n      ],\n      muscle_gain: ['단백질', '근육', '고단백', '닭가슴살', '소고기', '계란', '프로틴', '근력', '운동', '닭', '돼지', '새우', '연어', '참치', '두부', '굽기', '볶기', '구이', '튀기기', '찌기', '삶기', '고기', '육류', '생선', '해산물', '유제품', '치즈', '요거트', '우유', '단백질쉐이크', '프로틴파우더', '크레아틴', '글루타민', 'BCAA', '아미노산', '벌크', '벌킹', '머슬', '스트렝스', '웨이트', '피트니스', '바디빌딩', '보디빌딩', '헬스', '짐', '운동', 'PT', '크로스핏', '요가', '필라테스'],\n      maintenance: ['건강', '균형', '일상', '집밥', '영양', '웰빙', '가정식', '보양', '만들기', '레시피', '요리', '밥', '국', '찌개', '전골', '탕', '찌개', '볶음', '구이', '튀김', '무침', '비빔밥', '덮밥', '볶음밥', '김치찌개', '된장찌개', '순두부찌개', '부대찌개', '돼지고기', '소고기', '닭고기', '생선', '채소', '과일', '쌀', '밀가루', '빵', '파스타', '국수', '면', '떡', '죽', '스프', '수프', '샐러드', '샌드위치']\n    };\n\n    const keywords = goalKeywords[goal];\n    console.log(`🔍 ${goal} 키워드 개수: ${keywords.length}개`);\n    \n    // 고성능 필터링 (단일 패스)\n    const filteredRecipes: MankaeLRecipeRaw[] = [];\n    \n    for (const recipe of allRecipes) {\n      // 🔍 각 레시피별 상세 디버깅 (처음 5개만)\n      if (filteredRecipes.length < 5) {\n        console.log(`\\n🧪 레시피 검사: \"${recipe.RCP_TTL || recipe.CKG_NM}\"`);\n        console.log(`   - 제목: ${recipe.RCP_TTL}`);\n        console.log(`   - 요리명: ${recipe.CKG_NM}`);\n        console.log(`   - 소개: ${recipe.CKG_IPDC?.substring(0, 50)}...`);\n        console.log(`   - 재료: ${recipe.CKG_MTRL_CN?.substring(0, 50)}...`);\n        console.log(`   - 주재료: ${recipe.CKG_MTRL_ACTO_NM}`);\n        console.log(`   - 상황: ${recipe.CKG_STA_ACTO_NM}`);\n      }\n      \n      // 빠른 키워드 매칭 (정규식 대신 includes 사용) - 재료 필드 추가!\n      const hasKeyword = keywords.some(keyword =>\n        recipe.RCP_TTL?.includes(keyword) ||\n        recipe.CKG_NM?.includes(keyword) ||\n        recipe.CKG_IPDC?.includes(keyword) ||\n        recipe.CKG_STA_ACTO_NM?.includes(keyword) ||\n        recipe.CKG_MTRL_ACTO_NM?.includes(keyword) ||\n        recipe.CKG_MTRL_CN?.includes(keyword)  // 🔥 재료 필드도 검색!\n      );\n      \n      if (hasKeyword) {\n        filteredRecipes.push(recipe);\n        \n        // 🔥 상세 디버깅: 키워드 매칭 세부 정보 출력\n        if (goal === 'weight_loss') {\n          const matchedKeywords = keywords.filter(keyword =>\n            recipe.RCP_TTL?.includes(keyword) ||\n            recipe.CKG_NM?.includes(keyword) ||\n            recipe.CKG_IPDC?.includes(keyword) ||\n            recipe.CKG_STA_ACTO_NM?.includes(keyword) ||\n            recipe.CKG_MTRL_ACTO_NM?.includes(keyword) ||\n            recipe.CKG_MTRL_CN?.includes(keyword)\n          );\n\n          if (matchedKeywords.length > 0) {\n            console.log(`🔍 ${goal} 키워드 매칭: \"${recipe.RCP_TTL}\"`);\n            console.log(`   - 매칭 키워드: [${matchedKeywords.join(', ')}]`);\n            console.log(`   - 재료 샘플: ${recipe.CKG_MTRL_CN?.substring(0, 100)}...`);\n            console.log(`   - 총 매칭 레시피: ${filteredRecipes.length}개`);\n          }\n        }\n      }\n      \n      // 조기 종료 (충분한 결과) - 더 많은 레시피 확보를 위해 완화\n      if (filteredRecipes.length >= limit * 3) {\n        console.log(`🎯 충분한 레시피 확보: ${filteredRecipes.length}개 → 조기 종료`);\n        break;\n      }\n    }\n\n    // 품질 기반 정렬 (조회수 + 스크랩수)\n    const sortedRecipes = filteredRecipes\n      .sort((a, b) => {\n        const scoreA = (a.INQ_CNT || 0) * 0.7 + (a.SRAP_CNT || 0) * 0.3;\n        const scoreB = (b.INQ_CNT || 0) * 0.7 + (b.SRAP_CNT || 0) * 0.3;\n        return scoreB - scoreA;\n      })\n      .slice(0, limit);\n\n    // 결과 캐싱\n    this.setCache(cacheKey, sortedRecipes);\n    \n    const endTime = performance.now();\n    console.log(`✅ ${goal} 고성능 검색 완료: ${sortedRecipes.length}개 (${Math.round(endTime - startTime)}ms)`);\n    console.log(`🔍 ${goal} 필터링 결과: 전체 ${allRecipes.length}개 중 ${filteredRecipes.length}개 키워드 매칭, 최종 ${sortedRecipes.length}개 선택`);\n    \n    return sortedRecipes;\n  }\n\n  // 🔧 유틸리티 메소드들\n  private parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    result.push(current.trim());\n    return result;\n  }\n\n  private createRecipeObject(headers: string[], values: string[]): MankaeLRecipeRaw | null {\n    try {\n      const recipe: any = {};\n      \n      // 필수 필드만 매핑 (성능 최적화)\n      const essentialFields = [\n        'RCP_SNO', 'RCP_TTL', 'CKG_NM', 'RGTR_NM', \n        'INQ_CNT', 'SRAP_CNT', 'CKG_MTH_ACTO_NM', \n        'CKG_STA_ACTO_NM', 'CKG_IPDC', 'CKG_MTRL_CN'\n      ];\n      \n      for (let i = 0; i < headers.length && i < values.length; i++) {\n        const header = headers[i].trim();\n        if (essentialFields.includes(header)) {\n          recipe[header] = values[i];\n        }\n      }\n      \n      // 숫자 필드 변환\n      recipe.INQ_CNT = parseInt(recipe.INQ_CNT) || 0;\n      recipe.SRAP_CNT = parseInt(recipe.SRAP_CNT) || 0;\n      recipe.RCMM_CNT = parseInt(recipe.RCMM_CNT) || 0;\n      \n      return recipe as MankaeLRecipeRaw;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private isValidRecipe(recipe: MankaeLRecipeRaw): boolean {\n    return !!(recipe.RCP_SNO && recipe.RCP_TTL && recipe.CKG_NM);\n  }\n\n  // 캐시 관리\n  private getValidCache(key: string): ProcessedCache | null {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n    \n    if (Date.now() - cached.timestamp > this.CACHE_TTL) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return cached;\n  }\n\n  private setCache(key: string, data: MankaeLRecipeRaw[]): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      version: '1.0'\n    });\n  }\n\n  // 🧹 메모리 정리\n  clearCache(): void {\n    this.cache.clear();\n    console.log('🧹 캐시 클리어 완료');\n  }\n\n  // 📊 성능 통계\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// 싱글톤 인스턴스\nexport const optimizedCSVProcessor = OptimizedCSVProcessor.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
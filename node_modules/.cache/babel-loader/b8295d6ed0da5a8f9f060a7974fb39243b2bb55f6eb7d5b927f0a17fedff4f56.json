{"ast":null,"code":"var _jsxFileName = \"/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/components/InputScreen.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, VStack, Button, HStack, useToast, Spinner, keyframes, useColorModeValue } from '@chakra-ui/react';\nimport { useAppContext } from '../context/AppContext';\nimport { getRecommendationMessage } from '../data/mockProducts';\nimport { fastRecommendationEngine } from '../utils/fastRecommendationEngine';\nimport { recipeLoader } from '../data/recipeData'; // 캐시 클리어용\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor'; // CSV 캐시 클리어용\n\nimport { calculateCompleteNutrition } from '../utils/calorieCalculator';\nimport Layout from './Layout/Layout';\n\n// 온보딩 컴포넌트들 (간소화)\nimport ProgressIndicator from './Onboarding/ProgressIndicator';\nimport GoalSelection from './Onboarding/GoalSelection';\nimport BudgetSelection from './Onboarding/BudgetSelection';\nimport BasicInfo from './Onboarding/BasicInfo';\n\n// 🎯 목표 진행도 계산 헬퍼 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateGoalProgress = (userProfile, targets) => {\n  const {\n    goal,\n    weight\n  } = userProfile;\n  const progressMessages = {\n    weight_loss: {\n      message: `${targets.targetCalories}kcal 식단으로 건강한 체중감량 진행중!`,\n      percentage: 0,\n      // 실제로는 시작 체중 대비 현재 진행률\n      nextMilestone: '첫 1kg 감량까지 약 2주 예상'\n    },\n    muscle_gain: {\n      message: `일일 단백질 ${Math.round(targets.dailyProteinNeeds)}g로 근성장 최적화!`,\n      percentage: 0,\n      nextMilestone: '첫 근력 향상까지 약 4주 예상'\n    },\n    maintenance: {\n      message: `${weight}kg 건강 체중 유지를 위한 균형 식단!`,\n      percentage: 100,\n      // 유지 목표는 100%\n      nextMilestone: '꾸준한 건강 관리가 목표!'\n    }\n  };\n  return progressMessages[goal || 'maintenance'];\n};\n\n// 애니메이션 키프레임\nconst fadeInUp = keyframes`\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n`;\nconst float = keyframes`\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n`;\nconst pulse = keyframes`\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n`;\n\n// 타이핑 효과 훅\nconst useTypingEffect = (text, speed = 100) => {\n  _s();\n  const [displayText, setDisplayText] = useState('');\n  const [isCompleted, setIsCompleted] = useState(false);\n  useEffect(() => {\n    let i = 0;\n    const timer = setInterval(() => {\n      if (i < text.length) {\n        setDisplayText(text.slice(0, i + 1));\n        i++;\n      } else {\n        setIsCompleted(true);\n        clearInterval(timer);\n      }\n    }, speed);\n    return () => clearInterval(timer);\n  }, [text, speed]);\n  return {\n    displayText,\n    isCompleted\n  };\n};\n_s(useTypingEffect, \"vBAVAbQ5MKTcV9VA4hlR+pwlrfw=\");\nconst InputScreen = () => {\n  _s2();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const {\n    // 기존 상태\n    setUserInput,\n    setRecommendationResult,\n    isLoading,\n    setIsLoading,\n    // 새로운 온보딩 상태\n    userProfile,\n    updateUserProfile,\n    currentStep,\n    setCurrentStep,\n    completedSteps,\n    setCompletedSteps,\n    calorieCalculation,\n    setCalorieCalculation,\n    setIsOnboardingComplete\n  } = useAppContext();\n\n  // 히어로 섹션 상태\n  const [showHero, setShowHero] = useState(true);\n  const [userProblems, setUserProblems] = useState([{\n    problem: \"매번 뭘 먹을지 고민돼요 😰\",\n    checked: false\n  }, {\n    problem: \"재료 구매가 너무 번거로워요 🛒\",\n    checked: false\n  }, {\n    problem: \"예산 관리가 어려워요 💸\",\n    checked: false\n  }]);\n\n  // 타이핑 효과\n  const mainMessage = useTypingEffect(\"매번 식단 할 때 뭘 먹을지 고민되고, 재료 구매가 번거로우셨나요?\", 50);\n  const subMessage = useTypingEffect(\"예산 내에서 목표에 맞는 레시피를 추천하고 재료를 쿠팡에서 바로 주문하세요.\", 40);\n\n  // 색상 모드\n  const bgGradient = useColorModeValue('linear(to-br, blue.50, teal.50, green.50)', 'linear(to-br, blue.900, teal.900, green.900)');\n  const cardBg = useColorModeValue('white', 'gray.700');\n  const textColor = useColorModeValue('gray.700', 'gray.200');\n\n  // 인터랙티브 기능들\n  const handleProblemCheck = index => {\n    setUserProblems(prev => prev.map((item, i) => i === index ? {\n      ...item,\n      checked: !item.checked\n    } : item));\n  };\n  const handleStartJourney = () => {\n    setShowHero(false);\n    setCurrentStep('goal');\n  };\n  const allProblemsChecked = userProblems.every(p => p.checked);\n\n  // 단계별 필수 조건 체크 (간소화 + 디버깅)\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 'goal':\n        return userProfile.goal !== undefined;\n      case 'budget':\n        return userProfile.budget && userProfile.budget > 0;\n      case 'basic_info':\n        // MVP 테스트용: 기본값이 있으면 통과 (더 관대한 검증)\n        const hasGender = userProfile.gender;\n        const hasBasicInfo = userProfile.height && userProfile.weight && userProfile.age;\n        const hasActivity = userProfile.activityLevel;\n        const isValid = hasGender && hasBasicInfo && hasActivity;\n\n        // 디버깅용 콘솔 로그\n        console.log('BasicInfo 검증 (MVP):', {\n          gender: userProfile.gender,\n          height: userProfile.height,\n          weight: userProfile.weight,\n          age: userProfile.age,\n          activityLevel: userProfile.activityLevel,\n          hasGender,\n          hasBasicInfo,\n          hasActivity,\n          isValid\n        });\n        return isValid;\n      default:\n        return false;\n    }\n  };\n\n  // 다음 단계로 이동\n  const handleNext = () => {\n    if (!isStepValid()) {\n      toast({\n        title: '정보를 입력해주세요',\n        description: '다음 단계로 진행하기 위해 필요한 정보를 모두 입력해주세요.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n\n    // 현재 단계를 완료된 단계에 추가\n    if (!completedSteps.includes(currentStep)) {\n      setCompletedSteps([...completedSteps, currentStep]);\n    }\n\n    // 다음 단계로 이동 (간소화)\n    const stepOrder = ['goal', 'budget', 'basic_info'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    if (currentIndex < stepOrder.length - 1) {\n      setCurrentStep(stepOrder[currentIndex + 1]);\n    }\n  };\n\n  // 이전 단계로 이동 (간소화)\n  const handlePrevious = () => {\n    const stepOrder = ['goal', 'budget', 'basic_info'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    if (currentIndex > 0) {\n      setCurrentStep(stepOrder[currentIndex - 1]);\n    }\n  };\n\n  // 칼로리 계산\n  useEffect(() => {\n    if (userProfile.gender && userProfile.height && userProfile.weight && userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      const calculation = calculateCompleteNutrition(userProfile);\n      setCalorieCalculation(calculation);\n    }\n  }, [userProfile, setCalorieCalculation]);\n\n  // 온보딩 완료 및 식단 추천\n  const handleComplete = async () => {\n    // 칼로리 계산이 안되어 있으면 자동 계산\n    let finalCalorieCalculation = calorieCalculation;\n    if (!finalCalorieCalculation && userProfile.gender && userProfile.height && userProfile.weight && userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      finalCalorieCalculation = calculateCompleteNutrition(userProfile);\n      setCalorieCalculation(finalCalorieCalculation);\n    }\n    if (!finalCalorieCalculation) {\n      toast({\n        title: '정보 부족',\n        description: '칼로리 계산을 위한 정보가 부족합니다. 모든 정보를 입력해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // 온보딩 완료 표시\n      setIsOnboardingComplete(true);\n\n      // 기존 UserInput 형식으로 변환하여 저장\n      const inputData = {\n        budget: userProfile.budget,\n        // 사용자가 설정한 예산 사용\n        nutrients: finalCalorieCalculation.macros\n      };\n      setUserInput(inputData);\n\n      // 🚀 초고속 로딩 (더미 지연 제거)\n      // await new Promise(resolve => setTimeout(resolve, 500)); // 제거\n\n      // 사용자 선호도와 히스토리 시뮬레이션 (실제로는 localStorage나 DB에서 가져옴)\n      const preferences = {\n        cookingTime: userProfile.goal === 'weight_loss' ? 'quick' : 'normal',\n        difficulty: 'easy',\n        priceRange: inputData.budget > 400000 ? 'premium' : inputData.budget > 250000 ? 'standard' : 'budget'\n      };\n      const history = {\n        purchasedProducts: [],\n        // 실제로는 구매 이력\n        cookedRecipes: [],\n        // 실제로는 조리 이력\n        favoriteIngredients: [] // 실제로는 선호 재료\n      };\n\n      // 🚀 초고속 개인맞춤 추천 실행!\n      console.log('⚡ 초고속 추천 엔진 사용');\n\n      // 🔥 모든 캐시 클리어 (문제 해결용)\n      fastRecommendationEngine.clearCache();\n      recipeLoader.clearCache(); // 레시피 캐시도 클리어!\n      optimizedCSVProcessor.clearCache(); // CSV 캐시도 클리어!\n      console.log('🧹 모든 캐시 클리어 완료');\n\n      // 🔍 시스템 진단 실행\n      await recipeLoader.diagnoseCacheStatus();\n      const fastResult = await fastRecommendationEngine.generateFastRecommendations(userProfile, finalCalorieCalculation, inputData.budget);\n\n      // 💰 호환성을 위해 기존 형식으로 변환\n      const personalizedResult = {\n        recommendedRecipes: fastResult.recommendedRecipes,\n        budgetAnalysis: fastResult.budgetAnalysis,\n        personalizedMessage: `🎯 ${userProfile.goal === 'weight_loss' ? '체중 감량' : userProfile.goal === 'muscle_gain' ? '근육 증가' : '체중 유지'} 목표에 맞는 맞춤 레시피를 추천드립니다!`,\n        nutritionTargets: {\n          targetCalories: finalCalorieCalculation.tdee,\n          macroGrams: finalCalorieCalculation.macros,\n          dailyTargets: {\n            calories: finalCalorieCalculation.tdee,\n            protein: finalCalorieCalculation.macros.protein,\n            carb: finalCalorieCalculation.macros.carb,\n            fat: finalCalorieCalculation.macros.fat\n          },\n          dailyProteinNeeds: finalCalorieCalculation.macros.protein,\n          macroPercentages: {\n            protein: 25,\n            carb: 50,\n            fat: 25\n          }\n        },\n        recommendedProducts: [],\n        // 빠른 로딩을 위해 일단 빈 배열\n        context: {\n          userProfile: userProfile,\n          calorieCalculation,\n          currentTime: new Date(),\n          preferences,\n          history\n        }\n      };\n\n      // 🍳 레시피 기반 정확한 예산 계산!\n      const recommendedRecipeList = personalizedResult.recommendedRecipes || [];\n\n      // 🚀 초고속 레시피 처리 (복잡한 계산 최소화)\n      const meals = recommendedRecipeList.slice(0, 3).map((recipe, index) => {\n        var _personalizedResult$b;\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[index] || 'breakfast';\n\n        // 빠른 추정치 사용 (실제 재료 계산 생략)\n        const estimatedCost = ((_personalizedResult$b = personalizedResult.budgetAnalysis.costBreakdown[index]) === null || _personalizedResult$b === void 0 ? void 0 : _personalizedResult$b.monthlyCost) || 45000;\n        const estimatedNutrition = {\n          calories: 400 + index * 50,\n          protein: 25 + index * 5,\n          carb: 45 + index * 10,\n          fat: 15 + index * 3\n        };\n        return {\n          id: mealType,\n          recipe: recipe,\n          products: [{\n            // 간단한 더미 데이터\n            name: recipe.name + ' 재료 세트',\n            price: estimatedCost,\n            usedQuantity: 1,\n            costPerRecipe: estimatedCost / 30,\n            monthlyNeeded: 1\n          }],\n          totalPrice: estimatedCost,\n          totalNutrition: estimatedNutrition,\n          mealType: mealType,\n          servings: 30\n        };\n      });\n\n      // 🚀 빈 슬롯을 간단히 채우기 (복잡한 처리 생략)\n      while (meals.length < 3) {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[meals.length];\n\n        // 기본 더미 레시피 (빠른 로딩)\n        meals.push({\n          id: mealType,\n          recipe: {\n            id: `default-${mealType}`,\n            name: `추천 ${mealType === 'breakfast' ? '아침' : mealType === 'lunch' ? '점심' : '저녁'} 레시피`,\n            description: '개인 맞춤 레시피를 준비 중입니다.',\n            image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400'\n          },\n          products: [],\n          totalPrice: 45000,\n          totalNutrition: {\n            calories: 400,\n            protein: 25,\n            carb: 45,\n            fat: 15\n          },\n          mealType: mealType,\n          servings: 30\n        });\n      }\n\n      // 💰 예산 분석 결과 활용 (정확한 예산 계산)\n      const totalBudgetUsed = personalizedResult.budgetAnalysis.totalEstimatedCost;\n      const budgetRemaining = inputData.budget - totalBudgetUsed;\n\n      // 🎯 개인맞춤 RecommendationResult 생성\n      const result = {\n        meals,\n        totalBudgetUsed,\n        budgetRemaining,\n        nutritionBalance: finalCalorieCalculation.macros,\n        message: personalizedResult.personalizedMessage,\n        // 🌟 개인맞춤 메시지!\n        nutritionTargets: personalizedResult.nutritionTargets,\n        // 🎯 개인 영양 목표\n        recommendedRecipes: personalizedResult.recommendedRecipes,\n        // 🍳 맞춤 레시피\n        userInsights: {\n          dailyCalorieGoal: personalizedResult.nutritionTargets.targetCalories,\n          proteinNeeds: personalizedResult.nutritionTargets.dailyProteinNeeds,\n          budgetPerMeal: Math.round(inputData.budget / 7 / 3),\n          // 끼니당 예산 (일주일 기준)\n          goalProgress: calculateGoalProgress(userProfile, personalizedResult.nutritionTargets)\n        }\n      };\n      setRecommendationResult(result);\n      toast({\n        title: '맞춤 식단 완성! 🎉',\n        description: getRecommendationMessage(userProfile.goal),\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n\n      // 추천 결과 페이지로 이동\n      navigate('/recommendations');\n    } catch (error) {\n      toast({\n        title: '오류 발생',\n        description: '식단 추천 중 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 현재 단계에 맞는 컴포넌트 렌더링 (간소화)\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'goal':\n        return /*#__PURE__*/_jsxDEV(GoalSelection, {\n          selectedGoal: userProfile.goal,\n          onGoalSelect: goal => updateUserProfile({\n            goal\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this);\n      case 'budget':\n        return /*#__PURE__*/_jsxDEV(BudgetSelection, {\n          selectedBudget: userProfile.budget || 170000,\n          onBudgetSelect: budget => updateUserProfile({\n            budget\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this);\n      case 'basic_info':\n        return /*#__PURE__*/_jsxDEV(BasicInfo, {\n          userProfile: userProfile,\n          onProfileUpdate: update => updateUserProfile(update)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this);\n      default:\n        return null;\n    }\n  };\n  const stepOrder = ['goal', 'budget', 'basic_info'];\n  const currentIndex = stepOrder.indexOf(currentStep);\n  const isFirstStep = currentIndex === 0;\n  const isLastStep = currentIndex === stepOrder.length - 1;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxW: {\n        base: \"100%\",\n        sm: \"container.sm\",\n        md: \"4xl\"\n      },\n      px: {\n        base: 4,\n        md: 6\n      },\n      py: {\n        base: 6,\n        md: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        spacing: {\n          base: 6,\n          md: 8\n        },\n        align: \"stretch\",\n        children: [/*#__PURE__*/_jsxDEV(ProgressIndicator, {\n          currentStep: currentStep,\n          completedSteps: completedSteps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), renderCurrentStep(), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: {\n            base: 3,\n            md: 0\n          },\n          w: \"full\",\n          pt: {\n            base: 6,\n            md: 4\n          },\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            justify: \"space-between\",\n            w: \"full\",\n            display: {\n              base: \"none\",\n              md: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              onClick: handlePrevious,\n              isDisabled: isFirstStep,\n              leftIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\u2190\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 27\n              }, this),\n              size: \"lg\",\n              children: \"\\uC774\\uC804\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this), isLastStep ? /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              size: \"lg\",\n              onClick: handleComplete,\n              isLoading: isLoading,\n              loadingText: \"\\uC2DD\\uB2E8 \\uC0DD\\uC131 \\uC911...\",\n              isDisabled: !isStepValid(),\n              rightIcon: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n                size: \"sm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 42\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\uD83C\\uDF89\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 66\n              }, this),\n              px: 8,\n              children: isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              onClick: handleNext,\n              isDisabled: !isStepValid(),\n              rightIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\u2192\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 30\n              }, this),\n              size: \"lg\",\n              children: \"\\uB2E4\\uC74C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 3,\n            w: \"full\",\n            display: {\n              base: \"flex\",\n              md: \"none\"\n            },\n            children: [isLastStep ? /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              size: \"lg\",\n              onClick: handleComplete,\n              isLoading: isLoading,\n              loadingText: \"\\uC2DD\\uB2E8 \\uC0DD\\uC131 \\uC911...\",\n              isDisabled: !isStepValid(),\n              rightIcon: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n                size: \"sm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 42\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\uD83C\\uDF89\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 66\n              }, this),\n              w: \"full\",\n              py: 6,\n              fontSize: \"lg\",\n              borderRadius: \"xl\",\n              children: isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              onClick: handleNext,\n              isDisabled: !isStepValid(),\n              rightIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\u2192\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 30\n              }, this),\n              size: \"lg\",\n              w: \"full\",\n              py: 6,\n              fontSize: \"lg\",\n              borderRadius: \"xl\",\n              children: \"\\uB2E4\\uC74C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 17\n            }, this), !isFirstStep && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              colorScheme: \"gray\",\n              onClick: handlePrevious,\n              leftIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\u2190\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 29\n              }, this),\n              size: \"md\",\n              w: \"full\",\n              borderRadius: \"xl\",\n              children: \"\\uC774\\uC804\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 5\n  }, this);\n};\n_s2(InputScreen, \"D7bGXDln4JcAe9diHDBBfsi6+es=\", false, function () {\n  return [useNavigate, useToast, useAppContext, useTypingEffect, useTypingEffect, useColorModeValue, useColorModeValue, useColorModeValue];\n});\n_c = InputScreen;\nexport default InputScreen;\nvar _c;\n$RefreshReg$(_c, \"InputScreen\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Container","VStack","Button","HStack","useToast","Spinner","keyframes","useColorModeValue","useAppContext","getRecommendationMessage","fastRecommendationEngine","recipeLoader","optimizedCSVProcessor","calculateCompleteNutrition","Layout","ProgressIndicator","GoalSelection","BudgetSelection","BasicInfo","jsxDEV","_jsxDEV","calculateGoalProgress","userProfile","targets","goal","weight","progressMessages","weight_loss","message","targetCalories","percentage","nextMilestone","muscle_gain","Math","round","dailyProteinNeeds","maintenance","fadeInUp","float","pulse","useTypingEffect","text","speed","_s","displayText","setDisplayText","isCompleted","setIsCompleted","i","timer","setInterval","length","slice","clearInterval","InputScreen","_s2","navigate","toast","setUserInput","setRecommendationResult","isLoading","setIsLoading","updateUserProfile","currentStep","setCurrentStep","completedSteps","setCompletedSteps","calorieCalculation","setCalorieCalculation","setIsOnboardingComplete","showHero","setShowHero","userProblems","setUserProblems","problem","checked","mainMessage","subMessage","bgGradient","cardBg","textColor","handleProblemCheck","index","prev","map","item","handleStartJourney","allProblemsChecked","every","p","isStepValid","undefined","budget","hasGender","gender","hasBasicInfo","height","age","hasActivity","activityLevel","isValid","console","log","handleNext","title","description","status","duration","isClosable","includes","stepOrder","currentIndex","indexOf","handlePrevious","calculation","handleComplete","finalCalorieCalculation","inputData","nutrients","macros","preferences","cookingTime","difficulty","priceRange","history","purchasedProducts","cookedRecipes","favoriteIngredients","clearCache","diagnoseCacheStatus","fastResult","generateFastRecommendations","personalizedResult","recommendedRecipes","budgetAnalysis","personalizedMessage","nutritionTargets","tdee","macroGrams","dailyTargets","calories","protein","carb","fat","macroPercentages","recommendedProducts","context","currentTime","Date","recommendedRecipeList","meals","recipe","_personalizedResult$b","mealTypes","mealType","estimatedCost","costBreakdown","monthlyCost","estimatedNutrition","id","products","name","price","usedQuantity","costPerRecipe","monthlyNeeded","totalPrice","totalNutrition","servings","push","image","totalBudgetUsed","totalEstimatedCost","budgetRemaining","result","nutritionBalance","userInsights","dailyCalorieGoal","proteinNeeds","budgetPerMeal","goalProgress","error","renderCurrentStep","selectedGoal","onGoalSelect","fileName","_jsxFileName","lineNumber","columnNumber","selectedBudget","onBudgetSelect","onProfileUpdate","update","isFirstStep","isLastStep","children","maxW","base","sm","md","px","py","spacing","align","w","pt","justify","display","variant","onClick","isDisabled","leftIcon","size","colorScheme","loadingText","rightIcon","fontSize","borderRadius","_c","$RefreshReg$"],"sources":["/Users/kim_seung_bin/Desktop/ksb/public/dev/kkssbbb-github-repo/SmartMealPlanner_front/src/components/InputScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  VStack,\n  Button,\n  HStack,\n  useToast,\n  Spinner,\n  Box,\n  Text,\n  Heading,\n  Image,\n  Badge,\n  SimpleGrid,\n  Icon,\n  keyframes,\n  Flex,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { CheckCircleIcon, ArrowForwardIcon, StarIcon } from '@chakra-ui/icons';\nimport { useAppContext } from '../context/AppContext';\nimport { getRecommendationMessage } from '../data/mockProducts';\nimport { fastRecommendationEngine } from '../utils/fastRecommendationEngine';\nimport { recipeLoader } from '../data/recipeData'; // 캐시 클리어용\nimport { optimizedCSVProcessor } from '../utils/optimizedCSVProcessor'; // CSV 캐시 클리어용\nimport { RecommendationResult, UserProfile, PersonalizedNutritionTargets } from '../types';\nimport { calculateCompleteNutrition } from '../utils/calorieCalculator';\nimport Layout from './Layout/Layout';\n\n// 온보딩 컴포넌트들 (간소화)\nimport ProgressIndicator from './Onboarding/ProgressIndicator';\nimport GoalSelection from './Onboarding/GoalSelection';\nimport BudgetSelection from './Onboarding/BudgetSelection';\nimport BasicInfo from './Onboarding/BasicInfo';\n\n\n\n// 🎯 목표 진행도 계산 헬퍼 함수\nconst calculateGoalProgress = (userProfile: Partial<UserProfile>, targets: PersonalizedNutritionTargets) => {\n  const { goal, weight } = userProfile;\n  \n  const progressMessages = {\n    weight_loss: {\n      message: `${targets.targetCalories}kcal 식단으로 건강한 체중감량 진행중!`,\n      percentage: 0, // 실제로는 시작 체중 대비 현재 진행률\n      nextMilestone: '첫 1kg 감량까지 약 2주 예상'\n    },\n    muscle_gain: {\n      message: `일일 단백질 ${Math.round(targets.dailyProteinNeeds)}g로 근성장 최적화!`,\n      percentage: 0,\n      nextMilestone: '첫 근력 향상까지 약 4주 예상'\n    },\n    maintenance: {\n      message: `${weight}kg 건강 체중 유지를 위한 균형 식단!`,\n      percentage: 100, // 유지 목표는 100%\n      nextMilestone: '꾸준한 건강 관리가 목표!'\n    }\n  };\n\n  return progressMessages[goal || 'maintenance'];\n};\n\n// 애니메이션 키프레임\nconst fadeInUp = keyframes`\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n`;\n\nconst float = keyframes`\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n`;\n\nconst pulse = keyframes`\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n`;\n\n// 타이핑 효과 훅\nconst useTypingEffect = (text: string, speed: number = 100) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  useEffect(() => {\n    let i = 0;\n    const timer = setInterval(() => {\n      if (i < text.length) {\n        setDisplayText(text.slice(0, i + 1));\n        i++;\n      } else {\n        setIsCompleted(true);\n        clearInterval(timer);\n      }\n    }, speed);\n\n    return () => clearInterval(timer);\n  }, [text, speed]);\n\n  return { displayText, isCompleted };\n};\n\nconst InputScreen: React.FC = () => {\n  const navigate = useNavigate();\n  const toast = useToast();\n  \n  const {\n    // 기존 상태\n    setUserInput,\n    setRecommendationResult,\n    isLoading,\n    setIsLoading,\n    // 새로운 온보딩 상태\n    userProfile,\n    updateUserProfile,\n    currentStep,\n    setCurrentStep,\n    completedSteps,\n    setCompletedSteps,\n    calorieCalculation,\n    setCalorieCalculation,\n\n    setIsOnboardingComplete,\n  } = useAppContext();\n\n  // 히어로 섹션 상태\n  const [showHero, setShowHero] = useState(true);\n  const [userProblems, setUserProblems] = useState([\n    { problem: \"매번 뭘 먹을지 고민돼요 😰\", checked: false },\n    { problem: \"재료 구매가 너무 번거로워요 🛒\", checked: false },\n    { problem: \"예산 관리가 어려워요 💸\", checked: false }\n  ]);\n\n  // 타이핑 효과\n  const mainMessage = useTypingEffect(\"매번 식단 할 때 뭘 먹을지 고민되고, 재료 구매가 번거로우셨나요?\", 50);\n  const subMessage = useTypingEffect(\"예산 내에서 목표에 맞는 레시피를 추천하고 재료를 쿠팡에서 바로 주문하세요.\", 40);\n\n  // 색상 모드\n  const bgGradient = useColorModeValue(\n    'linear(to-br, blue.50, teal.50, green.50)',\n    'linear(to-br, blue.900, teal.900, green.900)'\n  );\n  const cardBg = useColorModeValue('white', 'gray.700');\n  const textColor = useColorModeValue('gray.700', 'gray.200');\n\n  // 인터랙티브 기능들\n  const handleProblemCheck = (index: number) => {\n    setUserProblems(prev => \n      prev.map((item, i) => \n        i === index ? { ...item, checked: !item.checked } : item\n      )\n    );\n  };\n\n  const handleStartJourney = () => {\n    setShowHero(false);\n    setCurrentStep('goal');\n  };\n\n  const allProblemsChecked = userProblems.every(p => p.checked);\n\n  // 단계별 필수 조건 체크 (간소화 + 디버깅)\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 'goal':\n        return userProfile.goal !== undefined;\n      case 'budget':\n        return userProfile.budget && userProfile.budget > 0;\n      case 'basic_info':\n        // MVP 테스트용: 기본값이 있으면 통과 (더 관대한 검증)\n        const hasGender = userProfile.gender;\n        const hasBasicInfo = userProfile.height && userProfile.weight && userProfile.age;\n        const hasActivity = userProfile.activityLevel;\n        \n        const isValid = hasGender && hasBasicInfo && hasActivity;\n        \n        // 디버깅용 콘솔 로그\n        console.log('BasicInfo 검증 (MVP):', {\n          gender: userProfile.gender,\n          height: userProfile.height,\n          weight: userProfile.weight,\n          age: userProfile.age,\n          activityLevel: userProfile.activityLevel,\n          hasGender,\n          hasBasicInfo,\n          hasActivity,\n          isValid\n        });\n        \n        return isValid;\n      default:\n        return false;\n    }\n  };\n\n  // 다음 단계로 이동\n  const handleNext = () => {\n    if (!isStepValid()) {\n      toast({\n        title: '정보를 입력해주세요',\n        description: '다음 단계로 진행하기 위해 필요한 정보를 모두 입력해주세요.',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // 현재 단계를 완료된 단계에 추가\n    if (!completedSteps.includes(currentStep)) {\n      setCompletedSteps([...completedSteps, currentStep]);\n    }\n\n    // 다음 단계로 이동 (간소화)\n    const stepOrder: (typeof currentStep)[] = ['goal', 'budget', 'basic_info'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    \n    if (currentIndex < stepOrder.length - 1) {\n      setCurrentStep(stepOrder[currentIndex + 1]);\n    }\n  };\n\n  // 이전 단계로 이동 (간소화)\n  const handlePrevious = () => {\n    const stepOrder: (typeof currentStep)[] = ['goal', 'budget', 'basic_info'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    \n    if (currentIndex > 0) {\n      setCurrentStep(stepOrder[currentIndex - 1]);\n    }\n  };\n\n  // 칼로리 계산\n  useEffect(() => {\n    if (userProfile.gender && userProfile.height && userProfile.weight && \n        userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      const calculation = calculateCompleteNutrition(userProfile as UserProfile);\n      setCalorieCalculation(calculation);\n    }\n  }, [userProfile, setCalorieCalculation]);\n\n  // 온보딩 완료 및 식단 추천\n  const handleComplete = async () => {\n    // 칼로리 계산이 안되어 있으면 자동 계산\n    let finalCalorieCalculation = calorieCalculation;\n    if (!finalCalorieCalculation && userProfile.gender && userProfile.height && \n        userProfile.weight && userProfile.age && userProfile.goal && userProfile.activityLevel) {\n      finalCalorieCalculation = calculateCompleteNutrition(userProfile as UserProfile);\n      setCalorieCalculation(finalCalorieCalculation);\n    }\n\n    if (!finalCalorieCalculation) {\n      toast({\n        title: '정보 부족',\n        description: '칼로리 계산을 위한 정보가 부족합니다. 모든 정보를 입력해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // 온보딩 완료 표시\n      setIsOnboardingComplete(true);\n      \n      // 기존 UserInput 형식으로 변환하여 저장\n      const inputData = {\n        budget: userProfile.budget!, // 사용자가 설정한 예산 사용\n        nutrients: finalCalorieCalculation.macros,\n      };\n      setUserInput(inputData);\n\n      // 🚀 초고속 로딩 (더미 지연 제거)\n      // await new Promise(resolve => setTimeout(resolve, 500)); // 제거\n\n      // 사용자 선호도와 히스토리 시뮬레이션 (실제로는 localStorage나 DB에서 가져옴)\n      const preferences = {\n        cookingTime: userProfile.goal === 'weight_loss' ? 'quick' as const : 'normal' as const,\n        difficulty: 'easy' as const,\n        priceRange: inputData.budget > 400000 ? 'premium' as const : \n                   inputData.budget > 250000 ? 'standard' as const : 'budget' as const\n      };\n\n      const history = {\n        purchasedProducts: [], // 실제로는 구매 이력\n        cookedRecipes: [],     // 실제로는 조리 이력\n        favoriteIngredients: [] // 실제로는 선호 재료\n      };\n\n      // 🚀 초고속 개인맞춤 추천 실행!\n      console.log('⚡ 초고속 추천 엔진 사용');\n      \n      // 🔥 모든 캐시 클리어 (문제 해결용)\n      fastRecommendationEngine.clearCache();\n      recipeLoader.clearCache(); // 레시피 캐시도 클리어!\n      optimizedCSVProcessor.clearCache(); // CSV 캐시도 클리어!\n      console.log('🧹 모든 캐시 클리어 완료');\n\n      // 🔍 시스템 진단 실행\n      await recipeLoader.diagnoseCacheStatus();\n      \n      const fastResult = await fastRecommendationEngine.generateFastRecommendations(\n        userProfile as UserProfile,\n        finalCalorieCalculation,\n        inputData.budget\n      );\n      \n      // 💰 호환성을 위해 기존 형식으로 변환\n      const personalizedResult = {\n        recommendedRecipes: fastResult.recommendedRecipes,\n        budgetAnalysis: fastResult.budgetAnalysis,\n        personalizedMessage: `🎯 ${userProfile.goal === 'weight_loss' ? '체중 감량' : \n                                 userProfile.goal === 'muscle_gain' ? '근육 증가' : '체중 유지'} 목표에 맞는 맞춤 레시피를 추천드립니다!`,\n        nutritionTargets: {\n          targetCalories: finalCalorieCalculation.tdee,\n          macroGrams: finalCalorieCalculation.macros,\n          dailyTargets: {\n            calories: finalCalorieCalculation.tdee,\n            protein: finalCalorieCalculation.macros.protein,\n            carb: finalCalorieCalculation.macros.carb,\n            fat: finalCalorieCalculation.macros.fat\n          },\n          dailyProteinNeeds: finalCalorieCalculation.macros.protein,\n          macroPercentages: {\n            protein: 25,\n            carb: 50,\n            fat: 25\n          }\n        },\n        recommendedProducts: [], // 빠른 로딩을 위해 일단 빈 배열\n        context: {\n          userProfile: userProfile as UserProfile,\n          calorieCalculation,\n          currentTime: new Date(),\n          preferences,\n          history\n        }\n      };\n\n\n\n      // 🍳 레시피 기반 정확한 예산 계산!\n      const recommendedRecipeList = personalizedResult.recommendedRecipes || [];\n      \n      // 🚀 초고속 레시피 처리 (복잡한 계산 최소화)\n      const meals: any[] = recommendedRecipeList.slice(0, 3).map((recipe, index) => {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[index] || 'breakfast';\n        \n        // 빠른 추정치 사용 (실제 재료 계산 생략)\n        const estimatedCost = personalizedResult.budgetAnalysis.costBreakdown[index]?.monthlyCost || 45000;\n        const estimatedNutrition = {\n          calories: 400 + index * 50,\n          protein: 25 + index * 5,\n          carb: 45 + index * 10,\n          fat: 15 + index * 3\n        };\n\n        return {\n          id: mealType,\n          recipe: recipe,\n          products: [{ // 간단한 더미 데이터\n            name: recipe.name + ' 재료 세트',\n            price: estimatedCost,\n            usedQuantity: 1,\n            costPerRecipe: estimatedCost / 30,\n            monthlyNeeded: 1\n          }],\n          totalPrice: estimatedCost,\n          totalNutrition: estimatedNutrition,\n          mealType: mealType,\n          servings: 30,\n        };\n      });\n\n      // 🚀 빈 슬롯을 간단히 채우기 (복잡한 처리 생략)\n      while (meals.length < 3) {\n        const mealTypes = ['breakfast', 'lunch', 'dinner'];\n        const mealType = mealTypes[meals.length];\n        \n        // 기본 더미 레시피 (빠른 로딩)\n        meals.push({\n          id: mealType,\n          recipe: {\n            id: `default-${mealType}`,\n            name: `추천 ${mealType === 'breakfast' ? '아침' : mealType === 'lunch' ? '점심' : '저녁'} 레시피`,\n            description: '개인 맞춤 레시피를 준비 중입니다.',\n            image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?q=80&w=400'\n          },\n          products: [],\n          totalPrice: 45000,\n          totalNutrition: { calories: 400, protein: 25, carb: 45, fat: 15 },\n          mealType: mealType,\n          servings: 30,\n        });\n      }\n\n      // 💰 예산 분석 결과 활용 (정확한 예산 계산)\n      const totalBudgetUsed = personalizedResult.budgetAnalysis.totalEstimatedCost;\n      const budgetRemaining = inputData.budget - totalBudgetUsed;\n\n      // 🎯 개인맞춤 RecommendationResult 생성\n      const result: RecommendationResult = {\n        meals,\n        totalBudgetUsed,\n        budgetRemaining,\n        nutritionBalance: finalCalorieCalculation.macros,\n        message: personalizedResult.personalizedMessage, // 🌟 개인맞춤 메시지!\n        nutritionTargets: personalizedResult.nutritionTargets, // 🎯 개인 영양 목표\n        recommendedRecipes: personalizedResult.recommendedRecipes, // 🍳 맞춤 레시피\n        userInsights: {\n          dailyCalorieGoal: personalizedResult.nutritionTargets.targetCalories,\n          proteinNeeds: personalizedResult.nutritionTargets.dailyProteinNeeds,\n          budgetPerMeal: Math.round(inputData.budget / 7 / 3), // 끼니당 예산 (일주일 기준)\n          goalProgress: calculateGoalProgress(userProfile, personalizedResult.nutritionTargets as any)\n        }\n      };\n\n      setRecommendationResult(result);\n\n      toast({\n        title: '맞춤 식단 완성! 🎉',\n        description: getRecommendationMessage(userProfile.goal!),\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // 추천 결과 페이지로 이동\n      navigate('/recommendations');\n\n    } catch (error) {\n      toast({\n        title: '오류 발생',\n        description: '식단 추천 중 문제가 발생했습니다. 다시 시도해주세요.',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 현재 단계에 맞는 컴포넌트 렌더링 (간소화)\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'goal':\n        return (\n          <GoalSelection\n            selectedGoal={userProfile.goal}\n            onGoalSelect={(goal) => updateUserProfile({ goal })}\n          />\n        );\n      case 'budget':\n        return (\n          <BudgetSelection\n            selectedBudget={userProfile.budget || 170000}\n            onBudgetSelect={(budget) => updateUserProfile({ budget })}\n          />\n        );\n      case 'basic_info':\n        return (\n          <BasicInfo\n            userProfile={userProfile}\n            onProfileUpdate={(update) => updateUserProfile(update)}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  const stepOrder: (typeof currentStep)[] = ['goal', 'budget', 'basic_info'];\n  const currentIndex = stepOrder.indexOf(currentStep);\n  const isFirstStep = currentIndex === 0;\n  const isLastStep = currentIndex === stepOrder.length - 1;\n\n  return (\n    <Layout>\n      <Container maxW={{ base: \"100%\", sm: \"container.sm\", md: \"4xl\" }} px={{ base: 4, md: 6 }} py={{ base: 6, md: 8 }}>\n        <VStack spacing={{ base: 6, md: 8 }} align=\"stretch\">\n          {/* 진행 상황 표시 */}\n          <ProgressIndicator\n            currentStep={currentStep}\n            completedSteps={completedSteps}\n          />\n\n          {/* 현재 단계 컴포넌트 */}\n          {renderCurrentStep()}\n\n          {/* 네비게이션 버튼 - 모바일 최적화 */}\n          <VStack spacing={{ base: 3, md: 0 }} w=\"full\" pt={{ base: 6, md: 4 }}>\n            {/* 데스크톱 레이아웃 */}\n            <HStack justify=\"space-between\" w=\"full\" display={{ base: \"none\", md: \"flex\" }}>\n              <Button\n                variant=\"outline\"\n                onClick={handlePrevious}\n                isDisabled={isFirstStep}\n                leftIcon={<span>←</span>}\n                size=\"lg\"\n              >\n                이전\n              </Button>\n\n              {isLastStep ? (\n                <Button\n                  colorScheme=\"teal\"\n                  size=\"lg\"\n                  onClick={handleComplete}\n                  isLoading={isLoading}\n                  loadingText=\"식단 생성 중...\"\n                  isDisabled={!isStepValid()}\n                  rightIcon={isLoading ? <Spinner size=\"sm\" /> : <span>🎉</span>}\n                  px={8}\n                >\n                  {isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'}\n                </Button>\n              ) : (\n                <Button\n                  colorScheme=\"teal\"\n                  onClick={handleNext}\n                  isDisabled={!isStepValid()}\n                  rightIcon={<span>→</span>}\n                  size=\"lg\"\n                >\n                  다음\n                </Button>\n              )}\n            </HStack>\n\n            {/* 모바일 전용 버튼 레이아웃 */}\n            <VStack spacing={3} w=\"full\" display={{ base: \"flex\", md: \"none\" }}>\n              {isLastStep ? (\n                <Button\n                  colorScheme=\"teal\"\n                  size=\"lg\"\n                  onClick={handleComplete}\n                  isLoading={isLoading}\n                  loadingText=\"식단 생성 중...\"\n                  isDisabled={!isStepValid()}\n                  rightIcon={isLoading ? <Spinner size=\"sm\" /> : <span>🎉</span>}\n                  w=\"full\"\n                  py={6}\n                  fontSize=\"lg\"\n                  borderRadius=\"xl\"\n                >\n                  {isLoading ? '맞춤 식단 생성 중...' : '맞춤 식단 받기'}\n                </Button>\n              ) : (\n                <Button\n                  colorScheme=\"teal\"\n                  onClick={handleNext}\n                  isDisabled={!isStepValid()}\n                  rightIcon={<span>→</span>}\n                  size=\"lg\"\n                  w=\"full\"\n                  py={6}\n                  fontSize=\"lg\"\n                  borderRadius=\"xl\"\n                >\n                  다음\n                </Button>\n              )}\n              \n              {!isFirstStep && (\n                <Button\n                  variant=\"outline\"\n                  colorScheme=\"gray\"\n                  onClick={handlePrevious}\n                  leftIcon={<span>←</span>}\n                  size=\"md\"\n                  w=\"full\"\n                  borderRadius=\"xl\"\n                >\n                  이전\n                </Button>\n              )}\n            </VStack>\n          </VStack>\n        </VStack>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default InputScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}